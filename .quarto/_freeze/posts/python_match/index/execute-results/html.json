{
  "hash": "92880db02adb864ce86c594ace5a6353",
  "result": {
    "markdown": "---\ntitle: \"Python match\"\nsubtitle: \"Une nouveauté de python 3.10\"\ndescription: \"Présentation de l'instruction `match ... case` en Python\"\ndate: \"2023-01-30\"\ncategories: [python, nsi, programmation]\nimage: \"python_laptop.png\"\n---\n\nLa version 3.10 de python est sortie le 4 octobre 2021 et apporte parmi d'autres améliorations, une nouvelle structure conditionnelle : la structure `match ... case`.\n\n![](python310.png){fig-align=\"center\" width=\"50%\"}\n\n## Un cas simple\n\nUne instruction de ce type existe déjà dans d'autres langages de programmation comme le JavaScript ou le C. Elle permet de tester une valeur et d'exécuter un bloc de code en fonction de la valeur testée. Dans ces deux langages, l'instruction s'appelle `switch ... case`. En python, elle s'appelle `match ... case`.\n\nVoici un exemple d'utilisation de l'instruction `switch ... case` en JavaScript :\n\n```{.javascript filename=\"Langage JavaScript\"}\nlet x = 3;\n\nswitch (x) {\n  case 1:\n    console.log(\"x est égal à 1\");\n    break;\n  case 2:\n    console.log(\"x est égal à 2\");\n    break;\n  case 3:\n    console.log(\"x est égal à 3\");\n    break;\n  case 4:\n    console.log(\"x est égal à 4\");\n    break;\n  default:\n    console.log(\"x n'est pas égal à 1, 2, 3 ou 4\");\n}\n```\n\nEt maintenant de C :\n\n```{.C filename=\"Langage C\"}\nint x = 3;\n\nswitch (x) {\n  case 1:\n    printf(\"x est égal à 1\");\n    break;\n  case 2:\n    printf(\"x est égal à 2\");\n    break;\n  case 3:\n    printf(\"x est égal à 3\");\n    break;\n  case 4:\n    printf(\"x est égal à 4\");\n    break;\n  default:\n    printf(\"x n'est pas égal à 1, 2, 3 ou 4\");\n}\n```\n\nC'est la même chose ! On retrouve la même structure dans les deux langages. En python, c'est la même chose :\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nx = 3\n\nmatch x:\n    case 1:\n        print(\"x est égal à 1\")\n    case 2:\n        print(\"x est égal à 2\")\n    case 3:\n        print(\"x est égal à 3\")\n    case 4:\n        print(\"x est égal à 4\")\n    case _:\n        print(\"x n'est pas égal à 1, 2, 3 ou 4\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx est égal à 3\n```\n:::\n:::\n\n\nOn peut voir que l'instruction `match ... case` est très proche de l'instruction `if ... elif ... else` en python. La différence est que l'instruction `match ... case` permet de tester plusieurs valeurs d'une variable en une seule instruction. C'est très pratique pour vérifier les valeurs d'une variable.\n\nPar rapport aux autres langages mentionnés, on remarquera qu'il n'est pas nécessaire en python d'utiliser l'instruction `break`, c'est comme d'habitude l'indentation qui délimite les blocs de code.\n\nPar ailleurs, pas d'instruction `default` en python, on utilise l'instruction `case _` pour gérer le cas par défaut.\n\n## Un cas plus complexe\n\nL'instruction `match ... case` permet de faire des choses beaucoup plus complexes, on peut par exemple ajouter des conditions à chaque cas :\n\n```{.python filename=\"Python\"}\nimport random\ncible = random.randint (0, 100)\n\nnbEssai = 0\ngameOver = False\n\nwhile gameOver == False:\n   print ( f\"Vous avez essayé {nbEssai} fois\")\n   proposition = int (input (\"Votre essai : \"))\n   match proposition:\n      case ( i ) if i < 0 or i > 100:\n         print(\"Le nombre doit être compris entre 0 et 100 \")\n      case ( i ) if i < cible:\n         print(\"Trop petit !\")\n         nbEssai += 1\n      case ( i ) if i > cible:\n         print(\"Trop grand!\")\n         nbEssai += 1\n      case ( i ) if i == cible:\n         print(\"Gagné !\")\n         gameOver = True\n```\n\nDans ce jeu de devinette, la variable `proposition` est remplacées dans les conditions `case` par la variable `i`. C'est une variable temporaire qui prend la valeur de `proposition` pour chaque cas. On peut donc utiliser `i` dans les conditions `if` pour tester la valeur de `proposition`.\n\nUn dernier exemple pour terminer :\n\n```{.python filename=\"Python\"}\nreponse = input(\"Entrez votre prénom et votre nom : \")\n\nmatch reponse.split():\n    case [prenom, nom]:\n        print(f\"Bonjour {prenom} {nom} !\")\n    case [mot_unique]:\n        print(f\"Bonjour {mot_unique} ! Il me manque votre nom complet.\")\n    case [prenom, nom, *_]:\n        print(f\"Bonjour {prenom} {nom} ! Vous m'avez donné trop d'informations.\")\n```\n\nDans cet exemple, on utilise la méthode `split` pour découper la chaîne de caractères `reponse` en une liste de mots. On utilise ensuite cette liste dans les conditions `case` pour tester le nombre de mots dans la chaîne de caractères. Le symbole `*_` est utilisé pour représenter un nombre quelconque de mots.\n\nVoici par exemple le résultat de l'exécution de ce programme dans la console python :\n\n```{.python filename=\"Console python\"}\n>>> Entrez votre prénom et votre nom : Jean Dupont\nBonjour Jean Dupont !\n>>> Entrez votre prénom et votre nom : Jean\nBonjour Jean ! Il me manque votre nom complet.\n>>> Entrez votre prénom et votre nom : Jean Dupont et je suis un génie\nBonjour Jean Dupont ! Vous m'avez donné trop d'informations.\n```\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}