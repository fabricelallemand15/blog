{
  "hash": "1d24ed07b65d93a078fed27aa482ebf8",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"La méthode du pivot de Gauss : résoudre des systèmes linéaires comme un pro !\"\ndate: \"2024-10-08\"\ncategories: [Mathématiques, Python, Programmation]\nimage: Carl_Friedrich_Gauss_1840_by_Jensen.jpg\n---\n\n\n## C'est quoi cette histoire de pivot ?\n\nLa méthode du pivot de Gauss, c'est une technique super efficace pour résoudre des systèmes d'équations linéaires. L'idée, c'est de transformer notre système initial en un système équivalent, mais beaucoup plus simple à résoudre. Comment ? En éliminant progressivement les variables, une par une, jusqu'à obtenir un système triangulaire.\n\nImaginez que vous essayez de démêler un nœud de câbles. Vous commencez par un bout, vous dégagez un câble, puis un autre, et ainsi de suite jusqu'à ce que tout soit bien ordonné. C'est exactement ce que fait la méthode de Gauss avec nos équations !\n\n## Un exemple pour mieux comprendre\n\nAllez, on se lance dans un exemple concret. On va résoudre un système de trois équations à trois inconnues. Attachez vos ceintures, ça va décoiffer !\n\nSoit le système suivant :\n\n$$\n\\begin{cases}\n2&x &+& y &-& &z &=& 8 \\\\\n-3&x &-& y &+& 2&z &=& -11 \\\\\n-2&x &+& y &+& 2&z &=& -3\n\\end{cases}\n$$\n\n### Étape 1 : On choisit notre pivot\n\nOn va utiliser la première équation comme pivot pour éliminer $x$ dans les autres équations. \n\n### Étape 2 : On élimine $x$ dans la deuxième et la troisième équation\n\n- Pour la deuxième équation, on ajoute 3/2 fois la première équation\n- Pour la troisième équation, on ajoute 1 fois la première équation\n\nOn obtient le système équivalent :\n\n$$\n\\begin{cases}\n2&x &+& &y &-& &z &=& 8 \\\\\n& &&\\frac{1}{2}&y &+& \\frac{1}{2}&z &=& 1 \\\\\n& &&2&y &+& &z &=& 5\n\\end{cases}\n$$\n\n### Étape 3 : On élimine $y$ dans la troisième équation\n\nMaintenant, on utilise la deuxième équation comme pivot pour éliminer $y$ dans la troisième équation. On multiplie la deuxième équation par $-4$ et on l'ajoute à la troisième équation :\n\n$$\n\\begin{cases}\n2& &+ &&y &- &&z &= 8 \\\\\n&&&\\frac{1}{2}&y &+ &\\frac{1}{2}&z &= 1 \\\\\n&& &&&-&&z &= 1\n\\end{cases}\n$$\n\n### Étape 4 : On résout !\n\nEt voilà, on a notre système triangulaire ! C'est comme avoir dénoué tous nos câbles. Maintenant, on peut facilement trouver nos inconnues :\n\n1. De la dernière équation : $z = -1$\n2. De la deuxième équation : $\\frac{1}{2}y + \\frac{1}{2}(-1) = 1$, donc $y = 3$\n3. De la première équation : $2x + 3 + 1 = 8$, donc $x = 2$\n\nNotre solution est donc $(x, y, z) = (2, 3, -1)$.\n\n## Généralisation et équivalence des systèmes\n\nMaintenant que nous avons vu un exemple concret, parlons un peu de ce qui se passe en coulisses. La magie de la méthode du pivot de Gauss repose sur l'utilisation d'opérations élémentaires qui nous permettent de passer d'un système à un autre équivalent.\n\nMais qu'est-ce qu'un système équivalent ? C'est simple : deux systèmes sont équivalents s'ils ont exactement les mêmes solutions. En d'autres termes, peu importe lequel des deux systèmes, vous résolvez, vous obtiendrez le même résultat final.\n\nLes opérations élémentaires que nous utilisons sont :\n\n1. Échanger deux équations\n2. Multiplier une équation par un nombre non nul\n3. Ajouter à une équation un multiple d'une autre équation\n\nCes opérations sont comme des tours de magie mathématiques : elles transforment notre système, mais sans jamais changer ses solutions. C'est un peu comme si vous réarrangiez les pièces d'un puzzle sans changer l'image finale.\n\nPourquoi est-ce si important ? Eh bien, cela signifie que nous pouvons manipuler notre système initial pour le rendre plus simple à résoudre, sans craindre de perdre ou de modifier les solutions en cours de route. C'est ce qui nous permet de passer d'un système compliqué à un système triangulaire facile à résoudre, comme nous l'avons fait dans notre exemple.\n\nDans le cas général, pour un système de $n$ équations à $n$ inconnues, nous appliquons ces opérations de manière systématique :\n\n1. On choisit un pivot (généralement le premier coefficient non nul de la première colonne) et on échange l'équation correspondante avec la première équation\n2. On utilise ce pivot pour éliminer la première variable dans toutes les équations suivantes\n3. On répète le processus avec la deuxième équation comme nouveau pivot, et ainsi de suite.\n\nÀ chaque étape, nous créons un nouveau système équivalent, jusqu'à obtenir un système triangulaire que nous pouvons résoudre facilement par substitution inverse.\n\nCette approche nous permet de résoudre des systèmes de plus en plus grands et complexes, tout en gardant la certitude que nos manipulations préservent les solutions originales. C'est la beauté et la puissance de la méthode du pivot de Gauss !\n\n## Automatisons tout ça avec Python !\n\nMaintenant que vous êtes des pros du pivot de Gauss, que diriez-vous d'automatiser tout ça avec un peu de code Python ? C'est parti !\n\nMais avant de plonger dans le code, parlons un peu de la façon dont nous allons représenter notre système d'équations en Python.\n\n### Représentation du système en Python\n\nEn Python, nous allons utiliser un tableau NumPy pour représenter notre système d'équations. Pourquoi NumPy ? Parce que c'est super efficace pour les calculs numériques et ça nous facilite la vie pour manipuler nos équations.\n\nVoici comment ça marche :\n\n- Chaque ligne du tableau représente une équation du système.\n- Les colonnes représentent les coefficients des variables et le terme constant.\n- La dernière colonne contient les termes constants (les nombres à droite du signe égal dans nos équations).\n\nPar exemple, notre système initial :\n\n$$\n\\begin{cases}\n2&x& +& y& -& &z& =& 8 \\\\\n-3&x& -& y& +& 2&z& =& -11 \\\\\n-2&x& +& y& +& 2&z& =& -3\n\\end{cases}\n$$\n\nsera représenté par le tableau NumPy suivant :\n\n```python\nsysteme = np.array([\n    [2,  1, -1,  8],\n    [-3, -1,  2, -11],\n    [-2,  1,  2, -3]\n], dtype=float)\n```\n\n### Accès aux coefficients\n\nPour accéder aux différents coefficients dans notre tableau NumPy, on utilise l'indexation. Voici comment ça marche :\n\n- `systeme[i, j]` nous donne l'élément à la i-ème ligne et j-ème colonne.\n- Les indices commencent à 0 (comme d'habitude en Python).\n- Pour un système de n équations à n inconnues :\n  - `systeme[i, j]` pour i < n et j < n donne le coefficient de la (j+1)-ème variable dans la (i+1)-ème équation.\n  - `systeme[i, n]` donne le terme constant de la (i+1)-ème équation.\n\nPar exemple :\n\n- `systeme[0, 0]` vaut 2 (coefficient de $x$ dans la première équation)\n- `systeme[1, 2]` vaut 2 (coefficient de $z$ dans la deuxième équation)\n- `systeme[2, 3]` vaut $-3$ (terme constant de la troisième équation).\n\nCette représentation nous permet de manipuler facilement notre système d'équations en utilisant les opérations de NumPy, ce qui rend notre implémentation de la méthode du pivot de Gauss à la fois simple et efficace.\n\nMaintenant que nous avons compris comment représenter et manipuler notre système, passons au code !\n\n::: {#6739fac9 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\ndef echanger_equations(systeme, i, j):\n    systeme[i], systeme[j] = systeme[j].copy(), systeme[i].copy()\n\ndef multiplier_equation(systeme, i, facteur):\n    systeme[i] *= facteur\n\ndef ajouter_multiple_equation(systeme, i, j, facteur):\n    systeme[i] += facteur * systeme[j]\n\ndef pivot_gauss(systeme):\n    n, m = systeme.shape\n    for i in range(min(n, m - 1)):\n        # Trouver le pivot maximal\n        pivot = i + np.argmax(np.abs(systeme[i:, i]))\n        if systeme[pivot, i] == 0:\n            raise ValueError(\"Le système n'a pas de solution unique!\")\n        \n        # Échanger les équations\n        if pivot != i:\n            echanger_equations(systeme, i, pivot)\n        \n        # Éliminer les variables\n        for j in range(i + 1, n):\n            facteur = -systeme[j, i] / systeme[i, i]\n            ajouter_multiple_equation(systeme, j, i, facteur)\n    \n    return systeme\n\n# Exemple d'utilisation\nsysteme = np.array([\n    [2, 1, -1, 8],\n    [-3, -1, 2, -11],\n    [-2, 1, 2, -3]\n], dtype=float)\n\nprint(\"Système initial :\")\nprint(systeme)\n\nresultat = pivot_gauss(systeme)\nprint(\"\\nSystème après pivot de Gauss :\")\nprint(resultat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSystème initial :\n[[  2.   1.  -1.   8.]\n [ -3.  -1.   2. -11.]\n [ -2.   1.   2.  -3.]]\n\nSystème après pivot de Gauss :\n[[ -3.          -1.           2.         -11.        ]\n [  0.           1.66666667   0.66666667   4.33333333]\n [  0.           0.           0.2         -0.2       ]]\n```\n:::\n:::\n\n\nExpliquons un peu ce code :\n\n1. `echanger_equations`, `multiplier_equation`, et `ajouter_multiple_equation` sont nos opérations élémentaires sur les équations. Elles utilisent l'indexation NumPy pour accéder et modifier les coefficients.\n2. `pivot_gauss` est notre fonction principale qui applique la méthode du pivot de Gauss. Elle utilise `systeme.shape` pour obtenir les dimensions de notre tableau.\n3. Dans `pivot_gauss`, on utilise `np.argmax` pour trouver l'indice du coefficient de plus grande valeur absolue, ce qui nous donne notre meilleur pivot pour minimiser les erreurs d'arrondi.\n4. Les opérations d'élimination utilisent l'indexation pour accéder aux coefficients appropriés et les modifier.\n\nEt voilà ! Avec ce code, vous pouvez résoudre des systèmes linéaires plus rapidement qu'il n'en faut pour dire \"Carl Friedrich Gauss\" !\n\nRésolvons par exemple le système de cinq équations à cinq inconnues suivant :\n\n$$\n\\begin{cases}\n2&x& +& &y& -& &z& +& 2&w& -& 3&v& =& 8 \\\\\n-3&x& -& &y& +& 2&z& -& &w& +& 4&v& =& -11 \\\\\n-2&x& +& &y& +& 2&z& +& &w& -& 2&v& =& -3 \\\\\n&x& -& &y& +& & z& -& & w & +& & v& =& 2 \\\\\n4&x& -& 2&y& +& 3&z& -& 2&w& +& & v& =& 3\n\\end{cases}\n$$\n\n::: {#7b802c41 .cell execution_count=2}\n``` {.python .cell-code}\nsysteme = np.array([\n    [2, 1, -1, 2, -3, 8],\n    [-3, -1, 2, -1, 4, -11],\n    [-2, 1, 2, 1, -2, -3],\n    [1, -1, 1, -1, 1, 2],\n    [4, -2, 3, -2, 1, 3]\n], dtype=float)\n\nresultat = pivot_gauss(systeme)\nprint(\"Système après pivot de Gauss :\")\nprint(resultat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSystème après pivot de Gauss :\n[[ 4.         -2.          3.         -2.          1.          3.        ]\n [ 0.         -2.5         4.25       -2.5         4.75       -8.75      ]\n [ 0.          0.          3.5         0.         -1.5        -1.5       ]\n [ 0.          0.          0.          1.          0.68571429 -0.11428571]\n [ 0.          0.          0.          0.         -0.45714286  2.74285714]]\n```\n:::\n:::\n\n\nIl n'y a plus qu'à remonter les équations pour trouver les valeurs de $x$, $y$, $z$, $w$, et $v$.\n\nOn trouve en arrondissant les valeurs : $x=-2$, $y=-17$, $z=-3$, $w=4$, $v=-6$.\n\n## Conclusion\n\nLa méthode du pivot de Gauss, c'est comme avoir un super-pouvoir pour résoudre des systèmes d'équations. Que vous le fassiez à la main ou avec Python, vous avez maintenant les outils pour dompter ces systèmes linéaires rebelles !\n\nAlors, la prochaine fois que quelqu'un vous parle de systèmes d'équations, vous pourrez fièrement dire : \"Pas de panique, j'ai Gauss de mon côté !\" 😎\n\n![Carl Friedrich Gauss](Carl_Friedrich_Gauss_1840_by_Jensen.jpg){width=50%}\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}