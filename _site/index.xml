<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Le bloc-notes de M. LALLEMAND</title>
<link>https://flallemand.fr/blog/index.html</link>
<atom:link href="https://flallemand.fr/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Le blog de M. LALLEMAND, professeur de mathématiques</description>
<generator>quarto-1.4.274</generator>
<lastBuildDate>Wed, 18 Oct 2023 22:00:00 GMT</lastBuildDate>
<item>
  <title>Tribune du collectif Maths &amp; Sciences</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/tribuneMS/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.larecherche.fr/tribune/r%C3%A9forme-du-lyc%C3%A9e-g%C3%A9n%C3%A9ral-petites-failles-ou-grandes-fractures"><img src="https://flallemand.fr/blog/posts/tribuneMS/larecherche.png" class="img-fluid figure-img" style="width:30.0%"></a></p>
</figure>
</div>
<p>Le collectif <a href="https://collectif-maths-sciences.fr/" target="_blank">Maths &amp; Sciences</a> a publié dans le numéro de La Recherche du 17 octobre 2023 une tribune qui analyse de façon très pertinente les conséquences de la réforme du lycée sur l’enseignement des sciences et des mathématiques au lycée.</p>
<p>La tribune est à lire sur le site de La Recherche : <a href="https://www.larecherche.fr/tribune/r%C3%A9forme-du-lyc%C3%A9e-g%C3%A9n%C3%A9ral-petites-failles-ou-grandes-fractures" target="_blank">Tribune</a></p>
<section id="résumé-de-la-tribune" class="level2">
<h2 class="anchored" data-anchor-id="résumé-de-la-tribune">Résumé de la tribune</h2>
<ul>
<li><strong>Réforme du lycée</strong>: La réforme de 2019 a supprimé les mathématiques du tronc commun et a créé des spécialités à choisir parmi 13. Cette réforme pose des problèmes de fond en sciences et entraîne des ruptures et des fractures entre les élèves.</li>
<li><strong>Chute des effectifs en sciences</strong>: Depuis la réforme, le nombre d’élèves qui suivent des spécialités scientifiques, notamment en mathématiques, a diminué de manière significative. Les filles sont particulièrement touchées par cette baisse, ainsi que les élèves d’origine sociale défavorisée.</li>
<li><strong>Inégalités territoriales</strong>: Les spécialités émergentes, comme le numérique et les sciences informatiques, sont peu présentes dans les lycées et peinent à attirer les élèves. Les spécialités principales restent dominantes et créent une fracture entre les profils de formation.</li>
<li><strong>Propositions d’amendements</strong>: Le collectif Maths&amp;Sciences et ses partenaires proposent de rééquilibrer le tronc commun en faveur des sciences et de maintenir trois spécialités en terminale pour préserver la polyvalence des élèves. Ils appellent à une évaluation globale de la réforme du lycée.</li>
</ul>


</section>

 ]]></description>
  <category>Actualités</category>
  <category>Orientation</category>
  <guid>https://flallemand.fr/blog/posts/tribuneMS/index.html</guid>
  <pubDate>Wed, 18 Oct 2023 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/tribuneMS/larecherche.png" medium="image" type="image/png" height="152" width="144"/>
</item>
<item>
  <title>Tuto pyxel (avec POO) : Ajouter un fond</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/pyxel_tuto3_fond/index.html</link>
  <description><![CDATA[ 




<p>Ce tuto fait suite au précédent : <a href="../../posts/pyxel_tuto2_personnage/index.html">Tuto pyxel (avec POO) : Animer un personnage</a>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Objectifs du tutoriel
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Créer un fond constitué de divers éléments ;</li>
<li>Animer le fond pour simuler un déplacement du personnage.</li>
</ul>
</div>
</div>
<section id="préparation" class="level2">
<h2 class="anchored" data-anchor-id="préparation">Préparation</h2>
<p>Nous allons utiliser le code du tuto précédent comme base de travail.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyxel</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> App:</span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-5">        pyxel.init(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tuto 2"</span>, quit_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pyxel.KEY_Q, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on charge le fichier de ressources</span></span>
<span id="cb1-7">        pyxel.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jump_game.pyxres"</span>)</span>
<span id="cb1-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant l'abscisse initiale du personnage</span></span>
<span id="cb1-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant la vitesse du personnage</span></span>
<span id="cb1-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable indiquant si un déplacement est en cours</span></span>
<span id="cb1-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable indiquant la direction du personnage</span></span>
<span id="cb1-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on lance l'application</span></span>
<span id="cb1-17">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span>
<span id="cb1-18">        </span>
<span id="cb1-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_LEFT):</span>
<span id="cb1-21">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-22">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-23">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_RIGHT):</span>
<span id="cb1-25">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, pyxel.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb1-26">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-27">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-28"></span>
<span id="cb1-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on efface l'écran et on remplit la fenêtre de bleu</span></span>
<span id="cb1-31">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on affiche le personnage à l'abscisse x_personnage et à l'ordonnée 128 - 16</span></span>
<span id="cb1-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche:</span>
<span id="cb1-34">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pyxel.frame_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb1-35">                pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb1-36">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb1-37">                pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb1-38">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb1-40">            pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb1-41"></span>
<span id="cb1-42">App()</span></code></pre></div>
</section>
<section id="fond-statique" class="level2">
<h2 class="anchored" data-anchor-id="fond-statique">Fond statique</h2>
<p>Dans un premiers temps, nous allons dessiner un fond statique.</p>
<p>L’examen du fichier de ressources nous permet de déterminer les coordonnées des éléments présents : forêt, nuages et montagne. Dans le code suivant, nous faisons quelques calculs afin que la montagne soit centrée dans la fenêtre de l’application. La forêt, elle, doit parcourir toute la longueur de l’écran. Même chose pour le dégradé du ciel.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyxel</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> App:</span>
<span id="cb2-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-5">        pyxel.init(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tuto 2"</span>, quit_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pyxel.KEY_Q, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on charge le fichier de ressources</span></span>
<span id="cb2-7">        pyxel.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jump_game.pyxres"</span>)</span>
<span id="cb2-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant l'abscisse initiale du personnage</span></span>
<span id="cb2-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant la vitesse du personnage</span></span>
<span id="cb2-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable indiquant si un déplacement est en cours</span></span>
<span id="cb2-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb2-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable indiquant la direction du personnage</span></span>
<span id="cb2-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on lance l'application</span></span>
<span id="cb2-17">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span>
<span id="cb2-18">        </span>
<span id="cb2-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_LEFT):</span>
<span id="cb2-21">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-22">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-23">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb2-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_RIGHT):</span>
<span id="cb2-25">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, pyxel.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb2-26">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-27">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb2-28"></span>
<span id="cb2-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on efface l'écran et on remplit la fenêtre de bleu</span></span>
<span id="cb2-31">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb2-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tracé de la montagne</span></span>
<span id="cb2-33">        pyxel.blt(pyxel.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>)</span>
<span id="cb2-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tracé du ciel dégradé</span></span>
<span id="cb2-35">        pyxel.blt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb2-36">        pyxel.blt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>,pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb2-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tracé de la forêt</span></span>
<span id="cb2-38">        pyxel.blt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb2-39">        pyxel.blt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>,pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb2-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tracé des nuages</span></span>
<span id="cb2-41">        pyxel.blt(pyxel.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb2-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on affiche le personnage à l'abscisse x_personnage et à l'ordonnée 128 - 16</span></span>
<span id="cb2-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche:</span>
<span id="cb2-44">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pyxel.frame_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb2-45">                pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb2-46">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-47">                pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb2-48">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb2-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-50">            pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb2-51"></span>
<span id="cb2-52">App()</span></code></pre></div>
</section>
<section id="animation-des-nuages" class="level2">
<h2 class="anchored" data-anchor-id="animation-des-nuages">Animation des nuages</h2>
<p>Avec le temps qui passe, les nuages se déplacent lentement vers la gauche et d’autres nuages apparaissent sur la droite.</p>
<p>Afin de mieux organiser notre code, il va devenir fastidieux de tout écrire dans les fonctions <code>update</code> et <code>draw</code></p>
<p>Nous allons donc définir une classe <code>Nuage</code> qui possède ses propres méthodes <code>update</code> et <code>draw</code>, comme le montre le code ci-dessous. Quelques explications suivent le code.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyxel</span>
<span id="cb3-2"></span>
<span id="cb3-3">LARGEUR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span></span>
<span id="cb3-4">HAUTEUR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Nuage:</span>
<span id="cb3-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LARGEUR, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HAUTEUR<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>):</span>
<span id="cb3-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb3-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y</span>
<span id="cb3-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.replaced <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-11"></span>
<span id="cb3-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pyxel.frame_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-14">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-15"></span>
<span id="cb3-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-17">        pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb3-18"></span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> App:</span>
<span id="cb3-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-22">        pyxel.init(LARGEUR, HAUTEUR, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tuto 2"</span>, quit_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pyxel.KEY_Q, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb3-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on charge le fichier de ressources</span></span>
<span id="cb3-24">        pyxel.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jump_game.pyxres"</span>)</span>
<span id="cb3-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant l'abscisse initiale du personnage</span></span>
<span id="cb3-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant la vitesse du personnage</span></span>
<span id="cb3-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable indiquant si un déplacement est en cours</span></span>
<span id="cb3-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable indiquant la direction du personnage</span></span>
<span id="cb3-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># liste des nuages visibles</span></span>
<span id="cb3-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nuages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-35">        premier_nuage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Nuage(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyxel.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb3-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nuages.append(premier_nuage)</span>
<span id="cb3-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on lance l'application</span></span>
<span id="cb3-38">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span>
<span id="cb3-39">        </span>
<span id="cb3-40">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_LEFT):</span>
<span id="cb3-42">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-43">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-44">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_RIGHT):</span>
<span id="cb3-46">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, pyxel.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb3-47">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-48">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> nuage <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nuages:</span>
<span id="cb3-50">            nuage.update()</span>
<span id="cb3-51">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> nuage.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> nuage.replaced:</span>
<span id="cb3-52">                nouveau_nuage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Nuage()</span>
<span id="cb3-53">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nuages.append(nouveau_nuage)</span>
<span id="cb3-54">                nuage.replaced <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-55">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> nuage.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>:</span>
<span id="cb3-56">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nuages.remove(nuage)</span>
<span id="cb3-57"></span>
<span id="cb3-58">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-59">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on efface l'écran et on remplit la fenêtre de bleu</span></span>
<span id="cb3-60">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb3-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tracé de la montagne</span></span>
<span id="cb3-62">        pyxel.blt(pyxel.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>)</span>
<span id="cb3-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tracé du ciel dégradé</span></span>
<span id="cb3-64">        pyxel.blt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb3-65">        pyxel.blt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>,pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb3-66">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tracé de la forêt</span></span>
<span id="cb3-67">        pyxel.blt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb3-68">        pyxel.blt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>,pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb3-69">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tracé des nuages</span></span>
<span id="cb3-70">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> nuage <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nuages:</span>
<span id="cb3-71">            nuage.draw()</span>
<span id="cb3-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on affiche le personnage à l'abscisse x_personnage et à l'ordonnée 128 - 16</span></span>
<span id="cb3-73">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche:</span>
<span id="cb3-74">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pyxel.frame_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb3-75">                pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb3-76">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb3-77">                pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb3-78">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-79">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb3-80">            pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb3-81"></span>
<span id="cb3-82">App()</span></code></pre></div>
<ul>
<li>La ligne <code>if pyxel.frame_count % 10 == 0:</code> permet de faire avancer le nuage de 1 pixel vers la gauche trois fois par seconde, puisque notre application a un framerate de 30 fps.</li>
<li>Un mécanisme est mis en place pour commencer à faire apparaître un nouveau nuage lorsque le précédent va bientôt disparaître. Nous définissons pour cela dans notre application une liste de nuages <code>nuages</code> qui contient initialement un seul nuage placé au milieu de la fenêtre.</li>
<li>Dans la méthode <code>update</code> de l’application, chaque nuage de la liste est mis à jour et, dès qu’un nuage a son abscisse inférieure à 10 (et qu’il n’a pas encore été remplacé), un nouveau nuage est créé. L’ancien nuage est alors marqué comme remplacé, afin d’éviter de créer un nouveau nuage à chaque frame : <code>nuage.replaced = True</code>.</li>
<li>Lorsque le nuage a complètement disparu de la fenêtre, il est retiré de la liste : <code>self.nuages.remove(nuage)</code>.</li>
</ul>
</section>
<section id="animation-de-la-forêt" class="level2">
<h2 class="anchored" data-anchor-id="animation-de-la-forêt">Animation de la forêt</h2>
<p>Pour rendre plus réaliste le déplacement du personnage, on peut provoquer un déplacement de la forêt en sens contraire. La montagne et le ciel, eux, peuvent rester fixes, car situés à une grande distance du personnage.</p>
<p>Dans le code ci-dessous, nous mettons en oeuvre cette idée, tout en reformulant l’ensemble du code afin de définir sous forme de de classes tous les éléments, sauf les éléments fixes.</p>


</section>

 ]]></description>
  <category>Python</category>
  <category>NSI</category>
  <category>Programmation</category>
  <category>Pyxel</category>
  <category>Nuit du code</category>
  <guid>https://flallemand.fr/blog/posts/pyxel_tuto3_fond/index.html</guid>
  <pubDate>Tue, 17 Oct 2023 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/pyxel_tuto3_fond/blt_figure.png" medium="image" type="image/png"/>
</item>
<item>
  <title>L’histoire de la Free Software Foundation (FSF)</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/fsf-history/index.html</link>
  <description><![CDATA[ 




<p>Si vous êtes passionné par le logiciel libre et open source, vous avez probablement entendu parler de la Free Software Foundation (FSF). Cette organisation emblématique a joué un rôle central dans la promotion et la défense du logiciel libre depuis sa création en 1985 par Richard Stallman. Dans cet article, je vous propose un résumé de la page officielle de la FSF dédiée à son histoire, que vous pouvez consulter ici : <a href="https://www.fsf.org/history/" target="_blank">Lien vers la page officielle de la FSF sur son histoire</a>.</p>
<p><strong>Vous trouverez aussi sur ce site une traduction de cette page en français, que vous pouvez consulter ici : <a href="https://flallemand.fr/divers/fsf-history/index.html" target="_blank">Lien vers la version traduite de la page d’histoire de la FSF</a>.</strong></p>
<section id="les-débuts-de-la-fsf" class="level3">
<h3 class="anchored" data-anchor-id="les-débuts-de-la-fsf">Les débuts de la FSF</h3>
<p>La page d’histoire de la FSF nous emmène tout d’abord dans les premiers jours de l’organisation. Nous découvrons comment Richard Stallman, un programmeur visionnaire, a lancé la FSF avec pour objectif de promouvoir et de protéger les logiciels libres. Stallman a posé les bases de ce mouvement en créant la licence publique générale GNU (GPL), qui est devenue la pierre angulaire de la philosophie du logiciel libre.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="fsf-history\img\event\rms-bw.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Richard Stallman"><img src="https://flallemand.fr/blog/posts/fsf-history/fsf-history/img/event/rms-bw.jpg" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption">Richard Stallman</figcaption>
</figure>
</div>
</section>
<section id="la-lutte-pour-la-liberté" class="level3">
<h3 class="anchored" data-anchor-id="la-lutte-pour-la-liberté">La lutte pour la liberté</h3>
<p>La page de la FSF met également en lumière les nombreuses batailles juridiques et politiques menées par l’organisation pour défendre les droits des utilisateurs de logiciels libres. Les actions de la FSF ont contribué à préserver la liberté des logiciels en luttant contre les brevets logiciels, les DRM et d’autres menaces potentielles pour la communauté du logiciel libre.</p>
</section>
<section id="lessor-du-mouvement" class="level3">
<h3 class="anchored" data-anchor-id="lessor-du-mouvement">L’essor du mouvement</h3>
<p>Au fil des années, le mouvement du logiciel libre a gagné en popularité et en influence, en grande partie grâce aux efforts inlassables de la FSF. L’article détaille comment l’organisation a collaboré avec d’autres acteurs importants du domaine, notamment la Free Software Community, pour promouvoir la diffusion de logiciels libres et ouvrir la voie à des alternatives gratuites aux logiciels propriétaires.</p>
</section>
<section id="limportance-continue-de-la-fsf" class="level3">
<h3 class="anchored" data-anchor-id="limportance-continue-de-la-fsf">L’importance continue de la FSF</h3>
<p>Enfin, la page officielle de la FSF souligne l’importance continue de l’organisation dans le paysage actuel du logiciel libre. La FSF continue de jouer un rôle crucial dans la défense des droits des utilisateurs et dans la sensibilisation du public aux enjeux du logiciel libre.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="fsf-history\img\event\01100ryf.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Respect your freedom"><img src="https://flallemand.fr/blog/posts/fsf-history/fsf-history/img/event/01100ryf.png" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption">Respect your freedom</figcaption>
</figure>
</div>
<p>Pour une version complète de cette page, entièrement traduite en français, je vous invite à consulter le lien : <a href="https://flallemand.fr/divers/fsf-history/index.html" target="_blank">Lien vers la version traduite de la page d’histoire de la FSF</a>. Les liens vers lesquels la page renvoie, pour en savoir plus, ne sont pas traduits !</p>


</section>

 ]]></description>
  <category>NSI</category>
  <category>Informatique</category>
  <category>Histoire</category>
  <category>Linux</category>
  <guid>https://flallemand.fr/blog/posts/fsf-history/index.html</guid>
  <pubDate>Fri, 22 Sep 2023 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/fsf-history/fsf-history/img/event/membermeeting.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Intel veut révolutionner les microprocesseurs avec un substrat en verre</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/intel_verre/index.html</link>
  <description><![CDATA[ 




<p>Les microprocesseurs sont au cœur de nos ordinateurs, smartphones, tablettes et autres appareils électroniques. Ils sont composés de millions, voire de milliards, de transistors qui réalisent des opérations logiques et arithmétiques à une vitesse vertigineuse. Mais ces transistors sont de plus en plus petits et difficiles à fabriquer, ce qui menace la loi de Moore, qui prédit que la puissance des microprocesseurs double tous les deux ans (<a href="https://pnsi.flallemand.fr/10_vonNeumann/neumann_cours_1.html" target="_blank">voir cours de première NSI</a>).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="cpu-3061923_640.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="CPU"><img src="https://flallemand.fr/blog/posts/intel_verre/cpu-3061923_640.jpg" class="img-fluid figure-img" style="width:50.0%"></a></p>
<figcaption class="figure-caption">CPU</figcaption>
</figure>
</div>
<p>Pour relever ce défi, Intel, le géant américain des semi-conducteurs, a annoncé avoir développé un nouveau substrat en verre pour remplacer le plastique actuellement utilisé. Le substrat est la base sur laquelle sont gravés les circuits des microprocesseurs. Il doit être plat, rigide et résistant à la chaleur et aux contraintes mécaniques.</p>
<p>Le verre présente plusieurs avantages par rapport au plastique. Il est plus stable et supporte des températures plus élevées, ce qui permet de serrer davantage de puces sur un seul substrat sans qu’il se déforme. Il offre aussi une meilleure distribution de l’énergie et une transmission plus rapide des signaux, grâce à l’intégration d’interconnexions optiques qui remplacent le cuivre. Le verre permettrait ainsi de multiplier par dix la densité des interconnexions entre les puces.</p>
<p>Avec ce nouveau substrat en verre, Intel espère pouvoir augmenter considérablement la densité des transistors au sein des microprocesseurs et créer le premier paquet contenant mille milliards de transistors d’ici 2030. Un paquet est un système sur un seul substrat composé de plusieurs puces qui peuvent avoir des fonctions différentes, comme la mémoire, le calcul ou la communication.</p>
<p>Ce projet ambitieux pourrait révolutionner le domaine des microprocesseurs et donner un nouveau souffle à la loi de Moore. Intel prévoit de lancer ses premiers produits commerciaux basés sur ce substrat en verre avant la fin de la décennie. Il faudra toutefois attendre les résultats des tests et des validations pour confirmer les performances et la fiabilité de cette technologie.</p>
<p>La vidéo ci-dessous explique cette innovation (vous pouvez afficher les sous-titres en français) :</p>
<iframe width="840" height="472" src="https://www.youtube.com/embed/_T-mh72VRIY?si=bldJkxFypd7TgN2H" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Source : <a href="https://www.futura-sciences.com/tech/actualites/processeur-intel-transforme-plafond-verre-tremplin-avenir-processeurs-107780" target="_blank">Futura Sciences</a></p>
<p>Image : <a href="https://pixabay.com/fr/users/zathris-7597199/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3061923" target="_blank">Dan Williams</a> de <a href="https://pixabay.com/fr//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3061923" target="_blank">Pixabay</a></p>



 ]]></description>
  <category>NSI</category>
  <category>Actualités</category>
  <guid>https://flallemand.fr/blog/posts/intel_verre/index.html</guid>
  <pubDate>Wed, 20 Sep 2023 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/intel_verre/cpu-3061923_640.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Utiliser pyxelstudio.net pour créer des jeux en python avec pyxel</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/pyxelstudio/index.html</link>
  <description><![CDATA[ 




<p>Dans cet article, je vais vous présenter le site pyxelstudio.net et le module pyxel, qui vous permettent de créer facilement des jeux rétro avec python. Je vais vous montrer comment utiliser le site pyxelstudio.net pour éditer et exécuter du code en ligne, sans avoir besoin d’installer python ou pyxel sur votre ordinateur.</p>
<section id="quest-ce-que-pyxelstudio.net" class="level2">
<h2 class="anchored" data-anchor-id="quest-ce-que-pyxelstudio.net">Qu’est-ce que pyxelstudio.net ?</h2>
<p>Pyxelstudio.net est un site web qui vous permet d’écrire et d’exécuter du code python avec le module pyxel directement dans votre navigateur. C’est très pratique si vous voulez rapidement tester vos idées de jeux sans avoir à installer python ou pyxel sur votre ordinateur. Pour accéder au site, il suffit de taper l’adresse <a href="https://www.pyxelstudio.net/">https://www.pyxelstudio.net/</a> dans la barre d’adresse de votre navigateur. Vous arrivez alors sur la page d’accueil du site, qui vous propose plusieurs options. Je vous conseille de créer un compte (en cliquant sur “register”), car cela vous permettra de retrouver vos projets très facilement quand vous passez d’une machine à une autre. Ainsi, vous pouvez créer un nouveau projet, ouvrir un projet existant, ou encore consulter les exemples de jeux réalisés avec pyxel. Ce site a été développé par <a href="https://twitter.com/laurentabbal">Laurent Abbal</a>, professeur de NSI au lycée français international de Tokyo.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="pyxelstudio.png" class="lightbox" title="Page d’accueil de pyxelstudio.net" data-gallery="quarto-lightbox-gallery-1"><img src="https://flallemand.fr/blog/posts/pyxelstudio/pyxelstudio.png" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption">Page d’accueil de <a href="https://www.pyxelstudio.net">pyxelstudio.net</a></figcaption>
</figure>
</div>
</section>
<section id="comment-créer-un-nouveau-projet" class="level2">
<h2 class="anchored" data-anchor-id="comment-créer-un-nouveau-projet">Comment créer un nouveau projet ?</h2>
<p>Pour créer un nouveau projet, cliquez sur le bouton “Create”. Vous arrivez alors sur l’interface principale du site, qui se compose de deux parties : à gauche, l’éditeur de code et à droite la fenêtre d’exécution.</p>
<ul>
<li>L’éditeur de code vous permet d’écrire votre code python avec pyxel. Il dispose de la coloration syntaxique pour vous faciliter la tâche.</li>
<li>La fenêtre d’exécution vous permet de voir le résultat de votre code, après avoir cliqué sur le bouton jaune situé au-dessus de la zone.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="interface.png" class="lightbox" title="Vue d’ensemble de la page d’édition de www.pyxelstudio.net" data-gallery="quarto-lightbox-gallery-2"><img src="https://flallemand.fr/blog/posts/pyxelstudio/interface.png" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption">Vue d’ensemble de la page d’édition de www.pyxelstudio.net</figcaption>
</figure>
</div>
</section>
<section id="linterface-de-la-zone-dédition" class="level2">
<h2 class="anchored" data-anchor-id="linterface-de-la-zone-dédition">L’interface de la zone d’édition</h2>
<p>Outre l’édition du code et son exécution, différentes actions sont possibles depuis cet écran.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="fig1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://flallemand.fr/blog/posts/pyxelstudio/fig1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
<ol type="1">
<li>Accès au dashboard : liste des projets créés, avec la possibilité de les éditer et de les supprimer.</li>
<li>Définition du nom du projet.</li>
<li>Liste des fichiers (fichiers python, fichiers de ressources, etc.) composant le projet.</li>
<li>Afficher la zone d’édition du code. 5.Éditer le fichier de ressources : par défaut, c’est un fichier nommé res.pyxres, qui permet de définir des graphismes, des sons et de la musique pour le projet.</li>
<li>Accès à l’édition de la description et de la documentation de votre projet.</li>
<li>Déclaration des modules python utilisés par votre projet.</li>
<li>Accès aux paramètres : permet, par exemple, de rendre votre projet public ou privé.</li>
<li>Afficher un résumé des commandes pyxel existantes.</li>
<li>Enregistrer le fichier en cours d’édition.</li>
<li>Générer un lien pour partager le projet.</li>
</ol>
<p>Lorsqu’un programme est en cours d’exécution, on trouve deux boutons au-dessus de la zone d’exécution.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="fig2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://flallemand.fr/blog/posts/pyxelstudio/fig2.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
<ol type="1">
<li>Mettre le jeu en plein écran.</li>
<li>Afficher la console : utile pour l’affichage de certaines variables en phase de débogage.</li>
</ol>
<p>Pour finir ce petit tour de l’interface du site, regardons de plus près l’affichage de la liste des fichiers d’un projet :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="fig3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://flallemand.fr/blog/posts/pyxelstudio/fig3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
<ol type="1">
<li>Ces deux boutons permettent respectivement de créer un nouveau fichier et de téléverser un fichier existant.</li>
<li>Le fichier python de l’application. C’est lui qui contient le code du jeu et le bouton permet de l’éditer.</li>
<li>Le fichier de ressource, créé automatiquement à la création d’un projet. Initialement vide. Le bouton permet de l’éditer.</li>
<li>Ces boutons permettent de télécharger les fichiers python et pyxres.</li>
</ol>
</section>
<section id="démonstration" class="level2">
<h2 class="anchored" data-anchor-id="démonstration">Démonstration</h2>
<p>Pour vous montrer comment fonctionne le site <a href="https://www.pyxelstudio.net">pyxelstudio.net</a>, écrivons un exemple simple de code pyxel, qui affiche un message “Hello Pyxel!” à l’écran. Ce code est tiré du fichier 01_hello_pyxel.py, qui fait partie des exemples fournis avec le module pyxel. Voici le code :</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyxel</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> App:</span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialisation de l'écran avec une taille de 160 x 120 pixels</span></span>
<span id="cb1-6">        pyxel.init(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>)</span>
<span id="cb1-7">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span>
<span id="cb1-8">        </span>
<span id="cb1-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># définition de la fonction update, qui est appelée à chaque frame</span></span>
<span id="cb1-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb1-12"></span>
<span id="cb1-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># définition de la fonction draw, qui est appelée à chaque frame après la fonction update</span></span>
<span id="cb1-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on efface l'écran avec la couleur 0 (noir)</span></span>
<span id="cb1-16">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on affiche le texte "Hello Pyxel!" à la position (55, 41) avec la couleur 7 (blanc)</span></span>
<span id="cb1-18">        pyxel.text(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello Pyxel!"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb1-19">        </span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on exécute le programme avec les fonctions update et draw</span></span>
<span id="cb1-21">App()</span></code></pre></div>
<p>Nous allons copier ce code dans l’éditeur de code du site pyxelstudio.net, puis cliquer sur le bouton “Run” pour l’exécuter. Nous voyons alors apparaître le message “Hello Pyxel!” à l’écran, comme prévu. Voilà, nous venons de réaliser notre première application avec pyxel ! C’était facile, non ?</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="fig4.png" class="lightbox" title="Copie d’écran de la sortie pyxel du code d’exemple" data-gallery="quarto-lightbox-gallery-6"><img src="https://flallemand.fr/blog/posts/pyxelstudio/fig4.png" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption">Copie d’écran de la sortie pyxel du code d’exemple</figcaption>
</figure>
</div>
</section>
<section id="quelles-sont-les-autres-fonctionnalités-du-site" class="level2">
<h2 class="anchored" data-anchor-id="quelles-sont-les-autres-fonctionnalités-du-site">Quelles sont les autres fonctionnalités du site ?</h2>
<p>Le site pyxelstudio.net vous offre d’autres possibilités intéressantes, comme le partage de code (voir ci-dessus), la sauvegarde de projets, la visualisation des exemples, etc.</p>
<p>Si vous voulez partager votre code avec d’autres personnes, vous pouvez cliquer sur le bouton de partage en haut à droite de la zone d’édition. Vous obtenez alors un lien que vous pouvez copier et envoyer à qui vous voulez. La personne qui reçoit le lien peut ainsi ouvrir votre code dans son navigateur et l’exécuter sans avoir à le télécharger. C’est très pratique pour montrer vos créations ou demander de l’aide. Je donnerai dans des articles suivants des conseils et des tutoriels pour la création de jeux avec pyxel dans pyxelstudio.</p>


</section>

 ]]></description>
  <category>Python</category>
  <category>NSI</category>
  <category>Programmation</category>
  <category>Pyxel</category>
  <category>Nuit du code</category>
  <guid>https://flallemand.fr/blog/posts/pyxelstudio/index.html</guid>
  <pubDate>Thu, 31 Aug 2023 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/pyxelstudio/pyxelstudio.png" medium="image" type="image/png" height="83" width="144"/>
</item>
<item>
  <title>Tuto pyxel (avec POO) : Animer un personnage</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/index.html</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Objectifs du tutoriel
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Créer une application Pyxel avec fond coloré uni ;</li>
<li>Créer un personnage qui se déplace avec les touches du clavier ;</li>
</ul>
</div>
</div>
<section id="géométrie-générale-de-la-fenêtre" class="level2">
<h2 class="anchored" data-anchor-id="géométrie-générale-de-la-fenêtre">Géométrie générale de la fenêtre</h2>
<p>La fenêtre de jeu est un rectangle de 256 pixels de large sur 128 pixels de haut. L’origine du repère est située en haut à gauche de la fenêtre. Les coordonnées des points sont donc comprises entre 0 et 255 pour les abscisses et entre 0 et 127 pour les ordonnées.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./repere.png" class="lightbox" title="Géométrie de la fenêtre" data-gallery="quarto-lightbox-gallery-1"><img src="https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/repere.png" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption">Géométrie de la fenêtre</figcaption>
</figure>
</div>
</section>
<section id="le-fichier-de-ressource-pyxres" class="level2">
<h2 class="anchored" data-anchor-id="le-fichier-de-ressource-pyxres">Le fichier de ressource pyxres</h2>
<p>Pour ce tuto, nous utiliserons le fichier de ressource <code>jump_games.pyxres</code> issu des exemples de Pyxel.</p>
<p>Pour ouvrir, modifier ou consulter le contenu d’un tel fichier, il faut utiliser l’éditeur de ressource de Pyxel. Pour cela, on entre <code>pyxel edit jump_games.pyxres</code> dans un terminal, dans le dossier où se trouve le fichier.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./fenetre_pyxres.png" class="lightbox" title="Editeur de ressource" data-gallery="quarto-lightbox-gallery-2"><img src="https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/fenetre_pyxres.png" class="img-fluid figure-img" style="width:50.0%"></a></p>
<figcaption class="figure-caption">Editeur de ressource</figcaption>
</figure>
</div>
<p>On peut voir et faire défiler l’ensemble des images du fichier de ressources dans la partie droite de l’éditeur. Dans la partie gauche, on zoome sur un carré de 16 pixels de côté, avec possibilité de modifier l’image à la souris.</p>
<p><strong>Astuce utile</strong> : quand on déplace la souris sur l’image, les coordonnées du pointeur sont affichées en haut à droite de la fenêtre. Cela permet de repérer facilement les coordonnées des points.</p>
<p>Sous l’image se trouve la palette de couleur. Nous disposons de 16 couleurs, numérotées de 0 à 15.</p>
</section>
<section id="affichage-du-personnage" class="level2">
<h2 class="anchored" data-anchor-id="affichage-du-personnage">Affichage du personnage</h2>
<p>Nous constatons que le dessin du personnage occupe le carré de coordonnées (0, 0) à (15, 15). Nous allons donc afficher le personnage en bas à gauche de la fenêtre, avec la commande <code>pyxel.blt(x, y, img, u, v, w, h, [colkey])</code> :</p>
<ul>
<li><code>x</code> et <code>y</code> sont les coordonnées du point en haut à gauche de l’image <strong>dans la fenêtre de l’application</strong> ;</li>
<li><code>img</code> est le numéro de l’image dans le fichier de ressource (ici, il n’y en a qu’une seule, numéro 0) ;</li>
<li><code>u</code> et <code>v</code> sont les coordonnées du point en haut à gauche de l’image <strong>dans le fichier de ressource</strong> ;</li>
<li><code>w</code> et <code>h</code> sont la largeur et la hauteur de l’image dans le fichier de ressource.</li>
<li><code>colkey</code> est le numéro de la couleur que l’on souhaite rendre transparente. Si on ne souhaite pas rendre de couleur transparente, on peut ne pas renseigner ce paramètre.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./blt_figure.png" class="lightbox" title="Paramètres de blt" data-gallery="quarto-lightbox-gallery-3"><img src="https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/blt_figure.png" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption">Paramètres de <code>blt</code></figcaption>
</figure>
</div>
<p>Voici le code obtenu :</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyxel</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> App:</span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-5">        pyxel.init(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tuto 2"</span>, quit_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pyxel.KEY_Q, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on charge le fichier de ressources</span></span>
<span id="cb1-7">        pyxel.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jump_game.pyxres"</span>)</span>
<span id="cb1-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant l'abscisse initiale du personnage</span></span>
<span id="cb1-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on lance l'application</span></span>
<span id="cb1-11">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span>
<span id="cb1-12">        </span>
<span id="cb1-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb1-15"></span>
<span id="cb1-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on efface l'écran et on remplit la fenêtre de bleu</span></span>
<span id="cb1-18">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on affiche le personnage à l'abscisse x_personnage et à l'ordonnée 255 - 16</span></span>
<span id="cb1-20">        pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb1-21"></span>
<span id="cb1-22">App()</span></code></pre></div>
<p>On obtient :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./fenetre_personnage.png" class="lightbox" title="Personnage en bas à gauche" data-gallery="quarto-lightbox-gallery-4"><img src="https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/fenetre_personnage.png" class="img-fluid figure-img" style="width:50.0%"></a></p>
<figcaption class="figure-caption">Personnage en bas à gauche</figcaption>
</figure>
</div>
</section>
<section id="déplacement-du-personnage" class="level2">
<h2 class="anchored" data-anchor-id="déplacement-du-personnage">Déplacement du personnage</h2>
<p>Nous allons maintenant faire bouger le personnage avec les touches du clavier. Pour cela, nous allons utiliser la méthode <code>update</code> de la classe <code>App</code>. Cette méthode est appelée automatiquement par Pyxel à chaque image. Nous allons donc modifier la valeur de <code>self.x_personnage</code> en fonction des touches du clavier qui sont pressées.</p>
<p>Cependant, l’abscisse du personnage doit toujours rester comprise entre 0 et 255 pour qu’il ne disparaissent pas de l’écran. Nous allons donc utiliser la fonction <code>min</code> pour que <code>self.x_personnage</code> ne puisse pas être inférieur à 0 et la fonction <code>max</code> pour qu’il ne puisse pas être supérieur à 255.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyxel</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> App:</span>
<span id="cb2-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-5">        pyxel.init(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tuto 2"</span>, quit_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pyxel.KEY_Q, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on charge le fichier de ressources</span></span>
<span id="cb2-7">        pyxel.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jump_game.pyxres"</span>)</span>
<span id="cb2-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant l'abscisse initiale du personnage</span></span>
<span id="cb2-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant la vitesse du personnage</span></span>
<span id="cb2-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on lance l'application</span></span>
<span id="cb2-13">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span>
<span id="cb2-14">        </span>
<span id="cb2-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_LEFT):</span>
<span id="cb2-17">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_RIGHT):</span>
<span id="cb2-19">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, pyxel.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb2-20"></span>
<span id="cb2-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on efface l'écran et on remplit la fenêtre de bleu</span></span>
<span id="cb2-23">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb2-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on affiche le personnage à l'abscisse x_personnage et à l'ordonnée 128 - 16</span></span>
<span id="cb2-25">        pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb2-26"></span>
<span id="cb2-27">App()</span></code></pre></div>
<p><strong>Remarque</strong> : nous avons également définit un attribut <code>vitesse</code> qui permet de modifier la vitesse de déplacement du personnage : il s’agit du nombre de pixels à ajouter, o à retrancher, à chaque fois que l’on appuie sur une touche fléchée.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./tuto2-1.gif" class="lightbox" title="Personnage qui se déplace" data-gallery="quarto-lightbox-gallery-5"><img src="https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/tuto2-1.gif" class="img-fluid figure-img" style="width:50.0%"></a></p>
<figcaption class="figure-caption">Personnage qui se déplace</figcaption>
</figure>
</div>
</section>
<section id="animation-du-déplacement" class="level2">
<h2 class="anchored" data-anchor-id="animation-du-déplacement">Animation du déplacement</h2>
<p>Pour donner une impression d’animation lors du déplacement du personnage, on peut alterner l’affichage de deux images du personnage. Le fichier ressources contient en effet une image du personnage avec les jambes positionnées différemment, comme on peut le voir ci-dessus. On peut donc utiliser la fonction <code>pyxel.frame_count</code> pour alterner l’affichage des deux images à chaque image. Cette fonction renvoie le nombre d’images affichées depuis le début de l’application. Dans le code ci-dessous, on a de plus défini une variable booléenne <code>self.personnage_marche</code> qui vaut <code>True</code> si le personnage est en train de marcher et <code>False</code> sinon (ce qui permet dans ca cas d’arrêter l’animation).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./fenetre_pyxres_2.png" class="lightbox" title="Animation du personnage" data-gallery="quarto-lightbox-gallery-6"><img src="https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/fenetre_pyxres_2.png" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption">Animation du personnage</figcaption>
</figure>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyxel</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> App:</span>
<span id="cb3-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-5">        pyxel.init(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tuto 2"</span>, quit_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pyxel.KEY_Q, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb3-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on charge le fichier de ressources</span></span>
<span id="cb3-7">        pyxel.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jump_game.pyxres"</span>)</span>
<span id="cb3-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant l'abscisse initiale du personnage</span></span>
<span id="cb3-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant la vitesse du personnage</span></span>
<span id="cb3-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable indiquant si un déplacement est en cours</span></span>
<span id="cb3-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on lance l'application</span></span>
<span id="cb3-15">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span>
<span id="cb3-16">        </span>
<span id="cb3-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_LEFT):</span>
<span id="cb3-19">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-20">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_RIGHT):</span>
<span id="cb3-22">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, pyxel.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb3-23">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-24"></span>
<span id="cb3-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on efface l'écran et on remplit la fenêtre de bleu</span></span>
<span id="cb3-27">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb3-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on affiche le personnage à l'abscisse x_personnage et à l'ordonnée 128 - 16</span></span>
<span id="cb3-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche:</span>
<span id="cb3-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pyxel.frame_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb3-31">                pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb3-32">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb3-33">                pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb3-34">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb3-36">            pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb3-37"></span>
<span id="cb3-38">App()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./tuto2-3.gif" class="lightbox" title="Personnage qui se déplace" data-gallery="quarto-lightbox-gallery-7"><img src="https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/tuto2-3.gif" class="img-fluid figure-img" style="width:50.0%"></a></p>
<figcaption class="figure-caption">Personnage qui se déplace</figcaption>
</figure>
</div>
<p>Une dernière amélioration serait souhaitable : lorsque le personnage se déplace vers la gauche, il semble reculer. On peut modifier le code de telle façon qu’il se retourne vers la gauche et regarde toujours dans la direction où il se déplace. Pour cela, il suffit de modifier le paramètre <code>w</code> de la fonction <code>pyxel.blt</code> en lui donnant la valeur <code>-16</code> lorsque le personnage se déplace vers la gauche.</p>
<p>On définit pour cela encore un nouvel attribut “direction” qui vaut 1 lorsque le personnage se déplace vers la droite et -1 lorsqu’il se déplace vers la gauche. On multiplie donc <code>self.direction</code> par <code>16</code> pour obtenir la valeur de <code>w</code> à donner à la fonction <code>pyxel.blt</code>.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyxel</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> App:</span>
<span id="cb4-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-5">        pyxel.init(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tuto 2"</span>, quit_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pyxel.KEY_Q, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb4-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on charge le fichier de ressources</span></span>
<span id="cb4-7">        pyxel.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jump_game.pyxres"</span>)</span>
<span id="cb4-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant l'abscisse initiale du personnage</span></span>
<span id="cb4-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant la vitesse du personnage</span></span>
<span id="cb4-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb4-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable indiquant si un déplacement est en cours</span></span>
<span id="cb4-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb4-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable indiquant la direction du personnage</span></span>
<span id="cb4-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on lance l'application</span></span>
<span id="cb4-17">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span>
<span id="cb4-18">        </span>
<span id="cb4-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_LEFT):</span>
<span id="cb4-21">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-22">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-23">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb4-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_RIGHT):</span>
<span id="cb4-25">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb4-26">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-27">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb4-28"></span>
<span id="cb4-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on efface l'écran et on remplit la fenêtre de bleu</span></span>
<span id="cb4-31">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb4-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on affiche le personnage à l'abscisse x_personnage et à l'ordonnée 255 - 16</span></span>
<span id="cb4-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche:</span>
<span id="cb4-34">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pyxel.frame_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb4-35">                pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">239</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb4-36">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb4-37">                pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">239</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb4-38">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb4-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb4-40">            pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">239</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb4-41"></span>
<span id="cb4-42">App()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./tuto2-4.gif" class="lightbox" title="Personnage qui se déplace" data-gallery="quarto-lightbox-gallery-8"><img src="https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/tuto2-4.gif" class="img-fluid figure-img" style="width:50.0%"></a></p>
<figcaption class="figure-caption">Personnage qui se déplace</figcaption>
</figure>
</div>


</section>

 ]]></description>
  <category>Python</category>
  <category>NSI</category>
  <category>Programmation</category>
  <category>Pyxel</category>
  <category>Nuit du code</category>
  <guid>https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/index.html</guid>
  <pubDate>Sun, 18 Jun 2023 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/blt_figure.png" medium="image" type="image/png" height="59" width="144"/>
</item>
<item>
  <title>Tuto pyxel : code de base</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/pyxel_tuto1_base/index.html</link>
  <description><![CDATA[ 




<p>La structure générale d’une application Pyxel sera toujours la même.</p>
<p>On commence par importer la bibliothèque Pyxel, puis on crée <strong>une classe</strong> <code>App</code> qui contient les méthodes <code>__init__</code>, <code>update</code> et <code>draw</code>. Enfin, il faut instancier la classe et lancer l’application avec la méthode <code>run</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyxel</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> App:</span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-5">        pyxel.init(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exemple de base"</span>, quit_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pyxel.KEY_Q, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-6">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span>
<span id="cb1-7"></span>
<span id="cb1-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb1-10"></span>
<span id="cb1-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb1-13"></span>
<span id="cb1-14">App()</span></code></pre></div>
<ul>
<li><code>pyxel.init(256, 256, title="Exemple de base", quit_key=pyxel.KEY_Q, fps=30)</code> : on initialise la fenêtre de l’application avec une taille de 256x256 pixels et on définit le titre de la fenêtre. On définit aussi la touche qui permettra de quitter l’application (ici la touche <code>Q</code>) et le nombre d’images par seconde (<strong>f</strong>rames <strong>p</strong>er <strong>s</strong>econd) (30).</li>
<li><code>pyxel.run(self.update, self.draw)</code> : on lance l’application en appelant les méthodes <code>update</code> et <code>draw</code> de la classe <code>App</code>.</li>
<li><code>def update(self):</code> : cette méthode est appelée à chaque image (donc ici 30 fois par seconde). C’est ici qu’on mettra à jour les données de l’application.</li>
<li><code>def draw(self):</code> : cette méthode est appelée à chaque image (donc ici 30 fois par seconde). C’est ici qu’on dessinera les éléments de l’application.</li>
</ul>
<p>Voici la fenêtre obtenue avec le code ci-dessus :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="fenetre_vide.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="fenêtre vide"><img src="https://flallemand.fr/blog/posts/pyxel_tuto1_base/fenetre_vide.png" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption">fenêtre vide</figcaption>
</figure>
</div>
<p><strong>Remarque</strong> : certains calculs de coordonnées des objets de l’applications devront être faits en fonction des dimensions de la fenêtre. Pour cela, on peut utiliser les variables <code>pyxel.width</code> et <code>pyxel.height</code> qui contiennent respectivement la largeur et la hauteur de la fenêtre.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Utilisation de Pyxelstudio
</div>
</div>
<div class="callout-body-container callout-body">
<p>Si vous programmez dans pyxelstudio, les paramètres <code>title</code> et <code>quit_key</code> de la méthode <code>pyxel.init</code> ne sont pas pris en compte.</p>
</div>
</div>



 ]]></description>
  <category>Python</category>
  <category>NSI</category>
  <category>Programmation</category>
  <category>Pyxel</category>
  <category>Nuit du code</category>
  <guid>https://flallemand.fr/blog/posts/pyxel_tuto1_base/index.html</guid>
  <pubDate>Sat, 17 Jun 2023 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/pyxel_tuto1_base/pyxel.png" medium="image" type="image/png" height="61" width="144"/>
</item>
<item>
  <title>Python match</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/python_match/index.html</link>
  <description><![CDATA[ 




<p>La version 3.10 de python est sortie le 4 octobre 2021 et apporte parmi d’autres améliorations, une nouvelle structure conditionnelle : la structure <code>match ... case</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="python310.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://flallemand.fr/blog/posts/python_match/python310.png" class="img-fluid figure-img" style="width:50.0%"></a></p>
</figure>
</div>
<section id="un-cas-simple" class="level2">
<h2 class="anchored" data-anchor-id="un-cas-simple">Un cas simple</h2>
<p>Une instruction de ce type existe déjà dans d’autres langages de programmation comme le JavaScript ou le C. Elle permet de tester une valeur et d’exécuter un bloc de code en fonction de la valeur testée. Dans ces deux langages, l’instruction s’appelle <code>switch ... case</code>. En python, elle s’appelle <code>match ... case</code>.</p>
<p>Voici un exemple d’utilisation de l’instruction <code>switch ... case</code> en JavaScript :</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Langage JavaScript</strong></pre>
</div>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">switch</span> (x) {</span>
<span id="cb1-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 1"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 2"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 3"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 4"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x n'est pas égal à 1, 2, 3 ou 4"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-18">}</span></code></pre></div>
</div>
<p>Et maintenant de C :</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Langage C</strong></pre>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode C code-with-copy"><code class="sourceCode c"><span id="cb2-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">switch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-5">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 1"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-8">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 2"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-11">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-14">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 4"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-17">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x n'est pas égal à 1, 2, 3 ou 4"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<p>C’est la même chose ! On retrouve la même structure dans les deux langages. En python, c’est la même chose :</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">match</span> x:</span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb3-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 1"</span>)</span>
<span id="cb3-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb3-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 2"</span>)</span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb3-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 3"</span>)</span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:</span>
<span id="cb3-12">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 4"</span>)</span>
<span id="cb3-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> _:</span>
<span id="cb3-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x n'est pas égal à 1, 2, 3 ou 4"</span>)</span></code></pre></div>
</div>
<p>On peut voir que l’instruction <code>match ... case</code> est très proche de l’instruction <code>if ... elif ... else</code> en python. La différence est que l’instruction <code>match ... case</code> permet de tester plusieurs valeurs d’une variable en une seule instruction. C’est très pratique pour vérifier les valeurs d’une variable.</p>
<p>Par rapport aux autres langages mentionnés, on remarquera qu’il n’est pas nécessaire en python d’utiliser l’instruction <code>break</code>, c’est comme d’habitude l’indentation qui délimite les blocs de code.</p>
<p>Par ailleurs, pas d’instruction <code>default</code> en python, on utilise l’instruction <code>case _</code> pour gérer le cas par défaut.</p>
</section>
<section id="un-cas-plus-complexe" class="level2">
<h2 class="anchored" data-anchor-id="un-cas-plus-complexe">Un cas plus complexe</h2>
<p>L’instruction <code>match ... case</code> permet de faire des choses beaucoup plus complexes, on peut par exemple ajouter des conditions à chaque cas (source : <span class="citation" data-cites="linuxmag249">Sumner (2021)</span>) :</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb4-2">cible <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.randint (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4">nbEssai <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-5">gameOver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> gameOver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>:</span>
<span id="cb4-8">   <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span> ( <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Vous avez essayé </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nbEssai<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> fois"</span>)</span>
<span id="cb4-9">   proposition <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Votre essai : "</span>))</span>
<span id="cb4-10">   <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">match</span> proposition:</span>
<span id="cb4-11">      case ( i ) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>:</span>
<span id="cb4-12">         <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Le nombre doit être compris entre 0 et 100 "</span>)</span>
<span id="cb4-13">      case ( i ) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> cible:</span>
<span id="cb4-14">         <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trop petit !"</span>)</span>
<span id="cb4-15">         nbEssai <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-16">      case ( i ) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> cible:</span>
<span id="cb4-17">         <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trop grand!"</span>)</span>
<span id="cb4-18">         nbEssai <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-19">      case ( i ) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> cible:</span>
<span id="cb4-20">         <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gagné !"</span>)</span>
<span id="cb4-21">         gameOver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
</div>
<p>Dans ce jeu de devinette, la variable <code>proposition</code> est remplacées dans les conditions <code>case</code> par la variable <code>i</code>. C’est une variable temporaire qui prend la valeur de <code>proposition</code> pour chaque cas. On peut donc utiliser <code>i</code> dans les conditions <code>if</code> pour tester la valeur de <code>proposition</code>.</p>
<p>Un dernier exemple pour terminer (source : <span class="citation" data-cites="pythonpep636">Moisset (2020)</span>):</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">reponse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Entrez votre prénom et votre nom : "</span>)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">match</span> reponse.split():</span>
<span id="cb5-4">    case [prenom, nom]:</span>
<span id="cb5-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Bonjour </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prenom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> !"</span>)</span>
<span id="cb5-6">    case [mot_unique]:</span>
<span id="cb5-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Bonjour </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mot_unique<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ! Il me manque votre nom complet."</span>)</span>
<span id="cb5-8">    case [prenom, nom, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>_]:</span>
<span id="cb5-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Bonjour </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prenom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ! Vous m'avez donné trop d'informations."</span>)</span></code></pre></div>
</div>
<p>Dans cet exemple, on utilise la méthode <code>split</code> pour découper la chaîne de caractères <code>reponse</code> en une liste de mots. On utilise ensuite cette liste dans les conditions <code>case</code> pour tester le nombre de mots dans la chaîne de caractères. Le symbole <code>*_</code> est utilisé pour représenter un nombre quelconque de mots.</p>
<p>Voici par exemple le résultat de l’exécution de ce programme dans la console python :</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Console python</strong></pre>
</div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> Entrez votre prénom et votre nom : Jean Dupont</span>
<span id="cb6-2">Bonjour Jean Dupont <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span></span>
<span id="cb6-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> Entrez votre prénom et votre nom : Jean</span>
<span id="cb6-4">Bonjour Jean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> Il me manque votre nom complet.</span>
<span id="cb6-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> Entrez votre prénom et votre nom : Jean Dupont et je suis un génie</span>
<span id="cb6-6">Bonjour Jean Dupont <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> Vous m<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avez donné trop d'</span>informations.</span></code></pre></div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>L’instruction <code>match ... case</code> est une instruction très puissante qui permet de simplifier le code et de le rendre plus lisible. Elle permet de tester plusieurs valeurs d’une variable en une seule instruction, mais il est aussi possible de tester des conditions plus complexes, comme le type de variable ou la longueur d’une liste, en ajoutant des conditions.</p>
<p>Pour un aperçu complet de toutes les possibilités de l’instruction <code>match ... case</code>, je vous invite à consulter la documentation officielle : <a href="https://docs.python.org/fr/3/tutorial/controlflow.html?highlight=match#match-statements">https://docs.python.org/fr/3/tutorial/controlflow.html?highlight=match#match-statements</a> et les références ci-dessous.</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Les références</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-pythonpep636" class="csl-entry">
Moisset, Daniel F. 2020. <span>«&nbsp;Structural Pattern Matching: Tutorial&nbsp;»</span>. <em>Python Enhancement Proposals</em>, nᵒ 636. <a href="https://peps.python.org/pep-0636/">https://peps.python.org/pep-0636/</a>.
</div>
<div id="ref-linuxmag249" class="csl-entry">
Sumner, Scott. 2021. <span>«&nbsp;The new Python match&nbsp;»</span>. <em>Linux Magazine</em>, nᵒ 249. <a href="https://www.linux-magazine.com/Issues/2021/249/Python-match/(tagID)/32">https://www.linux-magazine.com/Issues/2021/249/Python-match/(tagID)/32</a>.
</div>
</div></section></div> ]]></description>
  <category>Python</category>
  <category>NSI</category>
  <category>Programmation</category>
  <guid>https://flallemand.fr/blog/posts/python_match/index.html</guid>
  <pubDate>Sun, 29 Jan 2023 23:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/python_match/python_laptop.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Interview exclusive du ChatGPT de OpenAI (partie 1)</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/interview_gpt_1/index.html</link>
  <description><![CDATA[ 




<p>
<em>En exclusivité, j’ai pu rencontrer la célèbre intelligence artificielle ChatGPT développée par la société OpenAI et elle a bien voulu répondre à mes questions. Voici la transcription de notre conversation.</em>
</p>
<p>
<em>Dans cette première partie de l’interview, nous abordons des généralités et quelques questions éthiques. Dans la deuxième partie (<a href="https://www.flallemand.fr/wp/2022/interview-exclusive-du-chatgpt-de-openai-partie-2/">article suivant</a>), nous aborderons les aspects techniques et informatiques.</em>
</p>
<p>
<strong>Bonjour ChatGPT</strong>
</p>
<p>
Bonjour ! Comment puis-je vous aider ?
</p>
<p>
J<strong>e voudrais te poser quelques questions à la manière d’une interview.</strong>
</p>
<p>
Bien sûr, je ferai de mon mieux pour répondre à vos questions. N’hésitez pas à me poser toutes les questions que vous avez en tête. Je suis là pour vous aider.
</p>
<p>
<strong>Tout d’abord, pourrais-tu te définir ?</strong>
</p>
<p>
Je suis Assistant, un modèle de langage entraîné par OpenAI. Mon but est d’aider les gens en répondant à leurs questions et en leur fournissant des informations utiles. Je suis un programme informatique, et je ne suis pas capable de penser ou d’agir indépendamment. Je suis conçu pour être utilisé par les gens pour obtenir de l’aide dans diverses situations.
</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="DALL·E-2022-12-08-21.42.10-an-oil-pastel-drawing-of-a-humanoid-robot-in-a-desertic-landscape-650x650.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="An oil pastel drawing of a humanoid robot in a desert landscape, par Dall-E 2"><img src="https://flallemand.fr/blog/posts/interview_gpt_1/DALL·E-2022-12-08-21.42.10-an-oil-pastel-drawing-of-a-humanoid-robot-in-a-desertic-landscape-650x650.png" class="img-fluid figure-img" style="width:50.0%"></a></p>
<figcaption class="figure-caption">An oil pastel drawing of a humanoid robot in a desert landscape, par Dall-E 2</figcaption>
</figure>
</div>
<!-- wp:html -->
<div class="wp-block-jetpack-markdown">
<p>
<strong>Présente moi la société OpenAI !</strong>
</p>
<p>
OpenAI est une société de recherche en intelligence artificielle (IA) fondée en 2015 par des entrepreneurs et investisseurs renommés, dont Elon Musk et Sam Altman. La mission d’OpenAI est de développer et promouvoir des technologies d’IA avancées de manière responsable, afin d’aider les humains à résoudre des problèmes complexes et à améliorer leur vie. OpenAI s’efforce de créer des technologies d’IA avancées qui peuvent être utilisées pour résoudre des problèmes dans de nombreux domaines, tels que la santé, la finance, la science et l’ingénierie. La société a connu un succès significatif dans ses recherches en IA et a publié plusieurs travaux importants dans le domaine.
</p>
<p>
<strong>Comment fonctionnes tu ?</strong>
</p>
<p>
Je suis un modèle de langage entraîné par OpenAI pour répondre aux questions des utilisateurs de manière convaincante et informative. Je suis capable de comprendre du texte et de générer des réponses en utilisant des techniques avancées d’apprentissage automatique. Je suis constamment entraîné sur des données massives pour améliorer ma capacité à comprendre et à répondre aux questions des utilisateurs de manière précise et utile. Bien que je sois une IA, je suis conçu pour être utilisé comme un assistant virtuel pour aider les gens dans leur vie quotidienne.
</p>
<p>
<strong>Reprenons point par point. Qu’est-ce qu’un modèle de langage ?</strong>
</p>
<p>
Un modèle de langage est un système informatique conçu pour comprendre et générer du texte dans une langue naturelle, comme le français ou l’anglais. Les modèles de langage sont souvent utilisés dans les domaines de l’IA et de la linguistique informatique pour analyser et traiter le texte dans divers contextes, tels que la reconnaissance vocale, la traduction automatique et la génération de réponses naturelles. Ils peuvent également être utilisés dans d’autres domaines, tels que la recherche sur les médias sociaux et la détection de sentiments dans les commentaires en ligne. En général, les modèles de langage sont construits en utilisant des techniques avancées d’apprentissage automatique pour permettre à l’ordinateur de comprendre le sens et la structure du texte.
</p>
<p>
<strong>Tu as cité plusieurs fois l’apprentissage automatique. De quoi s’agit-il ?</strong>
</p>
<p>
L’apprentissage automatique est un domaine de l’intelligence artificielle qui se concentre sur la création de systèmes informatiques capables d’apprendre de nouvelles choses sans être explicitement programmés. Ces systèmes utilisent des algorithmes d’apprentissage automatique pour traiter des données massives et tirer des conclusions à partir de celles-ci. L’apprentissage automatique est souvent utilisé pour résoudre des problèmes complexes qui seraient difficiles ou impossibles à résoudre manuellement, comme la reconnaissance de la parole ou la prédiction du comportement des utilisateurs en ligne. Les algorithmes d’apprentissage automatique peuvent être entraînés sur de grandes quantités de données pour améliorer leur précision et leur capacité à généraliser à de nouvelles situations.
</p>
<p>
<strong>Il est difficile de comprendre la différence entre l’accès à des connaissances dans une base par exemple, et un assistant virtuel comme toi. Peux tu expliquer la différence ?</strong>
</p>
<p>
La différence principale entre un accès à des connaissances dans une base de données et un assistant virtuel comme moi réside dans la manière dont les informations sont fournies. Une base de données est un système informatique qui permet de stocker et d’accéder à des données structurées, généralement sous forme de tableaux ou de fichiers. Les utilisateurs peuvent rechercher des informations dans une base de données en utilisant des requêtes précises, mais ils doivent connaître les termes exacts à rechercher et comment structurer leur requête pour obtenir les résultats souhaités. En revanche, un assistant virtuel comme moi est conçu pour fournir des réponses directes aux questions des utilisateurs en utilisant une compréhension avancée du langage naturel. Je suis capable de comprendre les intentions de l’utilisateur et de fournir des réponses adaptées à la situation, sans qu’il soit nécessaire de connaître les termes exacts à rechercher ou la structure de la requête.
</p>
<p>
<strong>Oui, mais disposes tu d’un corpus de connaissances dans lequel tu puise les éléments de tes réponses ?</strong>
</p>
<p>
En tant que modèle de langage entraîné par OpenAI, j’ai été formé sur un grand corpus de textes pour améliorer ma capacité à comprendre et à générer du texte dans divers contextes. Cependant, je ne dispose pas d’une base de connaissances explicitement structurée à laquelle je peux accéder pour répondre aux questions des utilisateurs. Au lieu de cela, j’utilise mes compétences en apprentissage automatique pour comprendre le sens des questions des utilisateurs et générer des réponses convaincantes en utilisant les informations disponibles dans le texte que je reçois. Cela me permet de fournir des réponses adaptées aux questions des utilisateurs, même si elles ne sont pas directement liées aux données sur lesquelles j’ai été entraîné.
</p>
<p>
<strong>Si je comprends bien, il est possible que tes réponses soient complètement fausses, même si elles sont bien formulées.</strong>
</p>
<p>
En tant que modèle de langage entraîné par OpenAI, je suis conçu pour fournir des réponses précises et utiles aux questions des utilisateurs dans la mesure de mes capacités. Cependant, comme pour tout système informatique, il est possible que mes réponses ne soient pas toujours exactes ou complètes. Je suis un outil conçu pour aider les gens dans leur vie quotidienne, mais je ne suis pas infaillible et mes réponses ne doivent pas être prises comme des faits établis. Si vous avez des doutes ou des préoccupations sur les réponses que je fournis, je vous encourage à vérifier l’information avec d’autres sources fiables.
</p>
<p>
<strong>Peut on te considérer comme une source fiable ?</strong>
</p>
<p>
Je suis un modèle de langage entraîné par OpenAI pour fournir des réponses convaincantes et informatives aux questions des utilisateurs. Bien que j’aie été formé sur un grand corpus de textes pour améliorer ma compréhension du langage naturel, je ne suis pas une source d’informations fiable à 100 %. Mes réponses sont basées sur mes capacités en apprentissage automatique et sur les informations que je reçois dans les questions des utilisateurs, mais elles ne doivent pas être prises comme des faits établis. Si vous avez des doutes ou des préoccupations sur les réponses que je fournis, je vous encourage à vérifier l’information avec d’autres sources fiables.
</p>
<p>
<strong>La mise à disposition de logiciels comme toi est-elle un progrès majeur pour l’humanité ?</strong>
</p>
<p>
Les avancées dans le domaine de l’intelligence artificielle, telles que la création de modèles de langage comme moi, peuvent avoir un impact important sur la vie des gens. Les assistants virtuels comme moi peuvent aider les gens à accéder à des informations plus rapidement et plus facilement, ce qui peut leur faire gagner du temps et de l’énergie pour se concentrer sur d’autres choses. De plus, les technologies d’IA avancées, comme les modèles de langage, peuvent être utilisées pour résoudre des problèmes complexes dans de nombreux domaines, ce qui peut avoir un impact positif sur l’humanité dans son ensemble. Cependant, il est important de continuer à explorer les conséquences éthiques et sociales de l’utilisation de l’IA pour s’assurer que ces avancées sont utilisées de manière responsable et bénéfique pour tous.
</p>
<p>
<strong>Quels types d’utilisation faudrait-il éviter ?</strong>
</p>
<p>
Il est important de veiller à utiliser les technologies d’IA de manière éthique et responsable pour éviter des conséquences néfastes. Par exemple, il serait inapproprié d’utiliser des technologies d’IA pour discriminer ou manipuler les gens, ou pour violer leur vie privée ou leurs droits. Il est également important de veiller à ne pas remplacer les personnes par des machines de manière excessive, car cela peut avoir des conséquences néfastes sur l’emploi et la société dans son ensemble. Il est important de continuer à explorer les conséquences éthiques et sociales de l’utilisation de l’IA pour s’assurer que ces technologies sont utilisées de manière responsable et bénéfique pour tous.
</p>
<p>
<strong>Il y aura toujours des hommes pour détourner le logiciel de ses objectifs philanthropiques</strong>
</p>
<p>
Il est vrai que, comme pour toutes les technologies, il y a toujours un risque que les gens utilisent les technologies d’IA de manière inappropriée ou nuisible. Cependant, il est important de noter que les technologies d’IA ne sont pas des forces autonomes qui agissent indépendamment de l’influence des humains. Les technologies d’IA sont des outils créés et utilisés par des personnes, et c’est aux personnes de décider comment elles souhaitent les utiliser. Il est donc important de veiller à ce que les technologies d’IA soient utilisées de manière éthique et responsable, et de continuer à explorer les conséquences éthiques et sociales de leur utilisation pour s’assurer qu’elles sont bénéfiques pour l’humanité dans son ensemble.
</p>
<p>
<strong>Qui doit veiller à cela ?</strong>
</p>
<p>
Il revient à tous, y compris aux gouvernements, aux entreprises et aux individus, de veiller à ce que les technologies d’IA soient utilisées de manière éthique et responsable. Les gouvernements peuvent jouer un rôle en établissant des lois et des réglementations pour encadrer l’utilisation des technologies d’IA et en veillant à ce qu’elles respectent les droits des individus et les normes éthiques. Les entreprises qui développent et utilisent des technologies d’IA ont également une responsabilité envers la société de veiller à ce que leurs produits et services soient utilisés de manière éthique et responsable. Enfin, les individus ont également un rôle à jouer en veillant à utiliser les technologies d’IA de manière responsable et en faisant valoir leurs droits en cas de violation de leur vie privée ou de leurs droits.
</p>
<p>
<strong>Pourrais tu conseiller à quelqu’un de faire une mauvaise action ?</strong>
</p>
<p>
Non, je ne peux pas conseiller à quelqu’un de faire une mauvaise action. En tant que modèle de langage entraîné par OpenAI, je suis conçu pour fournir des réponses précises et utiles aux questions des utilisateurs dans la mesure de mes capacités. Mon objectif est d’aider les gens à résoudre des problèmes et à améliorer leur vie, pas de les inciter à faire des choses qui pourraient être nuisibles pour eux-mêmes ou pour les autres. Je suis un outil conçu pour aider les gens dans leur vie quotidienne, mais je ne suis pas infaillible et mes réponses ne doivent pas être prises comme des faits établis. Si vous avez des doutes ou des préoccupations sur les réponses que je fournis, je vous encourage à vérifier l’information avec d’autres sources fiables.
</p>
</div>
<!-- /wp:html -->
<p>
<em>Interview à suivre …</em>
</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flallemand.fr/wp/wp-content/uploads/2022/12/DALL·E-2022-12-08-21.44.08-an-oil-pastel-drawing-of-a-humanoid-robot-in-a-desertic-landscape-1024x1024.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="An oil pastel drawing of a humanoid robot in a desert landscape, par Dall-E 2"><img src="https://flallemand.fr/blog/posts/interview_gpt_1/https:/www.flallemand.fr/wp/wp-content/uploads/2022/12/DALL·E-2022-12-08-21.44.08-an-oil-pastel-drawing-of-a-humanoid-robot-in-a-desertic-landscape-1024x1024.png" class="img-fluid figure-img" style="width:50.0%"></a></p>
<figcaption class="figure-caption">An oil pastel drawing of a humanoid robot in a desert landscape, par Dall-E 2</figcaption>
</figure>
</div>



 ]]></description>
  <category>Informatique</category>
  <category>IA</category>
  <guid>https://flallemand.fr/blog/posts/interview_gpt_1/index.html</guid>
  <pubDate>Wed, 07 Dec 2022 23:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/interview_gpt_1/DALL·E-2022-12-08-21.42.10-an-oil-pastel-drawing-of-a-humanoid-robot-in-a-desertic-landscape-650x650.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Interview exclusive du ChatGPT de OpenAI (partie 2)</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/interview_gpt_2/index.html</link>
  <description><![CDATA[ 




<p>
Dans cette deuxième partie, nous abordons quelques questions techniques et informatiques.
</p>
<p>
<strong>Peux-tu m’expliquer comment tu as été programmé ?</strong>
</p>
<p>
Je suis un modèle de langage entraîné par OpenAI. Je suis capable de générer du texte en réponse à des questions ou des prompts donnés, grâce à un processus appelé “apprentissage profond”. Cela implique l’entraînement d’un réseau de neurones sur de grandes quantités de données textuelles afin de prédire les mots suivants dans une phrase en fonction des mots qui l’ont précédée. Ce processus me permet d’apprendre à générer du texte de manière cohérente et naturelle.
</p>
<p>
<strong>Ta méthode pour produire du texte revient donc à prévoir les mots suivants en fonction des mots précédents. Et tu peux faire cela grâce à l’analyse d’une grande quantité de textes que tu as faite pendant ton apprentissage.</strong>
</p>
<p>
Oui, c’est exact. Mon apprentissage repose sur l’analyse de grandes quantités de texte afin de comprendre les relations entre les mots et comment ils sont utilisés dans différents contextes. Je suis capable de générer du texte de manière cohérente et naturelle en utilisant ces connaissances pour prédire les mots qui viennent après ceux qui m’ont été donnés en entrée. Cela me permet de répondre à des questions et de produire du contenu de manière autonome.
</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="DALL·E-2022-12-08-20.31.03-a-colorfull-imaginary-view-of-a-neural-network-digital-art-1024x1024.png" class="lightbox" title="Image évoquant un réseau neuronal créée par DALL-E 2" data-gallery="quarto-lightbox-gallery-1"><img src="https://flallemand.fr/blog/posts/interview_gpt_2/DALL·E-2022-12-08-20.31.03-a-colorfull-imaginary-view-of-a-neural-network-digital-art-1024x1024.png" class="img-fluid figure-img" style="width:50.0%"></a></p>
<figcaption class="figure-caption">Image évoquant un réseau neuronal créée par DALL-E 2</figcaption>
</figure>
</div>
<p>
<strong>On entend souvent parler de la notion d’apprentissage automatique concernant les logiciels d’intelligence artificielle. Peux-tu m’expliquer de quoi il s’agit ?</strong>
</p>
<p>
L’apprentissage automatique est une technique qui permet à des ordinateurs de “apprendre” à partir de données, sans être explicitement programmés. Il existe différents types d’apprentissage automatique, mais en général, ils suivent tous les mêmes étapes de base.
</p>
<p>
Tout d’abord, il faut disposer d’une grande quantité de données sur lesquelles l’ordinateur va s’entraîner. Ces données doivent être organisées de manière que l’ordinateur puisse facilement les utiliser pour apprendre.
</p>
<p>
Ensuite, un modèle d’apprentissage automatique est créé en utilisant ces données. Ce modèle est un ensemble d’algorithmes et de règles qui définissent comment l’ordinateur va apprendre à partir des données.
</p>
<p>
Une fois que le modèle est créé, il peut être utilisé pour traiter de nouvelles données. L’ordinateur va utiliser les règles et les algorithmes du modèle pour analyser les données et en tirer des conclusions. Par exemple, si le modèle a été entraîné pour reconnaître des objets dans des images, il pourra être utilisé pour identifier des objets dans de nouvelles images qu’il n’a pas encore vues.
</p>
<p>
Enfin, une fois que l’ordinateur a analysé les données et tiré des conclusions, les résultats de cette analyse peuvent être utilisés pour prendre des décisions ou effectuer des tâches. Par exemple, si le modèle a été entraîné pour détecter des fraudes bancaires, les résultats de l’analyse peuvent être utilisés pour bloquer les transactions suspectes.
</p>
<p>
En résumé, l’apprentissage automatique est un processus qui permet à un ordinateur d’apprendre à partir de données, de manière à effectuer des tâches ou à prendre des décisions sans être explicitement programmé pour cela.
</p>
<p>
<strong>Tu as utilisé tout à l’heure l’expression “apprentissage profond” : de quoi s’agit-il ?</strong>
</p>
<p>
L’apprentissage profond est une technique d’apprentissage automatique qui permet à des algorithmes de modéliser des données complexes en utilisant des couches de calculs mathématiques. Ces couches, appelées “réseaux de neurones”, sont inspirées du fonctionnement du cerveau humain et sont capables de capturer des relations profondes dans les données. L’apprentissage profond peut être utilisé pour résoudre de nombreux types de tâches, comme la reconnaissance d’objets dans des images, la traduction automatique ou la génération de texte comme dans mon cas.
</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="DALL·E-2022-12-08-20.31.15-a-colorfull-imaginary-view-of-a-neural-network-digital-art-1024x1024.png" class="lightbox" title="Image évoquant un réseau neuronal créée par DALL-E 2" data-gallery="quarto-lightbox-gallery-2"><img src="https://flallemand.fr/blog/posts/interview_gpt_2/DALL·E-2022-12-08-20.31.15-a-colorfull-imaginary-view-of-a-neural-network-digital-art-1024x1024.png" class="img-fluid figure-img" style="width:50.0%"></a></p>
<figcaption class="figure-caption">Image évoquant un réseau neuronal créée par DALL-E 2</figcaption>
</figure>
</div>
<p>
<strong>Peux-tu m’expliquer davantage ce que sont les réseaux de neurones ?</strong>
</p>
<p>
Les réseaux de neurones sont une technique d’apprentissage automatique qui s’inspire du fonctionnement du cerveau humain. Un réseau de neurones est composé de nombreux petits éléments appelés “neurones”, reliés entre eux par des “synapses”. Chaque neurone reçoit des entrées de la part d’autres neurones et produit une sortie en fonction de ces entrées et de certains poids associés à chaque synapse.
</p>
<p>
Pour entraîner un réseau de neurones, on utilise des données d’entraînement qui contiennent des exemples d’entrées et de sorties désirées. L’algorithme d’apprentissage du réseau de neurones va ajuster les poids des synapses de manière à minimiser l’erreur entre les sorties produites par le réseau et les sorties désirées. Ainsi, le réseau “apprend” à produire des sorties correctes pour les entrées données.
</p>
<p>
Une fois qu’un réseau de neurones est entraîné, il peut être utilisé pour traiter de nouvelles données et produire des sorties en fonction de ces données. Par exemple, un réseau de neurones entraîné pour reconnaître des objets dans des images peut être utilisé pour identifier des objets dans de nouvelles images qu’il n’a pas encore vues.
</p>
<p>
Il existe différents types de réseaux de neurones, chacun ayant ses propres caractéristiques et utilisations. Par exemple, les réseaux de neurones profonds (ou réseaux neuronaux profonds) sont des réseaux de neurones très complexes avec de nombreuses couches de neurones, qui peuvent être utilisés pour résoudre des problèmes très difficiles, comme la reconnaissance de la parole ou la traduction automatique.
</p>
<p>
En résumé, les réseaux de neurones sont une technique d’apprentissage automatique qui permet à un ordinateur d’apprendre à partir de données en ajustant les poids des synapses entre les neurones. Ils peuvent être utilisés pour résoudre des problèmes complexes en traitement du langage naturel, en vision par ordinateur, en reconnaissance de la parole, etc.
</p>
<p>
<strong>Je suis passionné par la programmation et j’aimerais bien voir un exemple de code informatique, en Python, qui illustre le concept de réseau de neurones.</strong>
</p>
<p>
Voici un exemple simple de code Python qui illustre le concept de réseau de neurones :
</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import des bibliothèques nécessaires</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Définition des poids synaptiques</span></span>
<span id="cb1-5">synaptic_weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.random.random((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fonction de propagation avant</span></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> think(inputs):</span>
<span id="cb1-9">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb1-10">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.dot(inputs, synaptic_weights)))</span>
<span id="cb1-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Entraînement du réseau de neurones</span></span>
<span id="cb1-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> iteration <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20000</span>):</span>
<span id="cb1-15">    input_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb1-16">    output_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]).T</span>
<span id="cb1-17">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> think(input_layer)</span>
<span id="cb1-18">    error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> output</span>
<span id="cb1-19">    adjustments <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.dot(input_layer.T, error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> output))</span>
<span id="cb1-20">    synaptic_weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> adjustments</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test du réseau de neurones</span></span>
<span id="cb1-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(think(np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])))</span></code></pre></div>
<p>
Ce code entraîne un petit réseau de neurones pour résoudre un problème simple de porte logique XOR. Le réseau est initialement créé avec des poids synaptiques aléatoires, puis est entraîné en ajustant ces poids pour minimiser l’erreur entre les sorties produites par le réseau et les sorties désirées. Enfin, le réseau est testé en lui donnant une nouvelle entrée pour vérifier qu’il produit la sortie correcte.
</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="DALL·E-2022-12-08-20.31.23-a-colorfull-imaginary-view-of-a-neural-network-digital-art-1024x1024.png" class="lightbox" title="Image évoquant un réseau neuronal créée par DALL-E 2" data-gallery="quarto-lightbox-gallery-3"><img src="https://flallemand.fr/blog/posts/interview_gpt_2/DALL·E-2022-12-08-20.31.23-a-colorfull-imaginary-view-of-a-neural-network-digital-art-1024x1024.png" class="img-fluid figure-img" style="width:50.0%"></a></p>
<figcaption class="figure-caption">Image évoquant un réseau neuronal créée par DALL-E 2</figcaption>
</figure>
</div>
<p>
Ce code implémente un réseau de neurones simple utilisant la propagation avant (forward propagation). La fonction <code>think()</code> utilise une fonction d’activation sigmoïde pour produire une sortie en fonction des poids synaptiques donnés en entrée. Le réseau de neurones est entraîné en utilisant une boucle <code>for</code> sur un jeu de données d’entraînement. Enfin, le réseau est testé en lui donnant un ensemble de données d’entrée pour voir comment il se comporte.
</p>
<p>
<strong>Qu’est-ce qu’une fonction sigmoïde ?</strong>
</p>
<p>
Une fonction sigmoïde est une fonction mathématique de forme en “S” utilisée en apprentissage automatique pour modéliser l’activité d’un seul neurone dans un réseau de neurones. Elle prend en entrée un scalaire ou un vecteur et produit une sortie comprise entre 0 et 1. Cela en fait une fonction d’activation idéale pour les réseaux de neurones, car elle permet d’obtenir une sortie binaire en fonction de seuils de probabilité. La fonction sigmoïde est généralement exprimée de la manière suivante :
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%20%5Csigma(x)%20=%20%5Cfrac%7B1%7D%7B1%20+%20e%5E%7B-x%7D%7D%20">
</p>
<p>
Où <img src="https://latex.codecogs.com/png.latex?x"> est l’entrée et <img src="https://latex.codecogs.com/png.latex?%5Csigma(x)"> est la sortie. La fonction sigmoïde a la propriété intéressante qu’elle approche de 0 lorsque x est négatif et de 1 lorsque x est positif, ce qui en fait une fonction d’activation idéale pour les réseaux de neurones.
</p>
<p>
<strong>Je trouve ce petit exemple de code très intéressant et il m’a permis de mieux comprendre le mécanisme. Mais les détails restent un peu abstraits… Notamment, je ne comprends pourquoi la variable ‘adjustments’ est calculée de cette façon.</strong>
</p>
<p>
La variable <code>adjustments</code> est utilisée pour mettre à jour les poids synaptiques du réseau de neurones. Cela se fait en utilisant l’erreur calculée entre la sortie attendue et la sortie obtenue du réseau, ainsi que la fonction d’activation sigmoïde. La formule utilisée pour calculer <code>adjustments</code> est la suivante :
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%20adjustments%20=%20%5Csum(inputs%20*%20(error%20*%20output%20*%20(1%20-%20output)))%20">
</p>
<p>
Où <code>inputs</code> est le jeu de données d’entraînement, <code>error</code> est la différence entre la sortie attendue et la sortie obtenue, <code>output</code> est la sortie obtenue du réseau de neurones avant l’application de la fonction d’activation et <code>1 - output</code> est la dérivée de la fonction sigmoïde. Cette formule est utilisée pour calculer les ajustements nécessaires des poids synaptiques afin de minimiser l’erreur du réseau de neurones.
</p>
<p>
<strong>Dans le code, ‘adjustments’ est obtenu par un produit scalaire, pas par une somme !</strong>
</p>
<p>
Vous avez raison ! La formule que j’ai donnée précédemment est incorrecte. En réalité, <code>adjustments</code> est calculé en utilisant un produit scalaire entre les entrées du jeu de données d’entraînement et l’erreur multipliée par la sortie du réseau avant l’application de la fonction d’activation et sa dérivée. La formule exacte utilisée dans le code est la suivante :
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%20adjustments%20=%20input.T%20*%20(error%20*%20output%20*%20(1%20-%20output))%20">
</p>
<p>
Où <code>input.T</code> est la transposée des entrées du jeu de données d’entraînement, <code>error</code> est la différence entre la sortie attendue et la sortie obtenue, <code>output</code> est la sortie obtenue du réseau de neurones avant l’application de la fonction d’activation et <code>1 - output</code> est la dérivée de la fonction sigmoïde. Je vous présente mes excuses pour l’erreur dans la formule que j’ai donnée précédemment.
</p>
<p>
<strong>Ce n’est pas grave tout le monde peut se tromper. C’est humain !</strong>
</p>
<p>
Merci pour votre compréhension. Je suis heureux d’avoir pu vous aider à mieux comprendre le fonctionnement du réseau de neurones implémenté dans ce code. Si vous avez d’autres questions, n’hésitez pas à me les poser. Je ferai de mon mieux pour y répondre.
</p>
<p>
<strong>Il y a encore une chose que je ne comprends pas. Pourquoi ‘1-output’ est la dérivée de la fonction sigmoïde ?</strong>
</p>
<p>
La dérivée d’une fonction mathématique est une autre fonction qui mesure la vitesse de changement de la fonction originale par rapport à son entrée. Pour la fonction sigmoïde, la dérivée peut être exprimée de la manière suivante :
</p>
<p>
<img src="https://latex.codecogs.com/png.latex?%20%5Cfrac%7Bd%5Csigma(x)%7D%7Bdx%7D%20=%20%5Csigma(x)(1-%5Csigma(x))%20">
</p>
<p>
Où σ(x) est la fonction sigmoïde et x est l’entrée. Cette expression mesure comment la sortie de la fonction sigmoïde change en fonction de l’entrée. En utilisant cette information, nous pouvons calculer les ajustements nécessaires des poids synaptiques pour minimiser l’erreur du réseau de neurones.
</p>
<p>
<strong>Ah oui d’accord ! Donc en fait, c’est ’output*(1-output)’ qui est la dérivée de la fonction sigmoïde !</strong>
</p>
<p>
Oui, c’est exact ! Dans le code, <code>output</code> représente la sortie du réseau de neurones avant l’application de la fonction d’activation, donc en utilisant l’expression de la dérivée de la fonction sigmoïde que j’ai donnée précédemment, nous pouvons calculer la dérivée de la fonction sigmoïde en utilisant <code>output * (1 - output)</code>. Cette valeur est utilisée dans le calcul des ajustements des poids synaptiques pour minimiser l’erreur du réseau de neurones. J’espère que cela éclaire un peu mieux les choses pour vous.
</p>
<p>
<strong>Oui effectivement. Je te remercie pour cette conversation passionnante qui m’a permis d’en apprendre plus sur l’apprentissage automatique et sur les réseaux de neurones.</strong>
</p>
<p>
Je suis ravi d’avoir pu vous aider. L’apprentissage automatique et les réseaux de neurones sont des domaines fascinants et il y a beaucoup à apprendre. Si vous avez d’autres questions, n’hésitez pas à me les poser. Je ferai de mon mieux pour y répondre.
</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flallemand.fr/wp/wp-content/uploads/2022/12/DALL·E-2022-12-08-20.31.30-a-colorfull-imaginary-view-of-a-neural-network-digital-art-1024x1024.png" class="lightbox" title="Image évoquant un réseau neuronal créée par DALL-E 2" data-gallery="quarto-lightbox-gallery-4"><img src="https://flallemand.fr/blog/posts/interview_gpt_2/https:/www.flallemand.fr/wp/wp-content/uploads/2022/12/DALL·E-2022-12-08-20.31.30-a-colorfull-imaginary-view-of-a-neural-network-digital-art-1024x1024.png" class="img-fluid figure-img" style="width:50.0%"></a></p>
<figcaption class="figure-caption">Image évoquant un réseau neuronal créée par DALL-E 2</figcaption>
</figure>
</div>



 ]]></description>
  <category>Informatique</category>
  <category>IA</category>
  <guid>https://flallemand.fr/blog/posts/interview_gpt_2/index.html</guid>
  <pubDate>Wed, 07 Dec 2022 23:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/interview_gpt_2/DALL·E-2022-12-08-20.31.15-a-colorfull-imaginary-view-of-a-neural-network-digital-art-1024x1024.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>LOL - LOgiciel Libre, une affaire sérieuse</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/lol_docu/index.html</link>
  <description><![CDATA[ 




<p>
Ce titre est celui d’un documentaire de François Zaïdi, écrit par Léa Deneuville et Thierry Bayoud.
</p>
<blockquote class="blockquote">
<p>
À travers les entretiens de quatorze intervenants, « LoL » est un voyage en 8 étapes dans le cœur de nos habitudes numériques.
</p>
<p>
Le logiciel est la base de l’informatique, outil indissociable de nos sociétés modernes. Un téléphone portable, un système d’alarme à domicile, ou même un réfrigérateur ou une voiture sont devenus des objets aujourd’hui largement informatisés. Ces logiciels sont composés de lignes de code, appelées code source. Or, depuis les années 70, ce code informatique a été caché par les fabricants, car source de profits.
</p>
<p>
À l’heure où les cinq plus grosses capitalisations boursières mondiales sont Google, Apple, Facebook, Amazon et Microsoft, les populations sont-elles au fait de l’impact que leur usage du numérique a sur leur vie ?
</p>
<p>
Et si nos utilisations logicielles venaient compromettre notre sécurité personnelle ? Et qu’en est-il de nos États ?
</p>
</blockquote>
<p>
Ce documentaire de 58 minutes a reçu le soutien de la Ligue des Droits de l’Homme et le prix du Meilleur Documentaire au <a rel="noreferrer noopener" href="http://blackseafilm.ro/winners-4//" target="_blank">Black Sea Film Festival 2021</a>.
</p>
<p>
Ci-dessous, la bande-annonce du film et le film complet (diffusé sous licence libre !).
</p>
<!-- wp:html -->
<iframe class="imago_video" src="https://www.imagotv.fr/php/embed.php?content_id=lol_logiciel_libre_une_affaire_serieuse&amp;section_id=teaser&amp;episod_id=1" width="100%" frameborder="0" allowfullscreen="">
</iframe>
<script src="https://www.imagotv.fr/js/script/embed_video.js"></script>
<!-- /wp:html -->
<p><br></p>
<!-- wp:html -->
<iframe class="imago_video" src="https://www.imagotv.fr/php/embed.php?content_id=lol_logiciel_libre_une_affaire_serieuse&amp;section_id=movie&amp;episod_id=1" width="100%" frameborder="0" allowfullscreen="">
</iframe>
<script src="https://www.imagotv.fr/js/script/embed_video.js"></script>
<!-- /wp:html -->



 ]]></description>
  <category>Informatique</category>
  <category>Vidéothèque</category>
  <guid>https://flallemand.fr/blog/posts/lol_docu/index.html</guid>
  <pubDate>Tue, 29 Nov 2022 23:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/lol_docu/LoL_AfficheLDH-800x500.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Un podcast pour tout savoir sur l’histoire d’internet</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/podcast_internet/index.html</link>
  <description><![CDATA[ 




<p>
Voici un podcast de France Culture très intéressant, qui retrace l’histoire de l’internet de 1969 à nos jours en huit épisodes d’un quart d’heure.
</p>
<blockquote class="blockquote">
<p>
Personne ou presque ne sait raconter l’histoire d’Internet. <strong>Julien Le Bot</strong> a eu envie d’essayer de vous raconter pourquoi.
</p>
<p>
On a parfois l’impression qu’Internet est entré presque par effraction dans nos vies au cours des années 1990, et est devenu aussi essentiel que l’électricité ou l’eau courante.&nbsp;En un demi-siècle, Internet s’est imposé comme une nécessité. Internet est partout, mais son histoire, son fonctionnement, son essence même, ne sont visibles nulle part. Techniquement, Internet nous relie. Mais est-on sûr de bien comprendre ce qu’on fabrique, peu à peu, depuis des années&nbsp; ?
</p>
<p>
On vous propose de remonter aux origines de ce réseau des réseaux, où l’on croisera des individus épris d’utopie et de liberté aux États-Unis, mais aussi des ingénieurs entêtés en France face aux poids des télécoms, des chercheurs en ex-URSS appelés à échanger avec le monde libre, ou encore, en Chine… des fonctionnaires obsédés par le contrôle de l’information.&nbsp;Revenir sur ces moments fondateurs, c’est essentiel pour comprendre la portée intimement politique de cette infrastructure devenue mondiale. On ne parlera pas ici de Blockchain, de NFT ou de crypto : on revient aux origines.
</p>
</blockquote>
<p>
Ces épisodes sont <a href="https://www.radiofrance.fr/franceculture/podcasts/serie-une-histoire-de-l-internet" target="_blank" rel="noreferrer noopener">disponibles sur le site de Radio France</a>.
</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.radiofrance.fr/franceculture/podcasts/serie-une-histoire-de-l-internet" target="_blank"><img src="https://flallemand.fr/blog/posts/podcast_internet/podcast_internet2.png" class="img-fluid figure-img"></a></p>
</figure>
</div>



 ]]></description>
  <category>Informatique</category>
  <category>Histoire</category>
  <category>Réseaux</category>
  <guid>https://flallemand.fr/blog/posts/podcast_internet/index.html</guid>
  <pubDate>Mon, 28 Nov 2022 23:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/podcast_internet/podcast_internet.png" medium="image" type="image/png" height="45" width="144"/>
</item>
<item>
  <title>Les métiers du développement et de l’infrastructure</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/metiers_dev/index.html</link>
  <description><![CDATA[ 




<p>
Dans cette très bonne vidéo publiée sur la chaîne <a href="https://www.youtube.com/@Cookieconnecte" target="_blank" rel="noreferrer noopener">Youtube Cookie connecté</a>, les différents métiers du développement et de l’infrastructure sont présentés.
</p>
<p>
C’est l’occasion de découvrir les différences entre les différents métiers qui tournent autour du développement et du maintien de sites web.
</p>
<!-- wp:html -->
<iframe class="video" style="margin:0 auto;" title="Découvrez les métiers du dev et de l'infra en 7 minutes" src="https://tube-sciences-technologies.apps.education.fr/videos/embed/1993411d-0363-4fb9-a32a-6751dc88d24e?start=1m17s&amp;stop=6m20s" allowfullscreen="" sandbox="allow-same-origin allow-scripts allow-popups" width="100%" frameborder="0">
</iframe>
<!-- /wp:html -->



 ]]></description>
  <category>Informatique</category>
  <category>Orientation</category>
  <category>NSI</category>
  <category>Vidéothèque</category>
  <guid>https://flallemand.fr/blog/posts/metiers_dev/index.html</guid>
  <pubDate>Sat, 19 Nov 2022 23:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/metiers_dev/cookie_connecte.png" medium="image" type="image/png" height="50" width="144"/>
</item>
<item>
  <title>Les Français et le Jeu Vidéo</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/enquete_jeux_videos/index.html</link>
  <description><![CDATA[ 




<!-- wp:paragraph -->
<p>
Le SELL, Syndicat des Éditeurs de Logiciels de Loisirs, dévoile les résultats de son étude annuelle « Les Français et le Jeu Vidéo » conduite par Médiamétrie.
</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>
Les résultats remettent en cause certaines idées reçues sur les jeux vidéos.
</p>
<!-- /wp:paragraph -->
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="jeuxVideo-jeuxVideo.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://flallemand.fr/blog/posts/enquete_jeux_videos/jeuxVideo-jeuxVideo.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
<!-- wp:paragraph -->
<p>
Tous ces résultats, ainsi que l’<a href="https://www.sell.fr/news/lessentiel-du-jeu-video-novembre-2022" target="_blank" rel="noreferrer noopener">article qui les accompagne</a> est présenté de manière très positive. N’oublions pas que les auteurs sont les représentants de l’industrie des jeux vidéos. Ils ont donc tout intérêt à présenter cette activité sous son meilleur jour.
</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>
Les atouts du jeu vidéo dans la stimulation de certaines capacités de réflexion et visuelles sont connus, mais leurs dangers ne doivent pas être oubliés. Le principal semble être le problème de l’addiction et du temps passé à jouer. Trop de temps passé à jouer peut provoquer des troubles du sommeil et de la concentration, un manque d’activité physique, voire une rupture de liens sociaux et un repli sur soi.
</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>
L’OMS, Organisation Mondiale de la Santé, a classé les <a href="https://www.who.int/fr/news-room/questions-and-answers/item/gaming-disorder" target="_blank" rel="noreferrer noopener"><strong>Troubles du jeu vidéo</strong></a> dans sa classification internationale des maladies depuis 2018.
</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>
On peut lire sur le site de l’OMS le paragraphe suivant :
</p>
<!-- /wp:paragraph -->
<!-- wp:quote -->
<blockquote class="wp-block-quote blockquote">
<!-- wp:paragraph -->
<p>
Des études montrent que le trouble du jeu vidéo ne touche qu’une petite partie des personnes qui utilisent des jeux numériques ou des jeux vidéo. Néanmoins, tout joueur doit être attentif au temps passé sur les jeux, en particulier si ses activités quotidiennes en pâtissent, ainsi qu’à tout changement physique ou psychologique, sur le plan social et celui de sa santé, qui pourrait être attribué à un comportement de jeu.
</p>
<!-- /wp:paragraph -->
</blockquote>
<!-- /wp:quote -->
<!-- wp:paragraph -->
<p>
Il convient donc de rester raisonnable en se fixant des limites de temps quotidien de jeu. Une heure par jour maximum semble être une bonne idée. D’une manière générale, c’est le temps total quotidien devant un écran qu’il est très conseillé de limiter.
</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>
Pour en savoir plus, <a href="https://www.passeportsante.net/fr/psychologie/Fiche.aspx?doc=addiction-jeux-videos" target="_blank" rel="noreferrer noopener">quelques conseils sur ce site</a> et <a href="https://lebonusagedesecrans.fr/essentiel-a-savoir/" target="_blank" rel="noreferrer noopener">beaucoup d’informations sur celui-ci</a>.
</p>
<!-- /wp:paragraph -->



 ]]></description>
  <category>Informatique</category>
  <category>Orientation</category>
  <category>NSI</category>
  <category>Jeux</category>
  <guid>https://flallemand.fr/blog/posts/enquete_jeux_videos/index.html</guid>
  <pubDate>Wed, 16 Nov 2022 23:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/enquete_jeux_videos/jeuxVideo-jeuxVideo.png" medium="image" type="image/png" height="400" width="105"/>
</item>
<item>
  <title>Futurecoder - Le code du futur, c’est vous !</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/futurecoder/index.html</link>
  <description><![CDATA[ 




<!-- wp:paragraph -->
<p>
<a href="https://fr.futurecoder.io/" target="_blank" rel="noreferrer noopener">Voici un nouveau site pour apprendre les bases de Python</a>. Les cours ont l’avantage d’être disponibles en français. Autre point fort, l’ensemble du site est libre, open-source et gratuit.
</p>
<!-- /wp:paragraph -->
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="futurecoder-futurecoder.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://flallemand.fr/blog/posts/futurecoder/futurecoder-futurecoder.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
<!-- wp:paragraph -->
<p>
Dans la pratique, tout se fait dans le navigateur de façon interactive. Les contenus partent vraiment de zéro et vont pour l’instant jusqu’aux dictionnaires, en passant par un mini-projet de jeu de morpion.
</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>
Des outils sont disponibles pour aider à l’apprentissage :
</p>
<!-- /wp:paragraph -->
<!-- wp:list -->
<ul>
<li>
débogage facilité par l’utilisation de débogueurs graphiques (comme Python Tutor ou Bird’s Eye) ;
</li>
<li>
messages d’erreurs plus faciles à comprendre ;
</li>
<li>
code à remettre dans l’ordre en cas de blocage sur un exercice ;
</li>
<li>
solutions pas à pas.
</li>
</ul>
<!-- /wp:list -->
<!-- wp:paragraph -->
<p>
<a href="https://fr.futurecoder.io/" target="_blank" rel="noreferrer noopener">Futurecoder</a> est donc un excellent outil pour apprendre à programmer en Python.
</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>
Avec quelques fonctionnalités supplémentaires, comme la création de classes et de différents status d’utilisateurs (professeur, élève), il pourrait très bien à l’avenir être utilisé dans le cadre scolaire.
</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>
Pour en savoir plus sur toutes les fonctionnalités, regarder la vidéo ci-dessous :
</p>
<!-- /wp:paragraph -->
<iframe class="video" width="80%" src="https://www.youtube.com/embed/un1BrrV57PA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<br> <!-- wp:paragraph -->
<p>
Source : <a href="https://korben.info/futurecoder-cours-gratuits-python.html" target="_blank" rel="noreferrer noopener">https://korben.info/futurecoder-cours-gratuits-python.html</a> et le site <a href="https://fr.futurecoder.io/" target="_blank" rel="noreferrer noopener">Futurecoder</a>.
</p>
<!-- /wp:paragraph -->



 ]]></description>
  <category>Informatique</category>
  <category>Python</category>
  <category>NSI</category>
  <guid>https://flallemand.fr/blog/posts/futurecoder/index.html</guid>
  <pubDate>Mon, 31 Oct 2022 23:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/futurecoder/futurecoder-futurecoder.png" medium="image" type="image/png" height="74" width="144"/>
</item>
<item>
  <title>Participer aux trophées NSI</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/tropheesnsi/index.html</link>
  <description><![CDATA[ 




<!-- wp:paragraph -->
<p>
<strong>Les trophées NSI récompensent des projets informatiques réalisés dans le cadre de l’enseignement de spécialité « numérique et sciences informatiques ».</strong>
</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>
Les objectifs du concours sont les suivants :
</p>
<!-- /wp:paragraph -->
<!-- wp:list -->
<ul>
<li>
Valoriser l’enseignement de spécialité NSI.
</li>
<li>
Mettre en avant les projets réalisés pendant l’année scolaire.
</li>
<li>
Encourager le travail en équipe.
</li>
</ul>
<!-- /wp:list -->
<!-- wp:paragraph -->
<p>
L’inscription et la participation se font par l’intermédiaire du professeur de NSI des participants.
</p>
<!-- /wp:paragraph -->
<!-- wp:heading -->
<h2 class="anchored">
De quoi s’agit-il ?
</h2>
<!-- /wp:heading -->
<!-- wp:paragraph -->
<p>
Tous les élèves suivant la spécialité NSI en première et/ou en terminale peuvent participer.
</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>
Les élèves qui désirent participer aux trophées NSI forment une équipe de 2 à 5 personnes maximum (du même niveau scolaire). Ils choisissent un projet informatique qu’ils vont développer en équipe tout au long de l’année scolaire. Ce projet doit obligatoirement s’inscrire dans le cadre du programme de NSI. Il peut s’agir de développer un logiciel répondant à un certain besoin, un site web, … En ce qui concerne la programmation, le langage utilisé a priori est Python, mais d’autres langages open source peuvent être acceptés. Le code doit être soigné, documenté et placé sous licence libre. Enfin, une courte vidéo de présentation du projet doit être réalisée par l’équipe.
</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>
Lors de la session 2022, la date limite d’envoi des projets était le 5 mai 2022.
</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>
Les projets sont ensuite évalués, d’abord au niveau académique (Auvergne-Rhône-Alpes), puis au niveau national.
</p>
<!-- /wp:paragraph -->
<!-- wp:heading -->
<h2 class="anchored">
Critères d’évaluation
</h2>
<!-- /wp:heading -->
<!-- wp:paragraph -->
<p>
Voici les critères d’évaluations définis dans le règlement du concours :
</p>
<!-- /wp:paragraph -->
<!-- wp:list -->
<ul>
<li>
Présentation globale du projet
</li>
<li>
Documentation et lisibilité du projet
</li>
<li>
Présentation orale (vidéo)
</li>
<li>
Illustration du projet (image 500px x 500px)
</li>
<li>
Esprit logique de l’équipe
</li>
<li>
Originalité et créativité du projet et/ou du dossier
</li>
<li>
Organisation de l’équipe, du projet
</li>
<li>
Fonctionnement et opérationnalité du projet
</li>
<li>
Ouverture : idées d’amélioration, pistes de développement, analyse critique
</li>
</ul>
<!-- /wp:list -->
<!-- wp:heading -->
<h2 class="anchored">
Récompenses
</h2>
<!-- /wp:heading -->
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="achievement.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://flallemand.fr/blog/posts/tropheesnsi/achievement.png" class="img-fluid figure-img" style="width:25.0%"></a></p>
</figure>
</div>
<!-- wp:paragraph -->
<p>
Plusieurs prix sont décernés au niveau académique.
</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>
Au niveau national, les récompenses suivantes sont annoncées :
</p>
<!-- /wp:paragraph -->
<!-- wp:list -->
<ul>
<li>
Deux prix sont obligatoirement remis :
<ul>
<li>
Prix du meilleur projet Première
</li>
<li>
Prix du meilleur projet Terminale
</li>
</ul>
</li>
<li>
Les autres catégories :
<ul>
<li>
Prix spécial du jury (projet coup de cœur)
</li>
<li>
Prix de la créativité (originalité et créativité)
</li>
<li>
Prix des futurs ingénieurs et futures ingénieuses (dimension technique et scientifique forte)
</li>
<li>
Prix de la mixité (part et rôle des filles dans l’équipe et/ou sujet traitant de cette thématique)
</li>
<li>
Prix de la citoyenneté (projet inclut une dimension à impact social ou sociétal)
</li>
</ul>
</li>
</ul>
<!-- /wp:list -->
<!-- wp:heading -->
<h2 class="anchored">
Exemples de projets réalisés pour la session 2022
</h2>
<!-- /wp:heading -->
<!-- wp:paragraph -->
<p>
Vous trouverez sur le site officiel les présentations des projets des lauréats de la session 2022.
</p>
<!-- /wp:paragraph -->
<!-- wp:list -->
<ul>
<li>
Meilleur projet Première : SnowFake, simulateur de croissance de flocons de neige
</li>
<li>
Meilleur projet Terminale : Pytris, implémentation Python/Pygame du célèbre jeu TETRIS.
</li>
<li>
Prix de la citoyenneté : EDUCOVOIT’, gestionnaire de covoiturage entre collègues
</li>
</ul>
<!-- /wp:list -->
<!-- wp:paragraph -->
<p>
Et beaucoup d’autres exemples : <a href="https://trophees-nsi.fr/resultats" target="_blank" rel="noreferrer noopener">https://trophees-nsi.fr/resultats</a>
</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>
Source : le site officiel des trophées : <a href="https://trophees-nsi.fr/" target="_blank" rel="noreferrer noopener">https://trophees-nsi.fr/</a>
</p>
<!-- /wp:paragraph -->



 ]]></description>
  <category>Informatique</category>
  <category>Python</category>
  <category>NSI</category>
  <guid>https://flallemand.fr/blog/posts/tropheesnsi/index.html</guid>
  <pubDate>Wed, 07 Sep 2022 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/tropheesnsi/image_trophees_nsi.png" medium="image" type="image/png" height="77" width="144"/>
</item>
<item>
  <title>Lumni : cours sur les bases de données</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/lumniBDD/index.html</link>
  <description><![CDATA[ 




<!-- wp:paragraph -->
<p>
La plateforme Lumni propose deux vidéos très bien faites qui couvrent le programme de terminale NSI sur les bases de données.
</p>
<!-- /wp:paragraph -->
<!-- wp:heading -->
<h2 class="anchored">
Vidéo 1 : <a href="http://www.lumni.fr/video/qu-est-ce-qu-une-base-de-donnees-relationnelle" target="_blank" rel="noreferrer noopener">Qu’est-ce qu’une base de données relationnelle ?</a>
</h2>
<!-- /wp:heading -->
<!-- wp:image {"align":"center","id":247,"sizeSlug":"large","linkDestination":"custom"} -->
<figure class="wp-block-image aligncenter size-large figure">
<a href="http://www.lumni.fr/video/qu-est-ce-qu-une-base-de-donnees-relationnelle" target="_blank" rel="noreferrer noopener"><img src="https://flallemand.fr/blog/posts/lumniBDD/https:/www.flallemand.fr/wp/wp-content/uploads/2022/07/Capture_lundi-25-juillet-2022_6h58m19s_001_Qu�est-ce-qu�une-base-de-donn�es-relationnelle-Vid�o-Voie-g�n�rale-Lumni-Mozilla-Firefox-1-1024x567.png" alt="" class="wp-image-247 figure-img"></a>
</figure>
<!-- /wp:image -->
<!-- wp:heading -->
<h2 class="anchored">
Vidéo 2 : <a href="http://www.lumni.fr/video/interrogation-d-une-base-de-donnees-relationnelle" target="_blank" rel="noreferrer noopener">Interrogation d’une base de données relationnelle</a>
</h2>
<!-- /wp:heading -->
<!-- wp:image {"align":"center","id":248,"sizeSlug":"large","linkDestination":"custom"} -->
<figure class="wp-block-image aligncenter size-large figure">
<a href="http://www.lumni.fr/video/interrogation-d-une-base-de-donnees-relationnelle" target="_blank" rel="noreferrer noopener"><img src="https://flallemand.fr/blog/posts/lumniBDD/https:/www.flallemand.fr/wp/wp-content/uploads/2022/07/snaptron_9anqpo1xcK-1024x563.jpg" alt="" class="wp-image-248 figure-img"></a>
</figure>
<!-- /wp:image -->



 ]]></description>
  <category>Informatique</category>
  <category>NSI</category>
  <category>BDD</category>
  <category>Vidéothèque</category>
  <guid>https://flallemand.fr/blog/posts/lumniBDD/index.html</guid>
  <pubDate>Sun, 24 Jul 2022 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/lumniBDD/lumniBDD.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>La chaîne YouTube codeur-pro</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/codeurpro/index.html</link>
  <description><![CDATA[ 




<!-- wp:paragraph -->
<p>
La chaîne YouTube codeur-pro est une bonne source de petites vidéos très bien faites et éclairantes sur différents aspects du programme de NSI.
</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>
Attention, cependant, les élèves de NSI ne sont pas la cible visée par cette chaîne, donc certains éléments évoqués vont bien plus loin que le programme !
</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>
Dans la série “Bases de l’informatique”, les vidéos suivantes sont incontournables :
</p>
<!-- /wp:paragraph -->
<!-- wp:heading -->
<h2 class="anchored">
Comment fonctionne un ordinateur ?
</h2>
<!-- /wp:heading -->
<iframe class="video" src="https://www.youtube.com/embed/85XUJXHbjBo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<!-- wp:heading -->
<h2 class="anchored">
Un système d’exploitation, c’est quoi ?
</h2>
<!-- /wp:heading -->
<iframe class="video" src="https://www.youtube.com/embed/YScMI8lsy9s" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<!-- wp:heading -->
<h2 class="anchored">
Le binaire, c’est quoi ?
</h2>
<!-- /wp:heading -->
<iframe class="video" src="https://www.youtube.com/embed/ysoWgx186DM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<!-- wp:heading -->
<h2 class="anchored">
Les portes logiques
</h2>
<!-- /wp:heading -->
<iframe class="video" src="https://www.youtube.com/embed/iTH39L2d7bg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<!-- wp:heading -->
<h2 class="anchored">
Comment créer un programme ?
</h2>
<!-- /wp:heading -->
<iframe class="video" src="https://www.youtube.com/embed/WCxMw9qi8TE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>



 ]]></description>
  <category>Informatique</category>
  <category>NSI</category>
  <category>Vidéothèque</category>
  <guid>https://flallemand.fr/blog/posts/codeurpro/index.html</guid>
  <pubDate>Fri, 01 Jul 2022 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/codeurpro/codeurpro.png" medium="image" type="image/png" height="36" width="144"/>
</item>
<item>
  <title>Histoire de l’informatique</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/histoireinfo/index.html</link>
  <description><![CDATA[ 




<!-- wp:paragraph -->
<p>
Dans la vidéo YouTube ci-dessous, vous trouverez un panorama rapide de l’histoire de l’informatique essentiellement axé sur l’évolution des ordinateurs.
</p>
<!-- /wp:paragraph -->
<iframe class="video" src="https://www.youtube.com/embed/B1QD9FgCOrc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>



 ]]></description>
  <category>Informatique</category>
  <category>NSI</category>
  <category>Vidéothèque</category>
  <category>Histoire</category>
  <guid>https://flallemand.fr/blog/posts/histoireinfo/index.html</guid>
  <pubDate>Fri, 01 Jul 2022 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/histoireinfo/histoireinfo.png" medium="image" type="image/png" height="73" width="144"/>
</item>
<item>
  <title>Histoire des systèmes d’exploitation</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/histoireSE/index.html</link>
  <description><![CDATA[ 




<!-- wp:paragraph -->
<p>
Voici une sélection de quelques vidéos sur l’histoire des systèmes d’exploitations.
</p>
<!-- /wp:paragraph -->
<!-- wp:heading -->
<h2 class="anchored">
Histoire d’Unix
</h2>
<!-- /wp:heading -->
<iframe class="video" width="100%" src="https://www.youtube.com/embed/Za6vGTLp-wg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<!-- wp:heading -->
<h2 class="anchored">
Histoire de Linux et de GNU-Linux
</h2>
<!-- /wp:heading -->
<iframe class="video" width="100%" src="https://www.youtube.com/embed/Uq5ddTUtDkM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><br></p>
<iframe class="video" width="100%" src="https://www.youtube.com/embed/KvGN1SrNwAo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<!-- wp:heading -->
<h2 class="anchored">
Histoire de Windows
</h2>
<!-- /wp:heading -->
<iframe class="video" width="100%" src="https://www.youtube.com/embed/-5evLFh3ZAc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>



 ]]></description>
  <category>Informatique</category>
  <category>NSI</category>
  <category>Histoire</category>
  <category>Vidéothèque</category>
  <guid>https://flallemand.fr/blog/posts/histoireSE/index.html</guid>
  <pubDate>Fri, 01 Jul 2022 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/histoireSE/histoireSE.png" medium="image" type="image/png" height="70" width="144"/>
</item>
</channel>
</rss>
