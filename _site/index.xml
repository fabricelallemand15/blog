<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Le bloc-notes Maths, Info, Lycée</title>
<link>https://flallemand.fr/blog/</link>
<atom:link href="https://flallemand.fr/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Le blog de M. LALLEMAND, professeur de mathématiques</description>
<generator>quarto-1.7.15</generator>
<lastBuildDate>Wed, 26 Mar 2025 23:00:00 GMT</lastBuildDate>
<item>
  <title>Le “Nobel des maths” décerné au Japonais Masaki Kashiwara</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/2025_03_27_Prix_Abel/</link>
  <description><![CDATA[ 





<p>Le monde des mathématiques est en ébullition ! Le prestigieux prix Abel, souvent considéré comme l’équivalent du prix Nobel dans cette discipline, a été attribué au mathématicien japonais Masaki Kashiwara.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="Masaki_Kashiwara_blackboard_PeterBadge_Typos1_TheAbelPrize.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Masaki Kashiwara (crédit : Peter Bagde / Typos1 / The Abel Prize)"><img src="https://flallemand.fr/blog/posts/2025_03_27_Prix_Abel/Masaki_Kashiwara_blackboard_PeterBadge_Typos1_TheAbelPrize.jpg" class="img-fluid figure-img" style="width:80.0%" alt="Masaki Kashiwara (crédit : Peter Bagde / Typos1 / The Abel Prize)"></a></p>
<figcaption>Masaki Kashiwara (crédit : Peter Bagde / Typos1 / The Abel Prize)</figcaption>
</figure>
</div>
<p>Selon l’article de <em>La Recherche</em> (que vous pouvez consulter <a href="https://www.larecherche.fr/prix-abel/le-japonais-masaki-kashiwara-se-voit-d%C3%A9cerner-le-prix-abel-2025-le-%C2%ABnobel-de-maths%C2%BB">ici</a>), cette récompense vient couronner les travaux fondamentaux de M. Kashiwara en analyse algébrique et en théorie des représentations. Plus précisément, elle salue son développement de la théorie des D-modules, un outil puissant qui permet d’étudier les équations différentielles avec des méthodes algébriques, et sa découverte des bases cristallines.</p>
<p>Les D-modules, au cœur de l’œuvre de Kashiwara, transforment l’étude des équations différentielles en un problème d’algèbre, permettant ainsi d’appliquer des techniques sophistiquées issues de la géométrie algébrique. Cette approche a révolutionné notre compréhension de ces équations, qui sont omniprésentes dans toutes les sciences, de la physique à l’économie.</p>
<p>Quant aux bases cristallines, elles offrent une perspective nouvelle sur les représentations des groupes quantiques. Ces groupes, qui généralisent les groupes de symétrie classiques, jouent un rôle essentiel en physique théorique, notamment dans l’étude des phénomènes quantiques. Les bases cristallines de Kashiwara ont permis de simplifier considérablement l’étude de ces représentations, révélant des structures cachées et ouvrant la voie à de nouvelles découvertes. Elles fournissent un cadre plus “simple” pour comprendre ces objets complexes, un peu comme si l’on passait de l’étude d’un solide complexe à celle de sa structure atomique sous-jacente.</p>
<p>Les contributions de Kashiwara ont non seulement enrichi ces domaines, mais ont également ouvert des perspectives inattendues, reliant des branches des mathématiques qui semblaient auparavant éloignées. Il a créé des ponts entre l’analyse algébrique, la théorie des représentations, la géométrie algébrique et la physique mathématique, démontrant ainsi l’unité profonde des mathématiques.</p>
<p>L’annonce de ce prix prestigieux met en lumière l’importance des contributions de Masaki Kashiwara au domaine des mathématiques. Ses recherches ont ouvert de nouvelles perspectives et ont eu un impact considérable sur de nombreux domaines connexes.</p>
<p>Le prix Abel, créé en 2002, honore les mathématiciens pour l’excellence de leurs travaux. Il est décerné chaque année par l’Académie norvégienne des sciences et des lettres. Cette institution prestigieuse, fondée en 1857, a pour mission de promouvoir la recherche scientifique et les études humanistes en Norvège. Le prix Abel, qui porte le nom du mathématicien norvégien Niels Henrik Abel (1802-1829), a été établi pour combler l’absence d’un prix Nobel en mathématiques. La décision d’attribuer le prix est prise par un comité international de mathématiciens renommés, garantissant ainsi la reconnaissance des contributions les plus exceptionnelles à ce domaine.</p>



 ]]></description>
  <category>Mathématiques</category>
  <category>Actualités</category>
  <guid>https://flallemand.fr/blog/posts/2025_03_27_Prix_Abel/</guid>
  <pubDate>Wed, 26 Mar 2025 23:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/2025_03_27_Prix_Abel/Masaki_Kashiwara_blackboard_PeterBadge_Typos1_TheAbelPrize.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Harold Hotelling : Un mathématicien au service de l’économie</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/Hotelling/</link>
  <description><![CDATA[ 





<p>Voici une ressource qui, je l’espère, élargira votre perspective sur les mathématiques et leur application dans le monde réel. Il s’agit d’un podcast de France Culture consacré à <strong>Harold Hotelling</strong>, un économiste et mathématicien dont l’œuvre, bien que parfois méconnue, a profondément influencé la pensée économique du 20e siècle.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="Harold_Hotelling.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Harold Hotelling"><img src="https://flallemand.fr/blog/posts/Hotelling/Harold_Hotelling.jpg" class="img-fluid figure-img" style="width:25.0%" alt="Harold Hotelling"></a></p>
<figcaption>Harold Hotelling</figcaption>
</figure>
</div>
<p>Lien vers le podcast : <a href="https://www.radiofrance.fr/franceculture/podcasts/entendez-vous-l-eco/entendez-vous-l-eco-emission-du-jeudi-27-fevrier-2025-8713597" target="_blank">Harold Hotelling : Un pionnier de l’économie redécouvert</a></p>
<section id="harold-hotelling-un-pionnier-de-léconomie-redécouvert" class="level3">
<h3 class="anchored" data-anchor-id="harold-hotelling-un-pionnier-de-léconomie-redécouvert">Harold Hotelling : Un pionnier de l’économie redécouvert</h3>
<p><strong>Marion Gaspard</strong> le décrit comme une figure du “Hall of Fame des économistes du 20e siècle”. Ce podcast met en lumière la récente redécouverte de Hotelling, grâce notamment aux travaux d’analyse et d’exploration de ses archives menés par Marion Gaspard et Antoine Missmer.</p>
<p><strong>Hotelling était convaincu que les mathématiques pouvaient et devaient être utilisées pour éclairer et résoudre des problèmes économiques et sociaux concrets</strong>. Il aspirait à mettre “les outils mathématiques au service du bien-être du plus grand nombre à travers une science économique plus claire, plus transparente et débarrassée de ces fausses croyances”. Pour Hotelling, “les mathématiques peuvent aller partout sur n’importe quel terrain et résoudre toutes les équations, y compris sociales et environnementales du moment qu’elle se confronte au réel”.</p>
</section>
<section id="thèmes-abordés-dans-le-podcast" class="level3">
<h3 class="anchored" data-anchor-id="thèmes-abordés-dans-le-podcast">Thèmes abordés dans le podcast</h3>
<p>Le podcast explore plusieurs contributions majeures de Hotelling :</p>
<ul>
<li><strong>Le principe de différenciation minimale</strong> : Ce concept, souvent illustré par la métaphore des marchands de glace cherchant la position optimale sur une plage pour maximiser leur clientèle, permet de comprendre les dynamiques de concurrence spatiale.</li>
<li><strong>La règle de Hotelling</strong> : Il s’agit d’un modèle mathématique qui cherche à prédire l’évolution du prix des ressources naturelles épuisables. <strong>Antoine Missmer</strong> précise que, selon ce modèle, le prix d’une ressource épuisable a tendance à croître au rythme du taux d’intérêt du marché. Cette règle a des implications importantes pour la gestion des ressources naturelles et la politique environnementale.</li>
<li><strong>L’économie spatiale</strong> : Hotelling a été un pionnier dans l’analyse de la localisation des entreprises et des activités économiques. Ses travaux aident à comprendre pourquoi des commerces similaires ont tendance à se regrouper.</li>
<li><strong>L’économie des ressources naturelles</strong> : Hotelling est réputé pour avoir proposé un modèle mathématique d’épuisement des ressources naturelles. Il s’intéressait particulièrement à la question de la dépréciation des actifs miniers et à leur valorisation fiscale.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="640x340_sc_sc_gettyimages-3066394.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Photo d’une exploitation pétrolière californienne en 1925. ©Getty"><img src="https://flallemand.fr/blog/posts/Hotelling/640x340_sc_sc_gettyimages-3066394.jpg" class="img-fluid figure-img" style="width:60.0%" alt="Photo d’une exploitation pétrolière californienne en 1925. ©Getty"></a></p>
<figcaption>Photo d’une exploitation pétrolière californienne en 1925. ©Getty</figcaption>
</figure>
</div>
</section>
<section id="lactualité-de-hotelling" class="level3">
<h3 class="anchored" data-anchor-id="lactualité-de-hotelling">L’actualité de Hotelling</h3>
<p>L’intérêt de Hotelling pour les problèmes concrets et sa conviction que les mathématiques peuvent éclairer les enjeux économiques et sociaux rendent son œuvre toujours pertinente aujourd’hui.</p>
<p>L’émission souligne que l’œuvre d’Hotelling a connu une période d’oubli relatif, notamment en raison de la technicité de ses articles, de l’évolution des priorités économiques et environnementales, et de l’utilisation de concepts mathématiques qui ont pu être perçus comme “démodés” après la Seconde Guerre mondiale. Cependant, sa redécouverte récente témoigne de la richesse et de la profondeur de sa pensée.</p>
<p>Je vous encourage vivement à écouter ce podcast. Il offre une perspective intéressante sur l’application des mathématiques à des problèmes complexes et met en lumière l’œuvre d’un économiste et mathématicien qui a marqué son époque et dont les idées continuent de résonner aujourd’hui.</p>
<p>Lien vers le podcast : <a href="https://www.radiofrance.fr/franceculture/podcasts/entendez-vous-l-eco/entendez-vous-l-eco-emission-du-jeudi-27-fevrier-2025-8713597" target="_blank">Harold Hotelling : Un pionnier de l’économie redécouvert</a></p>


</section>

 ]]></description>
  <category>Mathématiques</category>
  <category>Histoire</category>
  <category>Podcast</category>
  <guid>https://flallemand.fr/blog/posts/Hotelling/</guid>
  <pubDate>Thu, 27 Feb 2025 23:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/Hotelling/Harold_Hotelling.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Calculus Rhapsody : Quand l’analyse devient une chanson entraînante !</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/calculusRhapsody/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="image_video.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Calculus Rhapsody"><img src="https://flallemand.fr/blog/posts/calculusRhapsody/image_video.png" class="img-fluid figure-img" style="width:60.0%" alt="Calculus Rhapsody"></a></p>
<figcaption>Calculus Rhapsody</figcaption>
</figure>
</div>
<blockquote style="margin-left: 100px; font-style: italic;" class="blockquote">
I’m just a constant nobody loves me…<br> …<br> Multiply the integral by pi!<br> Pi tastes real good with whipped cream!<br> …<br> Oh baby… can’t define that point baby<br> It’s undefined<br> Goes to positive and negative infinity<br>
</blockquote>
<p>Avez-vous déjà imaginé apprendre l’analyse en écoutant une chanson ? “Calculus Rhapsody” le fait de manière ludique et mémorable. Cette chanson aborde les concepts fondamentaux du calcul différentiel et intégral d’une manière non conventionnelle.</p>
<p>La vidéo est ancienne (2009), mais toujours d’actualité. Elle est une parodie de la célèbre chanson “Bohemian Rhapsody” de Queen, avec des paroles adaptées au cours d’analyse. La chanson est interprétée par un groupe d’étudiants en mathématiques de l’Université de Northwestern. On devine qu’ils ont un peu souffert pour apprendre leur cours d’analyse, mais ils ont réussi à en faire une chanson entraînante et éducative.</p>
<blockquote style="margin-left: 100px; font-style: italic;" class="blockquote">
I’m a just a limit,<br> Defined analytically<br> Function’s continuous,<br> There’s no holes,<br> No sharp points,<br> Or asymptotes<br> Any way this graph goes,<br> It is differentiable for me..<br>
</blockquote>
<p>La chanson est un mélange d’humour, de musique et de mathématiques. On prend particulièrement plaisir à comprendre les paroles et à les associer aux concepts mathématiques connus. Toutes ces notions devraient parler à un élève français en fin de terminale, spécialité mathématiques.</p>
<blockquote style="margin-left: 100px; font-style: italic;" class="blockquote">
All year, in Calculus<br> We’ve learned so many things<br> About which we are gonna sing<br> We can find derivatives<br> And integrals<br> And the area enclosed between two curves…<br>
</blockquote>
<p>Voici la vidéo de “Calculus Rhapsody” :</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/uqwC41RDPyg?si=cxEiDTsfgaaoJBuA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>



 ]]></description>
  <category>Mathématiques</category>
  <category>Humour</category>
  <category>Vidéothèque</category>
  <guid>https://flallemand.fr/blog/posts/calculusRhapsody/</guid>
  <pubDate>Wed, 05 Feb 2025 23:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/calculusRhapsody/image_video.png" medium="image" type="image/png" height="73" width="144"/>
</item>
<item>
  <title>Tuto IA pour les profs : Créer des exercices à partir de podcasts.</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/tutoIA_podcast/</link>
  <description><![CDATA[ 





<section id="tuto-ia-pour-les-profs-créer-des-exercices-à-partir-de-podcasts." class="level1">
<h1>Tuto IA pour les profs : Créer des exercices à partir de podcasts.</h1>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Les podcasts sont un excellent moyen d’apprendre et de s’informer. Ils sont également un excellent moyen de pratiquer l’écoute et la compréhension orale. Dans ce tutoriel, nous allons voir comment utiliser l’intelligence artificielle pour créer des exercices à partir de podcasts.</p>
<p>Pour ce faire, nous allons utiliser l’IA Gemini de Google, dans sa version “2.0 Flash Thinking”, accessible entièrement gratuitement dans le <a href="https://aistudio.google.com" target="_blank">Google AI Studio</a>.</p>
<p><a href="Wavy_Tech-07_Single-03.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://flallemand.fr/blog/posts/tutoIA_podcast/Wavy_Tech-07_Single-03.jpg" class="img-fluid" style="width:40.0%"></a></p>
</section>
<section id="étape-1-télécharger-le-podcast" class="level2">
<h2 class="anchored" data-anchor-id="étape-1-télécharger-le-podcast">Étape 1 : Télécharger le podcast</h2>
<p>Pour permettre à l’IA de travailler sur le podcast, nous devons d’abord le télécharger. Nous allons prendre comme exemple un podcast de France Culture sur l’intelligence artificielle, dont la page est la suivante : <a href="https://www.radiofrance.fr/franceculture/podcasts/la-science-cqfd/ia-forte-la-paranoia-5901100" target="_blank">https://www.radiofrance.fr/franceculture/podcasts/la-science-cqfd/ia-forte-la-paranoia-5901100</a>.</p>
<p>Le site de France Culture ne permet pas de télécharger directement le podcast, mais vous pouvez utiliser un outil comme <code>youtube-dl</code> pour le faire. Par exemple, pour télécharger le podcast en format mp3, vous pouvez utiliser la commande suivante :</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">youtube-dl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-x</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--audio-format</span> mp3 https://www.radiofrance.fr/franceculture/podcasts/la-science-cqfd/ia-forte-la-paranoia-5901100</span></code></pre></div>
<p>Mais il est aussi possible d’utiliser l’IA pour télécharger le podcast. En effet, l’adresse du fichier mp3 est souvent présente dans le code source de la page web. Vous pouvez donc utiliser une IA pour extraire cette adresse et télécharger le fichier. Voici comment procéder.</p>
<ul>
<li>Charger la page du podcast dans votre navigateur. Faire un clic droit sur la page, puis sélectionner “Afficher le code source de la page” (ou équivalent).</li>
<li>Un nouvel onglet s’ouvre contenant le code source de la page. Avec le clavier, faire <code>Ctrl + A</code> pour tout sélectionner, puis <code>Ctrl + C</code> pour copier.</li>
<li>Dans Gemini, créer un nouveau prompt et entrer le texte suivant :</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Prompt
</div>
</div>
<div class="callout-body-container callout-body">
<p>Extrait du code source HTML ci-dessous l’URL du fichier mp3 du podcast de 59 minutes de France Culture sur l’IA forte.</p>
</div>
</div>
<p>Sauter une ligne, puis coller le code source copié précédemment avec <code>Ctrl + V</code> et valider avec <code>Ctrl + Entrée</code>.</p>
<p><a href="reponse_url.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://flallemand.fr/blog/posts/tutoIA_podcast/reponse_url.png" class="img-fluid"></a></p>
<ul>
<li>L’IA va alors extraire l’URL du fichier MP3 du podcast. Vous pouvez ensuite copier-coller cette URL dans votre navigateur internet pour ouvrir et télécharger le fichier (clic droit).</li>
</ul>
<p>Il existe aussi des outils en ligne et des logiciels pour télécharger des fichiers audio à partir d’une URL.</p>
<p>Supposons maintenant que vous avez téléchargé le podcast et que vous avez le fichier MP3 sur votre ordinateur.</p>
</section>
<section id="étape-2-résumé-du-podcast" class="level2">
<h2 class="anchored" data-anchor-id="étape-2-résumé-du-podcast">Étape 2 : Résumé du podcast</h2>
<p>Demander directement une transcription du podcast est possible, mais avec un fichier d’une heure, le texte à générer serait très long, et même trop long pour l’IA.</p>
<p>Nous allons donc plutôt lui demander un résumé structuré. Sachant que les IA donnent de bien meilleurs résultats si on leur demande de travailler étape par étape, il est préférable de faire un prompt bien détaillé. Voici comment procéder :</p>
<ul>
<li>Dans le Google AI Studio, créez un nouveau prompt et choisir le modèle “2.0 Flash Thinking”.</li>
<li>Entrez le texte suivant :</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Prompt
</div>
</div>
<div class="callout-body-container callout-body">
<p>Voici le fichier audio d’un podcast. Je souhaite un résumé structuré de ce podcast. Pour cela, je te demande de suivre les étapes suivantes :</p>
<ol type="1">
<li>Liste des invités de l’émission en précisant leurs fonctions.</li>
<li>Résumé de l’introduction : quelle est la thématique abordée ?</li>
<li>Résumé des points principaux abordés. Structure ta réponse en suivant bien le plan de l’émission. Indique des repères temporels pour que je puisse retrouver les passages dans le podcast.</li>
<li>Résumé de la conclusion.</li>
</ol>
</div>
</div>
<p>Ensuite, charger le fichier MP3 en cliquant sur le petit symbole (+) situé en bas à droite.</p>
<p>Valider le prompt avec <code>Ctrl + Entrée</code>, puis attendre que l’IA génère la transcription (c’est un peu long).</p>
<p><a href="reponse_ia_1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://flallemand.fr/blog/posts/tutoIA_podcast/reponse_ia_1.png" class="img-fluid" style="width:80.0%"></a></p>
</section>
<section id="étape-3-création-dexercices" class="level2">
<h2 class="anchored" data-anchor-id="étape-3-création-dexercices">Étape 3 : Création d’exercices</h2>
<p>L’exploitation pédagogique va dépendre de la discipline concernée et des envies du professeur !</p>
<p>Voici quelques idées d’exercices que vous pourriez créer à partir du résumé généré par l’IA :</p>
<ul>
<li><strong>Questions de compréhension</strong> : Créer des questions de compréhension sur les points principaux abordés dans le podcast.</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Prompt
</div>
</div>
<div class="callout-body-container callout-body">
<p>Je suis professeur et je veux vérifier que mes élèves ont bien écouté ce podcast et l’ont bien compris. Pour cela, je souhaite créer des questions de compréhension. Peux-tu me proposer 5 questions sur les points principaux abordés dans le podcast ?</p>
</div>
</div>
<p>En réponse, l’IA propose des questions qui peuvent être pertinentes ou pas, il faut faire le tri. Lors de mon test, elle a introduit des repères temporels pour quelques questions, mais ces repères sont fantaisistes :</p>
<p><a href="reponse_ia_2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://flallemand.fr/blog/posts/tutoIA_podcast/reponse_ia_2.png" class="img-fluid" style="width:80.0%"></a></p>
<ul>
<li><strong>Texte à trous</strong> : Créer un texte à trous à partir du résumé du podcast. Les élèves devront compléter les trous avec les mots manquants.</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Prompt
</div>
</div>
<div class="callout-body-container callout-body">
<p>Je suis professeur et je veux créer un texte à trous à partir du résumé du podcast. Peux-tu me proposer un texte à trous avec 10 mots manquants ? Indique la solution en dessous du texte.</p>
</div>
</div>
<p><a href="reponse_ia_3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://flallemand.fr/blog/posts/tutoIA_podcast/reponse_ia_3.png" class="img-fluid" style="width:80.0%"></a></p>
<ul>
<li><strong>QCM</strong> : Créer un QCM à partir du résumé du podcast. Les élèves devront choisir la bonne réponse parmi plusieurs propositions.</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Prompt
</div>
</div>
<div class="callout-body-container callout-body">
<p>Je suis professeur et je veux créer un QCM à partir du résumé du podcast. Peux-tu me proposer 5 questions avec chacune une unique bonne réponse. Indique quelle est la bonne réponse pour chaque question.</p>
</div>
</div>
<p><a href="reponse_ia_4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://flallemand.fr/blog/posts/tutoIA_podcast/reponse_ia_4.png" class="img-fluid" style="width:80.0%"></a></p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Les exemples présentés dans cet article ne sont que quelques idées d’exercices que vous pourriez créer à partir d’un podcast. Selon les disciplines, beaucoup d’autres types d’exercices sont possibles. L’IA peut vous aider à générer des exercices rapidement et facilement, mais il est important de vérifier la qualité des réponses générées.</p>


</section>
</section>

 ]]></description>
  <category>IA</category>
  <category>Tutos</category>
  <category>Podcast</category>
  <guid>https://flallemand.fr/blog/posts/tutoIA_podcast/</guid>
  <pubDate>Mon, 03 Feb 2025 23:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/tutoIA_podcast/Wavy_Tech-07_Single-03.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Les algorithmes : une épopée à travers le temps</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/2024_12_19_algos_interview/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Les algorithmes, autrefois domaine réservé des mathématiciens, ont connu une ascension fulgurante depuis les années 1970 avec la démocratisation de l’informatique. Aujourd’hui, ils sont omniprésents, façonnant notre quotidien et alimentant les avancées de l’intelligence artificielle. Mais que sont-ils exactement ? Comment ont-ils évolué ? Et quels défis posent-ils à notre société ?</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="rb_18131.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Image de rawpixel.com sur Freepik"><img src="https://flallemand.fr/blog/posts/2024_12_19_algos_interview/rb_18131.png" class="img-fluid figure-img" style="width:50.0%" alt="Image de rawpixel.com sur Freepik"></a></p>
<figcaption>Image de rawpixel.com sur Freepik</figcaption>
</figure>
</div>
</section>
<section id="définition-et-rôle-des-algorithmes" class="level2">
<h2 class="anchored" data-anchor-id="définition-et-rôle-des-algorithmes">Définition et rôle des algorithmes</h2>
<p>Comme l’explique Claire Mathieu, directrice de recherche CNRS et experte en algorithmique, dans <a href="https://www.epi.asso.fr/revue/articles/a2410d.htm#_ts1734600136930" target="_blank">une interview pour le site de l’EPI</a>, un algorithme est une méthode, une suite d’instructions élémentaires, qui permet de résoudre un problème pas à pas. C’est un concept simple, mais d’une puissance extraordinaire. Pensez à la méthode d’addition avec retenue que vous avez apprise à l’école primaire : c’est un algorithme qui vous permet de réaliser n’importe quelle addition.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="clairemathieucdf1.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Claire MATHIEU"><img src="https://flallemand.fr/blog/posts/2024_12_19_algos_interview/clairemathieucdf1.jpg" class="img-fluid figure-img" style="width:30.0%" alt="Claire MATHIEU"></a></p>
<figcaption>Claire MATHIEU</figcaption>
</figure>
</div>
<p>La recherche en algorithmique consiste à concevoir de nouveaux algorithmes ou à analyser ceux qui existent déjà pour comprendre leurs propriétés et les améliorer. Claire Mathieu, par exemple, se spécialise dans les algorithmes d’approximation. Ces algorithmes sont conçus pour trouver des solutions suffisamment bonnes à des problèmes complexes, pour lesquels la recherche de la solution optimale serait trop longue ou impossible. Imaginez un déménageur qui doit optimiser le remplissage de son camion : une solution approximative, mais rapide est bien plus utile qu’une solution parfaite qui prendrait des heures à calculer. Ces problèmes sont dits « NP-difficiles », comme l’explique l’article.</p>
</section>
<section id="une-histoire-riche-et-des-avancées-majeures" class="level2">
<h2 class="anchored" data-anchor-id="une-histoire-riche-et-des-avancées-majeures">Une histoire riche et des avancées majeures</h2>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<p>L’histoire des algorithmes ne date pas d’hier. Elle remonte à des siècles, avec des figures comme Al-Khwarizmi au 9e siècle, dont le nom a donné le mot « algorithme ». Il a formalisé des méthodes de résolution de problèmes mathématiques, posant les bases de ce qui allait devenir une discipline majeure.</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="1983_CPA_5426.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Al-Khwarizmi"><img src="https://flallemand.fr/blog/posts/2024_12_19_algos_interview/1983_CPA_5426.jpg" class="img-fluid figure-img" style="width:30.0%" alt="Al-Khwarizmi"></a></p>
<figcaption><a href="https://fr.wikipedia.org/wiki/Al-Khw%C3%A2rizm%C3%AE" target="_blank">Al-Khwarizmi</a></figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Un tournant majeur a eu lieu après la Seconde Guerre mondiale, avec la nécessité de résoudre des problèmes logistiques complexes pour la reconstruction. C’est à cette époque, en 1947, que George Dantzig a inventé l’<a href="https://fr.wikipedia.org/wiki/Algorithme_du_simplexe" target="_blank">algorithme du simplexe</a>, un outil puissant pour l’optimisation linéaire, encore utilisé aujourd’hui.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
L’algorithme du simplexe : trouver le meilleur chemin
</div>
</div>
<div class="callout-body-container callout-body">
<p>Imaginez que vous êtes dans un labyrinthe en 3D avec de nombreuses salles reliées par des couloirs. Chaque salle représente une solution possible à un problème et la hauteur de la salle représente la qualité de cette solution (plus c’est haut, mieux c’est). Votre objectif est de trouver la salle la plus haute, la meilleure solution.</p>
<p>L’algorithme du simplexe, c’est un peu comme une méthode pour explorer ce labyrinthe de manière intelligente.</p>
<p>Voici comment il fonctionne :</p>
<ol type="1">
<li><strong>Point de départ :</strong> Vous commencez dans une salle au hasard, une solution initiale.</li>
<li><strong>Regarder autour :</strong> Vous regardez toutes les salles voisines, celles directement connectées à la vôtre par un couloir.</li>
<li><strong>Monter :</strong> Si une salle voisine est plus haute que la vôtre, vous vous y déplacez. C’est comme si vous choisissiez la meilleure solution parmi celles qui sont immédiatement accessibles.</li>
<li><strong>Répéter :</strong> Vous répétez les étapes 2 et 3, en vous déplaçant de salle en salle, toujours vers une salle plus haute.</li>
<li><strong>Sommet :</strong> Vous continuez à monter jusqu’à atteindre une salle pour laquelle aucune des salles voisines n’est plus haute. Vous avez trouvé un sommet, une solution optimale localement !</li>
</ol>
<p><strong>En résumé :</strong> L’algorithme du simplexe trouve la meilleure solution en se déplaçant de proche en proche, en choisissant toujours la meilleure option parmi les solutions voisines, jusqu’à atteindre un sommet. Il est possible que l’on se retrouve bloqué dans un optimum local, qui n’est pas la solution optimale globale, dans ce cas, l’algorithme recommence en partant d’un nouveau point de départ.</p>
<p><strong>C’est comme un alpiniste qui gravit une montagne en suivant toujours le chemin le plus ascendant, jusqu’à atteindre un sommet.</strong> Bien sûr, dans la réalité, les problèmes traités par l’algorithme du simplexe sont bien plus complexes que des labyrinthes en 3D, mais le principe reste le même. C’est une méthode puissante pour trouver la meilleure solution à des problèmes d’optimisation, utilisée dans de nombreux domaines comme la logistique, la finance ou la production industrielle.</p>
</div>
</div>
<p>Mais c’est dans les années 1970 que les algorithmes ont véritablement pris leur essor, portés par la puissance croissante des ordinateurs. En 1971, Stephen Cook a formalisé la notion de « NP-difficulté », un concept clé de la théorie de la complexité, qui a révolutionné l’approche des problèmes algorithmiques. <a href="https://fr.wikipedia.org/wiki/21_probl%C3%A8mes_NP-complets_de_Karp" target="_blank">Richard Karp, en 1972, a ensuite identifié 21 problèmes « NP-complets »</a>, jetant les bases d’une conjecture fondamentale, « P est différent de NP », qui reste à ce jour un des grands mystères non résolus de l’informatique.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Problèmes NP-complets et la grande question P vs NP
</div>
</div>
<div class="callout-body-container callout-body">
<p>En informatique, il y a des problèmes faciles à résoudre et des problèmes difficiles. Pour les classer, on s’intéresse à deux grandes catégories : P et NP.</p>
<p><strong>P : Les problèmes “faciles”</strong></p>
<p>Imaginez que vous avez une liste de nombres et que vous voulez la trier par ordre croissant. C’est un problème “facile”, car il existe des algorithmes rapides pour le faire, même si la liste est très longue. On dit que ce problème appartient à la catégorie P (pour “Polynomial”). En gros, le temps nécessaire pour le résoudre augmente de manière raisonnable avec la taille du problème.</p>
<p><strong>NP : Les problèmes “vérifiables”</strong></p>
<p>Maintenant, imaginez un puzzle complexe, comme un Sudoku géant. Si quelqu’un vous donne une solution, vous pouvez facilement vérifier si elle est correcte en regardant si les règles du jeu sont respectées. Mais trouver la solution vous-même peut être très long et difficile ! On dit que ce problème appartient à la catégorie NP (pour “Non-déterministe Polynomial”). En gros, on peut vérifier une solution rapidement, mais trouver la solution peut prendre un temps qui explose avec la taille du problème.</p>
<p><strong>NP-complets : Les problèmes les plus difficiles de NP</strong></p>
<p>Parmi les problèmes NP, il y a une sous-catégorie spéciale : les problèmes NP-complets. Ce sont les plus difficiles de tous les problèmes NP. Si vous trouvez un algorithme rapide pour résoudre un seul problème NP-complet, alors vous aurez trouvé un algorithme rapide pour résoudre <em>tous</em> les problèmes NP !</p>
<p><strong>P = NP : Le grand mystère</strong></p>
<p>C’est là qu’arrive la grande question à un million de dollars : <strong>P est-il égal à NP ?</strong> Autrement dit, est-ce que tous les problèmes dont on peut vérifier la solution rapidement (NP) peuvent aussi être résolus rapidement (P) ?</p>
<ul>
<li><strong>Si P = NP :</strong> Cela voudrait dire qu’il existe des algorithmes rapides, encore inconnus, pour résoudre tous les problèmes NP, y compris les NP-complets. Ce serait une révolution, car de nombreux problèmes importants, comme l’optimisation de tournées de livraison ou la recherche de nouveaux médicaments, deviendraient beaucoup plus faciles à résoudre.</li>
<li><strong>Si P ≠ NP :</strong> Cela voudrait dire que certains problèmes sont fondamentalement difficiles à résoudre, même si on peut vérifier une solution rapidement. C’est ce que pense la plupart des informaticiens, mais personne n’a encore réussi à le prouver.</li>
</ul>
<p><strong>En résumé :</strong> La question P vs NP est l’un des plus grands mystères de l’informatique et des mathématiques. Sa résolution aurait des conséquences majeures sur de nombreux domaines scientifiques et industriels. C’est un défi qui stimule la recherche depuis des décennies !</p>
</div>
</div>
</section>
<section id="des-découvertes-récentes-et-des-impacts-concrets" class="level2">
<h2 class="anchored" data-anchor-id="des-découvertes-récentes-et-des-impacts-concrets">Des découvertes récentes et des impacts concrets</h2>
<p>Parmi les avancées plus récentes, l’algorithme de chiffrement RSA, inventé en 1978 par Rivest, Shamir et Adleman, a révolutionné la sécurité des communications sur Internet. Il permet d’échanger des messages chiffrés sans avoir à échanger une clé secrète au préalable, grâce à l’utilisation d’une clé publique et d’une clé privée (pour en savoir plus, suivre le lien situé sous la photo ci-dessous).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="RSA.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="RSA : Ron Rivest, Adi Shamir, Len Adleman Courtesy of Ron Rivest (source Intersitices.info)"><img src="https://flallemand.fr/blog/posts/2024_12_19_algos_interview/RSA.jpg" class="img-fluid figure-img" style="width:50.0%" alt="RSA : Ron Rivest, Adi Shamir, Len Adleman Courtesy of Ron Rivest (source Intersitices.info)"></a></p>
<figcaption>RSA : Ron Rivest, Adi Shamir, Len Adleman Courtesy of Ron Rivest (source <a href="https://interstices.info/nombres-premiers-et-cryptologie-lalgorithme-rsa/" target="_blank">Intersitices.info</a>)</figcaption>
</figure>
</div>
<p>L’arrivée du big data a également nécessité de nouveaux types d’algorithmes, capables de traiter des flux massifs de données. <a href="https://fr.wikipedia.org/wiki/Algorithme_de_Flajolet_et_Martin" target="_blank">L’algorithme de Flajolet et Martin</a>, datant de 1985, est un exemple marquant. Il permet d’estimer le nombre d’éléments distincts dans un flux de données, ce qui est crucial pour des applications comme la détection d’anomalies dans le trafic réseau.</p>
<p>L’impact des algorithmes ne se limite pas à l’informatique. En biologie moléculaire, par exemple, ils ont permis d’accélérer le séquençage des génomes, ouvrant des perspectives inédites pour la recherche médicale.</p>
</section>
<section id="des-défis-éthiques-et-sociétaux" class="level2">
<h2 class="anchored" data-anchor-id="des-défis-éthiques-et-sociétaux">Des défis éthiques et sociétaux</h2>
<p>L’omniprésence des algorithmes dans notre société soulève des questions éthiques et sociétales importantes. Comme le souligne Claire Mathieu, la rapidité et l’efficacité ne suffisent plus. Les algorithmes doivent aussi être transparents et équitables. Mais comment garantir cette transparence ? Ouvrir le code ne suffit pas. Il faut, selon Claire Mathieu, une réflexion approfondie, impliquant scientifiques et citoyens, pour définir ce qu’est un algorithme transparent et quelles garanties sont attendues.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="lemonde.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="Article paru dans le journal Le Monde en 2018"><img src="https://flallemand.fr/blog/posts/2024_12_19_algos_interview/lemonde.png" class="img-fluid figure-img" style="width:50.0%" alt="Article paru dans le journal Le Monde en 2018"></a></p>
<figcaption><a href="https://www.lemonde.fr/pixels/article/2018/02/12/une-etude-demontre-les-biais-de-la-reconnaissance-faciale-plus-efficace-sur-les-hommes-blancs_5255663_4408996.html" target="_blank">Article paru dans le journal Le Monde en 2018</a></figcaption>
</figure>
</div>
<p>Les algorithmes peuvent même influencer le fonctionnement démocratique, comme le montre l’exemple du redécoupage électoral aux États-Unis. L’utilisation d’algorithmes pour optimiser ce redécoupage, en fonction de lois conçues avant l’ère numérique, pose des risques de manipulation des résultats électoraux.</p>
</section>
<section id="les-enjeux-de-demain" class="level2">
<h2 class="anchored" data-anchor-id="les-enjeux-de-demain">Les enjeux de demain</h2>
<p>L’intelligence artificielle et les réseaux de neurones profonds ouvrent de nouveaux défis pour l’algorithmique. Comprendre comment les résultats de ces algorithmes dépendent des données d’entrée est un enjeu majeur. Claire Mathieu suggère d’appliquer ces algorithmes à des problèmes classiques déjà bien étudiés pour mieux les comprendre.</p>
<p>Enfin, la lutte contre le réchauffement climatique va, selon elle, devenir un domaine d’application crucial pour l’algorithmique. Il faudra inventer des algorithmes moins gourmands en ressources et en énergie, et capables de nous aider à réduire notre empreinte carbone.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="2148884835.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-6" title="Image de fr.freepik.com"><img src="https://flallemand.fr/blog/posts/2024_12_19_algos_interview/2148884835.jpg" class="img-fluid figure-img" style="width:50.0%" alt="Image de fr.freepik.com"></a></p>
<figcaption>Image de fr.freepik.com</figcaption>
</figure>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>En conclusion, les algorithmes sont bien plus que de simples outils techniques. Ils sont au cœur d’une épopée scientifique et sociétale qui façonne notre présent et notre futur. Les comprendre, les maîtriser et les utiliser de manière éthique est un défi majeur pour les années à venir. L’interview de Claire Mathieu nous offre un éclairage précieux sur cette histoire et sur les enjeux qui nous attendent.</p>
<p><a href="futur.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://flallemand.fr/blog/posts/2024_12_19_algos_interview/futur.png" class="img-fluid"></a></p>


</section>

 ]]></description>
  <category>Algorithmique</category>
  <category>Informatique</category>
  <category>IA</category>
  <category>Société</category>
  <guid>https://flallemand.fr/blog/posts/2024_12_19_algos_interview/</guid>
  <pubDate>Wed, 25 Dec 2024 23:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/2024_12_19_algos_interview/rb_18131.png" medium="image" type="image/png" height="90" width="144"/>
</item>
<item>
  <title>Nos amis Google, Wikipédia et ChatGPT sont-ils vraiment impartiaux ?</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/2024_18_12_biais_sites/</link>
  <description><![CDATA[ 





<p>On vit dans un monde formidable, n’est-ce pas ? Un clic, et hop ! On a accès à une montagne d’informations. Wikipédia, Google, YouTube, et plus récemment ChatGPT, sont devenus nos compagnons inséparables dans la quête du savoir. Mais vous êtes-vous déjà demandé si ces outils étaient vraiment neutres, impartiaux, et nous donnaient une vision objective du monde ? C’est la question que s’est posée une équipe de chercheurs, et leurs conclusions, relayées par Laurent Bloch dans un article passionnant, sont pour le moins… éclairantes, et même un peu dérangeantes !</p>
<p><a href="article_biais_fig4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://flallemand.fr/blog/posts/2024_18_12_biais_sites/article_biais_fig4.png" class="img-fluid" style="width:50.0%"></a></p>
<p><strong>Un éléphant, six aveugles et plein de malentendus : l’allégorie qui résume tout</strong></p>
<p>Imaginez six aveugles qui rencontrent un éléphant. L’un touche la trompe et dit “c’est un serpent !”. Un autre touche une défense et s’exclame “mais non, c’est une lance !”. Un troisième palpe l’oreille et déclare : “Vous vous trompez tous les deux, c’est un éventail !”. Le quatrième, les mains sur une patte, affirme : “Pas du tout, c’est un arbre !”. Le cinquième, appuyé contre le flanc de l’animal, insiste : “Mais non, c’est un mur !”. Et le dernier, tenant la queue, conclut : “Vous n’y êtes pas, c’est une corde !”. Vous voyez le topo ? Eh bien, c’est un peu ce qui se passe quand on interroge le web dans différentes langues. Chaque langue nous donne une perspective différente, partielle, et parfois complètement à côté de la plaque, sur un même sujet.</p>
<p><a href="article_biais_fig2.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://flallemand.fr/blog/posts/2024_18_12_biais_sites/article_biais_fig2.jpg" class="img-fluid" style="width:50.0%"></a></p>
<p>L’étude menée par Queenie Luo, Michael J. Puett et Michael D. Smith, et publiée dans les <em>Communications of the ACM</em> (CACM), le montre clairement. Vous pouvez lire l’article original ici : <a href="https://cacm.acm.org/practice/a-perspectival-mirror-of-the-elephant/" target="_blank">https://cacm.acm.org/practice/a-perspectival-mirror-of-the-elephant/</a>. Ils ont choisi deux thèmes, le bouddhisme et le libéralisme, et ont analysé les réponses fournies par Google, YouTube, Wikipédia et ChatGPT dans douze langues différentes (anglais, français, allemand, chinois, thaï, vietnamien, italien, espagnol, russe, coréen, népalais et japonais). Douze langues, c’est pas mal, ça donne un bon aperçu de la diversité des points de vue ! Laurent Bloch, dans son article disponible ici <a href="https://laurentbloch.net/MySpip3/Biais-selon-la-langue-dans-Wikipedia-Google-ChatGPT-et-YouTube" target="_blank">https://laurentbloch.net/MySpip3/Biais-selon-la-langue-dans-Wikipedia-Google-ChatGPT-et-YouTube</a> en fait un résumé très accessible.</p>
<p><a href="article_biais_fig1.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://flallemand.fr/blog/posts/2024_18_12_biais_sites/article_biais_fig1.jpg" class="img-fluid" style="width:50.0%"></a></p>
<p><strong>Le bouddhisme vu par l’Occident, l’Asie… et les algorithmes : un kaléidoscope de perceptions</strong></p>
<p>Prenons le bouddhisme. Vaste sujet, n’est-ce pas ? Vous cherchez des infos en français ou en allemand ? Google vous sortira des sites historiques et encyclopédiques. Logique. On est plutôt cartésiens, nous autres ! Vous faites la même recherche en anglais ? Là, surprise, on vous propose plutôt des centres de méditation et de retraites spirituelles. En gros, le bouddhisme “new age” à l’occidentale, un peu comme un produit de consommation courante. En chinois, on vous sert la version officielle du parti, avec un focus sur l’organisation des monastères. Pas de place pour la spiritualité débridée, il faut que ça rentre dans les cases ! Et en thaï, on vous explique la différence entre bouddhisme et culte des fantômes, parce que là-bas, les esprits, c’est du sérieux. Chaque langue reflète la vision dominante de sa communauté. Et c’est là que ça devient intéressant : l’article de recherche nous dit que ces résultats ne sont pas le fruit du hasard. Ils sont “cohérents” avec la manière dont le bouddhisme est perçu dans chaque communauté linguistique. En gros, Google &amp; co nous renvoient un miroir de nos propres préjugés ! Flippant, non ?</p>
<p>L’étude va plus loin et analyse les résultats pour des requêtes plus précises, comme “Karma dans le bouddhisme” ou “Gautama Bouddha”. Et là, c’est encore plus flagrant. En Europe, on vous explique les concepts de base, comme si vous étiez un débutant. En Asie, on rentre dans le vif du sujet, avec des questions pratiques (comment se débarrasser du mauvais karma, par exemple). Pour le pauvre Chögyam Trungpa, un maître bouddhiste controversé, les anglophones minimisent ses frasques, tandis que les sinophones s’étalent sur les détails croustillants. Le Dalaï Lama ? Un pacifiste pour les uns, un agitateur politique pour les autres. Bref, on est loin d’une vision objective et globale !</p>
<p><strong>Le libéralisme : un concept à géométrie variable, un mot qui fâche (ou pas)</strong></p>
<p>Et le libéralisme dans tout ça ? Accrochez-vous, c’est encore plus tordu ! Pour un Américain, un libéral, c’est presque un gauchiste, un progressiste qui croit aux droits individuels et à l’égalité. Mais pour un Français, c’est plutôt un type de droite, genre défenseur du libre marché et de la loi de la jungle économique. Du coup, les résultats de recherche varient énormément. En anglais, le libéralisme a plutôt bonne presse. On vous parle de liberté, d’égalité des chances, de libre entreprise. En français, allemand, italien ou espagnol, c’est une autre histoire… Disons que l’image est moins reluisante, avec des critiques du néolibéralisme et de ses dérives.</p>
<p>Dans de nombreux pays asiatiques, l’accent mis par le libéralisme sur la liberté individuelle est perçu comme une menace pour l’ordre social et les valeurs traditionnelles. Et en russe, YouTube associe libéralisme et démocratie, avec un soupçon de nostalgie pour l’URSS et une pointe d’inquiétude sur les conséquences de la chute du communisme. On ne nagera pas dans l’objectivité ici non plus !</p>
<p><strong>ChatGPT : l’intelligence artificielle qui pense en anglais… et qui nous enferme dans nos bulles</strong></p>
<p>Et ChatGPT, notre nouvel ami l’IA, qu’en pense-t-il de tout ça ? Eh bien, l’étude nous apprend que la version testée à l’époque (février 2023) a été principalement entraînée sur des données en anglais. Du coup, même si vous lui posez une question en français ou en chinois, il va vous répondre avec une perspective anglo-américaine. C’est comme s’il avait des œillères ! L’article précise que c’est un peu différent avec la version intégrée à Bing, qui se base sur la langue de la requête pour choisir ses sources. Mais dans les deux cas, on a un problème : on croit qu’on a accès à une information objective, alors qu’on est enfermé dans une bulle linguistique et culturelle.</p>
<p><strong>YouTube : l’amplificateur d’ethnocentrisme en vidéo</strong></p>
<p>YouTube, c’est encore une autre paire de manches. L’étude montre que les vidéos proposées sont souvent produites par des membres du groupe ethnique dominant de la communauté linguistique. Et comme le classement dépend de la popularité, on se retrouve avec une vision encore plus biaisée et réductrice que sur Google. Les chercheurs parlent d’une “expérience ethnocentrique profonde”, amplifiée par l’aspect visuel et émotionnel des vidéos. On voit des visages, on entend des voix, on ressent des émotions… et on se laisse encore plus facilement influencer.</p>
<p><strong>Wikipédia : un peu mieux, mais pas parfait</strong></p>
<p>Et Wikipédia, notre encyclopédie collaborative préférée, est-elle plus objective ? Disons qu’elle s’en sort un peu mieux. Les articles sont écrits dans un style neutre et factuel, et les auteurs s’efforcent de citer des sources variées. Mais l’étude montre que, là aussi, il y a des différences selon les langues. L’article français sur le bouddhisme s’attarde sur le débat “religion ou philosophie”, typiquement franco-français, tandis que l’article anglais cite plein de livres sur la pleine conscience, reflet de la popularité de cette pratique aux États-Unis. Pour le libéralisme, l’article français remonte à l’Antiquité, tandis que l’italien se concentre sur le rapport entre libéralisme et religion. Bref, même Wikipédia n’échappe pas complètement aux biais culturels.</p>
<p><strong>Alors, on fait quoi ? Faut-il jeter nos ordinateurs et retourner aux livres ?</strong></p>
<p>Pas forcément ! Cette étude est un peu flippante, certes. Elle montre que nos outils de recherche préférés ne sont pas de simples fenêtres neutres sur le monde, mais qu’ils sont influencés par les biais culturels et politiques des communautés linguistiques. Le risque, c’est de se retrouver enfermé dans une bulle, à ne voir que ce qui conforte nos préjugés, et de ne jamais être confronté à d’autres points de vue. Imaginez par exemple un jeune qui ferait ses recherches scolaires uniquement sur la base de ces résultats biaisés, sans jamais se douter qu’il n’a qu’une vision tronquée et orientée de la réalité. C’est un peu comme si on regardait le monde par le petit bout de la lorgnette, en pensant qu’on a une vue d’ensemble.</p>
<p>Mais, comme le souligne Laurent Bloch, tout n’est pas perdu. Le fait que ces plateformes soient accessibles partout dans le monde est aussi une chance. On peut les utiliser pour confronter les points de vue, découvrir d’autres cultures, et se faire une opinion plus nuancée et diversifiée. Il suffit d’être un peu malin et de ne pas se laisser endormir par la facilité.</p>
<p>Alors, la prochaine fois que vous ferez une recherche en ligne, gardez l’esprit critique ! Changez de langue, comparez les résultats, et n’oubliez pas que la vérité est souvent un éléphant qu’on ne peut appréhender que sous tous les angles. Il faut aller la chercher par nous-mêmes, en croisant les sources, en se méfiant des évidences, et en gardant à l’esprit que nos outils numériques, aussi pratiques soient-ils, ne sont pas infaillibles. Ils ne sont que le reflet de nos propres biais, et c’est à nous de les déjouer pour nous forger une vision du monde plus juste, plus complète, et plus ouverte.</p>
<p><a href="article_biais_fig3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://flallemand.fr/blog/posts/2024_18_12_biais_sites/article_biais_fig3.png" class="img-fluid" style="width:50.0%"></a></p>



 ]]></description>
  <category>Informatique</category>
  <category>Internet</category>
  <category>Société</category>
  <guid>https://flallemand.fr/blog/posts/2024_18_12_biais_sites/</guid>
  <pubDate>Wed, 18 Dec 2024 23:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/2024_18_12_biais_sites/article_biais_fig2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Tuto pyxel : Pluie de cerises et score</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/pyxel_tuto4_cerises/</link>
  <description><![CDATA[ 





<p>Ce tuto fait suite au précédent : <a href="../../posts/pyxel_tuto3_fond/index.html">Tuto pyxel : Ajouter un fond</a>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Objectifs du tutoriel
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Créer un objet Cerise qui tombe du ciel ;</li>
<li>Générer une pluie de cerises à intervalles aléatoires ;</li>
<li>Détecter les collisions entre le personnage et les cerises ;</li>
<li>Afficher le score du joueur.</li>
</ul>
</div>
</div>
<section id="création-de-lobjet-cerise" class="level2">
<h2 class="anchored" data-anchor-id="création-de-lobjet-cerise">Création de l’objet Cerise</h2>
<p>Nous allons commencer par créer une classe <code>Cerise</code> qui permettra de gérer le comportement et l’affichage des cerises. Chaque cerise aura une position <img src="https://latex.codecogs.com/png.latex?(x,%20y)"> et une vitesse de chute.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Cerise:</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, y):</span>
<span id="cb1-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb1-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y</span>
<span id="cb1-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Vitesse de chute de la cerise</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># La cerise tombe</span></span>
<span id="cb1-9"></span>
<span id="cb1-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-11">        pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Affichage de la cerise</span></span></code></pre></div>
<p>Explications :</p>
<ul>
<li>Lignes 2-4 : Le constructeur <code>__init__</code> initialise la position <img src="https://latex.codecogs.com/png.latex?(x,%20y)"> de la cerise et sa vitesse de chute.</li>
<li>Ligne 7 : La méthode <code>update</code> met à jour la position verticale <img src="https://latex.codecogs.com/png.latex?y"> de la cerise en fonction de sa vitesse, simulant ainsi la chute.</li>
<li>Ligne 10 : La méthode <code>draw</code> affiche la cerise à l’écran à l’aide de <code>pyxel.blt</code>. On suppose ici que les coordonnées de la cerise dans le fichier de ressources sont (32, 0) et que ses dimensions sont 16x16 pixels. La couleur 12 (bleu) est rendue transparente.</li>
</ul>
</section>
<section id="gestion-de-la-pluie-de-cerises" class="level2">
<h2 class="anchored" data-anchor-id="gestion-de-la-pluie-de-cerises">Gestion de la pluie de cerises</h2>
<p>Maintenant, nous allons gérer la pluie de cerises dans la classe <code>App</code>. Nous utiliserons une liste <code>self.cerises</code> pour stocker les cerises actuellement présentes à l’écran et la fonction <code>pyxel.rndi</code> pour générer des cerises à des positions horizontales aléatoires.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Idée à retenir
</div>
</div>
<div class="callout-body-container callout-body">
<p>L’utilisation de <code>pyxel.rndi</code> permet de générer des nombres entiers aléatoires. C’est très pratique pour créer des événements aléatoires dans un jeu.</p>
</div>
</div>
<p>On ajoute ces éléments dans la méthode <code>__init__</code> de la classe <code>App</code>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># classe App</span></span>
<span id="cb2-2">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... (code précédent)</span></span>
<span id="cb2-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cerises <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># liste des cerises</span></span>
<span id="cb2-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-5">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span></code></pre></div>
<p>Ensuite, on modifie la méthode <code>update</code> pour ajouter une nouvelle cerise à un intervalle aléatoire, mettre à jour chaque cerise, et supprimer celles qui sortent de l’écran :</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># classe App</span></span>
<span id="cb3-2">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage.update()</span>
<span id="cb3-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.foret.update()</span>
<span id="cb3-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> nuage <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nuages:</span>
<span id="cb3-5">            nuage.update()</span>
<span id="cb3-6">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... (code précédent pour la gestion des nuages)</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"></span>
<span id="cb3-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pyxel.frame_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> pyxel.rndi(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Générer une cerise toutes les 1 à 2 secondes (à 30 fps)</span></span>
<span id="cb3-10">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cerises.append(Cerise(pyxel.rndi(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, pyxel.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Position aléatoire en x</span></span>
<span id="cb3-11">            </span>
<span id="cb3-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> cerise <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cerises:</span>
<span id="cb3-13">            cerise.update()</span>
<span id="cb3-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cerise.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> pyxel.height:</span>
<span id="cb3-15">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cerises.remove(cerise)</span></code></pre></div>
<p>Explications :</p>
<ul>
<li>Ligne 8&nbsp;: on génère une nouvelle cerise à un intervalle aléatoire compris entre 30 et 60&nbsp;frames. Sachant que le jeu tourne à 30&nbsp;fps, cela correspond à une nouvelle cerise toutes les 1&nbsp;à 2&nbsp;secondes.</li>
<li>Ligne 9&nbsp;: la cerise apparaît juste au-dessus de la fenêtre à une abscisse aléatoire.</li>
<li>Lignes 11 à&nbsp;13&nbsp;: la boucle <code>for</code> met à jour la position verticale de chaque cerise et les supprime lorsqu’elles passent en dessous du bas de la fenêtre.</li>
</ul>
</section>
<section id="détection-des-collisions" class="level2">
<h2 class="anchored" data-anchor-id="détection-des-collisions">Détection des collisions</h2>
<p>Pour détecter les collisions entre le personnage et les cerises, nous allons ajouter du code dans la méthode <code>update</code> de la classe <code>App</code>.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># class App</span></span>
<span id="cb4-2">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... (code précédent)</span></span>
<span id="cb4-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> cerise <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cerises:</span>
<span id="cb4-4">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#... (code précédent pour la gestion des cerises)</span></span>
<span id="cb4-5"></span>
<span id="cb4-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (</span>
<span id="cb4-7">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(cerise.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage.x_personnage) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(cerise.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb4-8">            ):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Collision détectée !</span></span>
<span id="cb4-9">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cerises.remove(cerise)</span>
<span id="cb4-10">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<p>Explications :</p>
<ul>
<li>Lignes 6 à 8 : On teste si la distance entre le personnage et la cerise est inférieure à 16 pixels, ce qui signifie une collision. Si une collision est détectée, la cerise est retirée de l’écran et le score du joueur est incrémenté.</li>
</ul>
</section>
<section id="affichage-du-score" class="level2">
<h2 class="anchored" data-anchor-id="affichage-du-score">Affichage du score</h2>
<p>Enfin, nous allons afficher le score en haut à gauche de l’écran. Pour cela, nous modifions la méthode <code>draw</code> de la classe <code>App</code>.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># classe App</span></span>
<span id="cb5-2">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb5-3"></span>
<span id="cb5-4">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... (code précédent pour le dessin du fond)</span></span>
<span id="cb5-5"></span>
<span id="cb5-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> cerise <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cerises:</span>
<span id="cb5-7">            cerise.draw()</span>
<span id="cb5-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage.draw()</span>
<span id="cb5-9">        pyxel.text(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>score<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, pyxel.COLOR_WHITE) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Affichage du score</span></span></code></pre></div>
<p>Explications :</p>
<ul>
<li>Ligne 8: on affiche le score à l’écran en blanc aux coordonnées (5, 5)</li>
</ul>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Dans ce tutoriel, nous avons appris à faire pleuvoir des cerises dans notre application Pyxel. Nous avons créé une classe <code>Cerise</code> pour gérer les cerises, généré une pluie de cerises à intervalles aléatoires, détecté les collisions entre le personnage et les cerises, et affiché le score du joueur. Vous pouvez maintenant tester votre jeu et voir si vous pouvez attraper toutes les cerises !</p>
<p><a href="image_jeu.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://flallemand.fr/blog/posts/pyxel_tuto4_cerises/image_jeu.gif" class="img-fluid" style="width:50.0%"></a></p>


</section>

 ]]></description>
  <category>Python</category>
  <category>NSI</category>
  <category>Programmation</category>
  <category>Pyxel</category>
  <category>Nuit du code</category>
  <guid>https://flallemand.fr/blog/posts/pyxel_tuto4_cerises/</guid>
  <pubDate>Mon, 25 Nov 2024 23:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/pyxel_tuto4_cerises/image_jeu.png" medium="image" type="image/png" height="77" width="144"/>
</item>
<item>
  <title>Record battu pour les nombres premiers !</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/record-battu-pour-les-nombres-premiers/</link>
  <description><![CDATA[ 





<section id="la-découverte-dun-nombre-premier-record-une-nouvelle-ère-pour-gimps" class="level2">
<h2 class="anchored" data-anchor-id="la-découverte-dun-nombre-premier-record-une-nouvelle-ère-pour-gimps">La Découverte d’un Nombre Premier Record : Une Nouvelle ère pour GIMPS</h2>
<p>Le 21 octobre 2024, le projet GIMPS (Great Internet Mersenne Prime Search) a annoncé la découverte d’un nouveau nombre premier de Mersenne, 2<sup>136279841</sup>-1, composé de 41 024 320 chiffres. Cette découverte marque un tournant dans l’histoire de GIMPS, car elle met fin à 28 années de domination des ordinateurs personnels dans la recherche de ces nombres rares.</p>
<p>En effet, ce nombre premier record a été découvert grâce à l’utilisation de GPUs (processeurs graphiques), une technologie initialement utilisée pour les cartes vidéo et le minage de cryptomonnaies, mais qui est aujourd’hui au cœur de la révolution de l’intelligence artificielle. Mihai Preda, un contributeur de GIMPS, a développé un logiciel de recherche de nombres premiers de Mersenne compatible avec les GPUs en 2017. Luke Durant, un ancien employé de NVIDIA et fervent partisan des GPUs, a vu en cette technologie une opportunité unique pour GIMPS.</p>
<p>Durant a mis en place une infrastructure pour exécuter et maintenir une suite de logiciels GIMPS sur plusieurs serveurs GPU, créant ainsi un “supercalculateur cloud”. Ce réseau, composé de milliers de GPUs répartis dans 24 centres de données et 17 pays, a permis à Durant de découvrir le nouveau nombre premier après près d’un an de recherche. Le 11 octobre 2024, un GPU NVIDIA A100 à Dublin, en Irlande, a signalé que M136279841 était probablement premier, et le 12 octobre, un GPU NVIDIA H100 à San Antonio, au Texas, a confirmé sa primalité à l’aide d’un <strong>test de Lucas-Lehmer</strong>.</p>
<p>Une fois le nombre premier probable identifié, plusieurs tests de Lucas-Lehmer ont été effectués par différents contributeurs de GIMPS utilisant différents programmes et matériels pour confirmer la découverte. Cette collaboration a impliqué Aaron Blosser utilisant Prime95 sur des CPUs Intel, ainsi que Durant, James Heinrich, Serge Batalov, Ken Kriesel et Preda utilisant PRPLL/GpuOwl sur des GPUs AMD et NVIDIA. La primalité du nombre a été confirmée le 19 octobre par Serge Batalov utilisant Mlucas sur un CPU Intel.</p>
<p><strong>GIMPS</strong>, fondé en 1996 par George Woltman, est un projet collaboratif qui rassemble des milliers de bénévoles à la recherche de <strong>nombres premiers de Mersenne</strong>. Ces nombres premiers, nommés d’après le moine français Marin Mersenne, sont de la forme 2<sup>P</sup>-1, où P est un nombre premier. GIMPS a permis de découvrir les 18 derniers nombres premiers de Mersenne, dont le nouveau record. Le projet offre une récompense de 3 000 $ à toute personne découvrant un nouveau nombre premier.</p>
<p>Luke Durant, le découvreur du 52e nombre premier de Mersenne, est l’un des contributeurs les plus prolifiques de GIMPS. Son investissement dans le projet, qui a impliqué des dépenses considérables pour l’utilisation de GPUs dans le cloud, témoigne de son engagement envers la recherche mathématique. Durant prévoit de faire don de sa récompense de 3 000 $ au département de mathématiques de l’Alabama School of Math and Science.</p>
<p>Cette découverte marque une étape importante dans l’histoire de GIMPS et de la recherche de nombres premiers. L’utilisation de GPUs dans le cloud ouvre de nouvelles perspectives pour le projet et pourrait accélérer la découverte de futurs nombres premiers de Mersenne. La collaboration entre les bénévoles et l’utilisation de technologies innovantes ont permis de repousser les limites de la connaissance mathématique.</p>
</section>
<section id="que-sont-les-nombres-premiers-de-mersenne" class="level2">
<h2 class="anchored" data-anchor-id="que-sont-les-nombres-premiers-de-mersenne">Que sont les nombres premiers de Mersenne ?</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="Marin_mersenne.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Marin Mersenne"><img src="https://flallemand.fr/blog/posts/record-battu-pour-les-nombres-premiers/Marin_mersenne.jpg" class="img-fluid figure-img" alt="Marin Mersenne"></a></p>
<figcaption>Marin Mersenne</figcaption>
</figure>
</div>
<p>Les nombres premiers de Mersenne sont des nombres premiers de la forme <img src="https://latex.codecogs.com/png.latex?2%5EP-1">, où <img src="https://latex.codecogs.com/png.latex?P"> est un nombre premier. Ils sont nommés d’après le moine français Marin Mersenne, qui a étudié ces nombres au 17e siècle. Les nombres premiers de Mersenne sont particulièrement intéressants pour les mathématiciens en raison de leur forme simple et de leurs propriétés mathématiques. Ils ont des applications dans divers domaines des mathématiques et de l’informatique, notamment la cryptographie et la théorie des nombres.</p>
<p>Tous les nombres de la forme <img src="https://latex.codecogs.com/png.latex?2%5EP-1"> ne sont pas des nombres premiers de Mersenne. Par exemple, <img src="https://latex.codecogs.com/png.latex?2%5E%7B11%7D-1=2047"> n’est pas un nombre premier, car il peut être décomposé en <img src="https://latex.codecogs.com/png.latex?23%20%5Ctimes%2089">. La recherche de nombres premiers de Mersenne est un domaine actif de la recherche mathématique, et de nombreux projets, dont GIMPS, sont dédiés à leur découverte.</p>
</section>
<section id="quelques-explications-sur-le-teste-de-lucas-lehmer" class="level2">
<h2 class="anchored" data-anchor-id="quelques-explications-sur-le-teste-de-lucas-lehmer">Quelques explications sur le teste de Lucas-Lehmer</h2>
<p>Le test de Lucas-Lehmer est une méthode utilisée pour déterminer si un nombre de Mersenne est premier. Il repose sur une suite récurrente définie par la relation de récurrence suivante :</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AS_0%20=%204,%20%5Cquad%20S_%7Bn+1%7D%20=%20S_n%5E2%20-%202%0A"></p>
<p>Un nombre de Mersenne <img src="https://latex.codecogs.com/png.latex?2%5EP-1"> est premier si et seulement si <img src="https://latex.codecogs.com/png.latex?S_%7BP-2%7D%20%5Cequiv%200%20%5Cpmod%7B2%5EP-1%7D">. Autrement dit, si <img src="https://latex.codecogs.com/png.latex?S_%7BP-2%7D"> est divisible par <img src="https://latex.codecogs.com/png.latex?2%5EP-1">, alors le nombre de Mersenne est premier.</p>
<p>Le test de Lucas-Lehmer est particulièrement efficace pour les nombres de Mersenne, car il permet de vérifier leur primalité en un temps polynomial par rapport à la taille du nombre. Cela en fait un outil précieux pour la recherche de nombres premiers de Mersenne.</p>
<p>Voici une fonction Python qui implémente le test de Lucas-Lehmer pour vérifier si un nombre de Mersenne est premier :</p>
<div id="eaec5ff4" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> lucas_lehmer(p):</span>
<span id="cb1-2">    s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb1-3">    m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb1-5">        s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> m</span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test avec p = 7 (nombre de Mersenne 2^7 - 1 = 127 premier)</span></span>
<span id="cb1-9">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb1-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> lucas_lehmer(p):</span>
<span id="cb1-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Le nombre de Mersenne 2^</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> - 1 est premier."</span>)</span>
<span id="cb1-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Le nombre de Mersenne 2^</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> - 1 n'est pas premier."</span>)</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test avec p = 11 (nombre de Mersenne 2^11 - 1 = 2047 = 23 * 89)</span></span>
<span id="cb1-16">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span></span>
<span id="cb1-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> lucas_lehmer(p):</span>
<span id="cb1-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Le nombre de Mersenne 2^</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> - 1 est premier."</span>)</span>
<span id="cb1-19"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-20">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Le nombre de Mersenne 2^</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> - 1 n'est pas premier."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Le nombre de Mersenne 2^7 - 1 est premier.
Le nombre de Mersenne 2^11 - 1 n'est pas premier.</code></pre>
</div>
</div>
<p>Dans cette fonction, <code>p</code> est l’exposant du nombre de Mersenne, et la fonction renvoie <code>True</code> si le nombre de Mersenne est premier et <code>False</code> sinon.</p>
<p>Évidemment, pour des nombres de Mersenne de taille importante, il est nécessaire d’utiliser des algorithmes et des implémentations plus sophistiqués pour effectuer le test de Lucas-Lehmer de manière efficace.</p>
</section>
<section id="vous-aussi-participez-à-la-recherche-de-nombres-premiers" class="level2">
<h2 class="anchored" data-anchor-id="vous-aussi-participez-à-la-recherche-de-nombres-premiers">Vous aussi, participez à la recherche de nombres premiers !</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="site_GIMPS.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Le site de GIMPS"><img src="https://flallemand.fr/blog/posts/record-battu-pour-les-nombres-premiers/site_GIMPS.png" class="img-fluid figure-img" alt="Le site de GIMPS"></a></p>
<figcaption>Le site de GIMPS</figcaption>
</figure>
</div>
<p>Si vous êtes passionné par les mathématiques et que vous souhaitez contribuer à la recherche de nombres premiers, vous pouvez <a href="https://www.mersenne.org/download/" target="_blank">rejoindre le projet GIMPS en téléchargeant le logiciel Prime95</a> sur votre ordinateur. Le logiciel utilise la puissance de calcul de votre CPU pour effectuer des tests de primalité sur des nombres de Mersenne. En participant à ce projet, vous contribuerez à l’avancement de la recherche mathématique et aurez peut-être la chance de découvrir le prochain nombre premier record ! Vous pourrez alors entrer dans l’histoire des mathématiques en tant que découvreur d’un nombre premier de Mersenne et recevoir une récompense de 3 000 $.</p>
</section>
<section id="pour-aller-plus-loin" class="level2">
<h2 class="anchored" data-anchor-id="pour-aller-plus-loin">Pour aller plus loin</h2>
<p>Deux vidéos qui parlent de cette découverte :</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/zsyGRDrDfbI?si=n9MWwEbTHPKS8myR" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<iframe width="560" height="315" src="https://www.youtube.com/embed/Yp4ilFOtoeg?si=trjqYgmFML3T-jhD" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>


</section>

 ]]></description>
  <category>Actualités</category>
  <category>Mathématiques</category>
  <guid>https://flallemand.fr/blog/posts/record-battu-pour-les-nombres-premiers/</guid>
  <pubDate>Mon, 04 Nov 2024 23:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/record-battu-pour-les-nombres-premiers/Marin_mersenne.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>La méthode du pivot de Gauss : résoudre des systèmes linéaires comme un pro !</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/pivotGauss/</link>
  <description><![CDATA[ 





<section id="cest-quoi-cette-histoire-de-pivot" class="level2">
<h2 class="anchored" data-anchor-id="cest-quoi-cette-histoire-de-pivot">C’est quoi cette histoire de pivot ?</h2>
<p>La méthode du pivot de Gauss, c’est une technique super efficace pour résoudre des systèmes d’équations linéaires. L’idée, c’est de transformer notre système initial en un système équivalent, mais beaucoup plus simple à résoudre. Comment ? En éliminant progressivement les variables, une par une, jusqu’à obtenir un système triangulaire.</p>
<p>Imaginez que vous essayez de démêler un nœud de câbles. Vous commencez par un bout, vous dégagez un câble, puis un autre, et ainsi de suite jusqu’à ce que tout soit bien ordonné. C’est exactement ce que fait la méthode de Gauss avec nos équations !</p>
</section>
<section id="un-exemple-pour-mieux-comprendre" class="level2">
<h2 class="anchored" data-anchor-id="un-exemple-pour-mieux-comprendre">Un exemple pour mieux comprendre</h2>
<p>Allez, on se lance dans un exemple concret. On va résoudre un système de trois équations à trois inconnues. Attachez vos ceintures, ça va décoiffer !</p>
<p>Soit le système suivant :</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bcases%7D%0A2&amp;x%20&amp;+&amp;%20y%20&amp;-&amp;%20&amp;z%20&amp;=&amp;%208%20%5C%5C%0A-3&amp;x%20&amp;-&amp;%20y%20&amp;+&amp;%202&amp;z%20&amp;=&amp;%20-11%20%5C%5C%0A-2&amp;x%20&amp;+&amp;%20y%20&amp;+&amp;%202&amp;z%20&amp;=&amp;%20-3%0A%5Cend%7Bcases%7D%0A"></p>
<section id="étape-1-on-choisit-notre-pivot" class="level3">
<h3 class="anchored" data-anchor-id="étape-1-on-choisit-notre-pivot">Étape 1 : On choisit notre pivot</h3>
<p>On va utiliser la première équation comme pivot pour éliminer <img src="https://latex.codecogs.com/png.latex?x"> dans les autres équations.</p>
</section>
<section id="étape-2-on-élimine-x-dans-la-deuxième-et-la-troisième-équation" class="level3">
<h3 class="anchored" data-anchor-id="étape-2-on-élimine-x-dans-la-deuxième-et-la-troisième-équation">Étape 2 : On élimine <img src="https://latex.codecogs.com/png.latex?x"> dans la deuxième et la troisième équation</h3>
<ul>
<li>Pour la deuxième équation, on ajoute 3/2 fois la première équation</li>
<li>Pour la troisième équation, on ajoute 1 fois la première équation</li>
</ul>
<p>On obtient le système équivalent :</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bcases%7D%0A2&amp;x%20&amp;+&amp;%20&amp;y%20&amp;-&amp;%20&amp;z%20&amp;=&amp;%208%20%5C%5C%0A&amp;%20&amp;&amp;%5Cfrac%7B1%7D%7B2%7D&amp;y%20&amp;+&amp;%20%5Cfrac%7B1%7D%7B2%7D&amp;z%20&amp;=&amp;%201%20%5C%5C%0A&amp;%20&amp;&amp;2&amp;y%20&amp;+&amp;%20&amp;z%20&amp;=&amp;%205%0A%5Cend%7Bcases%7D%0A"></p>
</section>
<section id="étape-3-on-élimine-y-dans-la-troisième-équation" class="level3">
<h3 class="anchored" data-anchor-id="étape-3-on-élimine-y-dans-la-troisième-équation">Étape 3 : On élimine <img src="https://latex.codecogs.com/png.latex?y"> dans la troisième équation</h3>
<p>Maintenant, on utilise la deuxième équation comme pivot pour éliminer <img src="https://latex.codecogs.com/png.latex?y"> dans la troisième équation. On multiplie la deuxième équation par <img src="https://latex.codecogs.com/png.latex?-4"> et on l’ajoute à la troisième équation :</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bcases%7D%0A2&amp;%20&amp;+%20&amp;&amp;y%20&amp;-%20&amp;&amp;z%20&amp;=%208%20%5C%5C%0A&amp;&amp;&amp;%5Cfrac%7B1%7D%7B2%7D&amp;y%20&amp;+%20&amp;%5Cfrac%7B1%7D%7B2%7D&amp;z%20&amp;=%201%20%5C%5C%0A&amp;&amp;%20&amp;&amp;&amp;-&amp;&amp;z%20&amp;=%201%0A%5Cend%7Bcases%7D%0A"></p>
</section>
<section id="étape-4-on-résout" class="level3">
<h3 class="anchored" data-anchor-id="étape-4-on-résout">Étape 4 : On résout !</h3>
<p>Et voilà, on a notre système triangulaire ! C’est comme avoir dénoué tous nos câbles. Maintenant, on peut facilement trouver nos inconnues :</p>
<ol type="1">
<li>De la dernière équation : <img src="https://latex.codecogs.com/png.latex?z%20=%20-1"></li>
<li>De la deuxième équation : <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7Dy%20+%20%5Cfrac%7B1%7D%7B2%7D(-1)%20=%201">, donc <img src="https://latex.codecogs.com/png.latex?y%20=%203"></li>
<li>De la première équation : <img src="https://latex.codecogs.com/png.latex?2x%20+%203%20+%201%20=%208">, donc <img src="https://latex.codecogs.com/png.latex?x%20=%202"></li>
</ol>
<p>Notre solution est donc <img src="https://latex.codecogs.com/png.latex?(x,%20y,%20z)%20=%20(2,%203,%20-1)">.</p>
</section>
</section>
<section id="généralisation-et-équivalence-des-systèmes" class="level2">
<h2 class="anchored" data-anchor-id="généralisation-et-équivalence-des-systèmes">Généralisation et équivalence des systèmes</h2>
<p>Maintenant que nous avons vu un exemple concret, parlons un peu de ce qui se passe en coulisses. La magie de la méthode du pivot de Gauss repose sur l’utilisation d’opérations élémentaires qui nous permettent de passer d’un système à un autre équivalent.</p>
<p>Mais qu’est-ce qu’un système équivalent ? C’est simple : deux systèmes sont équivalents s’ils ont exactement les mêmes solutions. En d’autres termes, peu importe lequel des deux systèmes, vous résolvez, vous obtiendrez le même résultat final.</p>
<p>Les opérations élémentaires que nous utilisons sont :</p>
<ol type="1">
<li>Échanger deux équations</li>
<li>Multiplier une équation par un nombre non nul</li>
<li>Ajouter à une équation un multiple d’une autre équation</li>
</ol>
<p>Ces opérations sont comme des tours de magie mathématiques : elles transforment notre système, mais sans jamais changer ses solutions. C’est un peu comme si vous réarrangiez les pièces d’un puzzle sans changer l’image finale.</p>
<p>Pourquoi est-ce si important ? Eh bien, cela signifie que nous pouvons manipuler notre système initial pour le rendre plus simple à résoudre, sans craindre de perdre ou de modifier les solutions en cours de route. C’est ce qui nous permet de passer d’un système compliqué à un système triangulaire facile à résoudre, comme nous l’avons fait dans notre exemple.</p>
<p>Dans le cas général, pour un système de <img src="https://latex.codecogs.com/png.latex?n"> équations à <img src="https://latex.codecogs.com/png.latex?n"> inconnues, nous appliquons ces opérations de manière systématique :</p>
<ol type="1">
<li>On choisit un pivot (généralement le premier coefficient non nul de la première colonne) et on échange l’équation correspondante avec la première équation</li>
<li>On utilise ce pivot pour éliminer la première variable dans toutes les équations suivantes</li>
<li>On répète le processus avec la deuxième équation comme nouveau pivot, et ainsi de suite.</li>
</ol>
<p>À chaque étape, nous créons un nouveau système équivalent, jusqu’à obtenir un système triangulaire que nous pouvons résoudre facilement par substitution inverse.</p>
<p>Cette approche nous permet de résoudre des systèmes de plus en plus grands et complexes, tout en gardant la certitude que nos manipulations préservent les solutions originales. C’est la beauté et la puissance de la méthode du pivot de Gauss !</p>
</section>
<section id="automatisons-tout-ça-avec-python" class="level2">
<h2 class="anchored" data-anchor-id="automatisons-tout-ça-avec-python">Automatisons tout ça avec Python !</h2>
<p>Maintenant que vous êtes des pros du pivot de Gauss, que diriez-vous d’automatiser tout ça avec un peu de code Python ? C’est parti !</p>
<p>Mais avant de plonger dans le code, parlons un peu de la façon dont nous allons représenter notre système d’équations en Python.</p>
<section id="représentation-du-système-en-python" class="level3">
<h3 class="anchored" data-anchor-id="représentation-du-système-en-python">Représentation du système en Python</h3>
<p>En Python, nous allons utiliser un tableau NumPy pour représenter notre système d’équations. Pourquoi NumPy ? Parce que c’est super efficace pour les calculs numériques et ça nous facilite la vie pour manipuler nos équations.</p>
<p>Voici comment ça marche :</p>
<ul>
<li>Chaque ligne du tableau représente une équation du système.</li>
<li>Les colonnes représentent les coefficients des variables et le terme constant.</li>
<li>La dernière colonne contient les termes constants (les nombres à droite du signe égal dans nos équations).</li>
</ul>
<p>Par exemple, notre système initial :</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bcases%7D%0A2&amp;x&amp;%20+&amp;%20y&amp;%20-&amp;%20&amp;z&amp;%20=&amp;%208%20%5C%5C%0A-3&amp;x&amp;%20-&amp;%20y&amp;%20+&amp;%202&amp;z&amp;%20=&amp;%20-11%20%5C%5C%0A-2&amp;x&amp;%20+&amp;%20y&amp;%20+&amp;%202&amp;z&amp;%20=&amp;%20-3%0A%5Cend%7Bcases%7D%0A"></p>
<p>sera représenté par le tableau NumPy suivant :</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">systeme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([</span>
<span id="cb1-2">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>],</span>
<span id="cb1-3">    [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>],</span>
<span id="cb1-4">    [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb1-5">], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span></code></pre></div>
</section>
<section id="accès-aux-coefficients" class="level3">
<h3 class="anchored" data-anchor-id="accès-aux-coefficients">Accès aux coefficients</h3>
<p>Pour accéder aux différents coefficients dans notre tableau NumPy, on utilise l’indexation. Voici comment ça marche :</p>
<ul>
<li><code>systeme[i, j]</code> nous donne l’élément à la i-ème ligne et j-ème colonne.</li>
<li>Les indices commencent à 0 (comme d’habitude en Python).</li>
<li>Pour un système de n équations à n inconnues :
<ul>
<li><code>systeme[i, j]</code> pour i &lt; n et j &lt; n donne le coefficient de la (j+1)-ème variable dans la (i+1)-ème équation.</li>
<li><code>systeme[i, n]</code> donne le terme constant de la (i+1)-ème équation.</li>
</ul></li>
</ul>
<p>Par exemple :</p>
<ul>
<li><code>systeme[0, 0]</code> vaut 2 (coefficient de <img src="https://latex.codecogs.com/png.latex?x"> dans la première équation)</li>
<li><code>systeme[1, 2]</code> vaut 2 (coefficient de <img src="https://latex.codecogs.com/png.latex?z"> dans la deuxième équation)</li>
<li><code>systeme[2, 3]</code> vaut <img src="https://latex.codecogs.com/png.latex?-3"> (terme constant de la troisième équation).</li>
</ul>
<p>Cette représentation nous permet de manipuler facilement notre système d’équations en utilisant les opérations de NumPy, ce qui rend notre implémentation de la méthode du pivot de Gauss à la fois simple et efficace.</p>
<p>Maintenant que nous avons compris comment représenter et manipuler notre système, passons au code !</p>
<div id="6739fac9" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> echanger_equations(systeme, i, j):</span>
<span id="cb2-4">    systeme[i], systeme[j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> systeme[j].copy(), systeme[i].copy()</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> multiplier_equation(systeme, i, facteur):</span>
<span id="cb2-7">    systeme[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> facteur</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ajouter_multiple_equation(systeme, i, j, facteur):</span>
<span id="cb2-10">    systeme[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> facteur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> systeme[j]</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> pivot_gauss(systeme):</span>
<span id="cb2-13">    n, m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> systeme.shape</span>
<span id="cb2-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(n, m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)):</span>
<span id="cb2-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Trouver le pivot maximal</span></span>
<span id="cb2-16">        pivot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.argmax(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(systeme[i:, i]))</span>
<span id="cb2-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> systeme[pivot, i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-18">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Le système n'a pas de solution unique!"</span>)</span>
<span id="cb2-19">        </span>
<span id="cb2-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Échanger les équations</span></span>
<span id="cb2-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pivot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> i:</span>
<span id="cb2-22">            echanger_equations(systeme, i, pivot)</span>
<span id="cb2-23">        </span>
<span id="cb2-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Éliminer les variables</span></span>
<span id="cb2-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n):</span>
<span id="cb2-26">            facteur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>systeme[j, i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> systeme[i, i]</span>
<span id="cb2-27">            ajouter_multiple_equation(systeme, j, i, facteur)</span>
<span id="cb2-28">    </span>
<span id="cb2-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> systeme</span>
<span id="cb2-30"></span>
<span id="cb2-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exemple d'utilisation</span></span>
<span id="cb2-32">systeme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([</span>
<span id="cb2-33">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>],</span>
<span id="cb2-34">    [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>],</span>
<span id="cb2-35">    [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb2-36">], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb2-37"></span>
<span id="cb2-38"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Système initial :"</span>)</span>
<span id="cb2-39"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(systeme)</span>
<span id="cb2-40"></span>
<span id="cb2-41">resultat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pivot_gauss(systeme)</span>
<span id="cb2-42"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Système après pivot de Gauss :"</span>)</span>
<span id="cb2-43"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(resultat)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Système initial :
[[  2.   1.  -1.   8.]
 [ -3.  -1.   2. -11.]
 [ -2.   1.   2.  -3.]]

Système après pivot de Gauss :
[[ -3.          -1.           2.         -11.        ]
 [  0.           1.66666667   0.66666667   4.33333333]
 [  0.           0.           0.2         -0.2       ]]</code></pre>
</div>
</div>
<p>Expliquons un peu ce code :</p>
<ol type="1">
<li><code>echanger_equations</code>, <code>multiplier_equation</code>, et <code>ajouter_multiple_equation</code> sont nos opérations élémentaires sur les équations. Elles utilisent l’indexation NumPy pour accéder et modifier les coefficients.</li>
<li><code>pivot_gauss</code> est notre fonction principale qui applique la méthode du pivot de Gauss. Elle utilise <code>systeme.shape</code> pour obtenir les dimensions de notre tableau.</li>
<li>Dans <code>pivot_gauss</code>, on utilise <code>np.argmax</code> pour trouver l’indice du coefficient de plus grande valeur absolue, ce qui nous donne notre meilleur pivot pour minimiser les erreurs d’arrondi.</li>
<li>Les opérations d’élimination utilisent l’indexation pour accéder aux coefficients appropriés et les modifier.</li>
</ol>
<p>Et voilà ! Avec ce code, vous pouvez résoudre des systèmes linéaires plus rapidement qu’il n’en faut pour dire “Carl Friedrich Gauss” !</p>
<p>Résolvons par exemple le système de cinq équations à cinq inconnues suivant :</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bcases%7D%0A2&amp;x&amp;%20+&amp;%20&amp;y&amp;%20-&amp;%20&amp;z&amp;%20+&amp;%202&amp;w&amp;%20-&amp;%203&amp;v&amp;%20=&amp;%208%20%5C%5C%0A-3&amp;x&amp;%20-&amp;%20&amp;y&amp;%20+&amp;%202&amp;z&amp;%20-&amp;%20&amp;w&amp;%20+&amp;%204&amp;v&amp;%20=&amp;%20-11%20%5C%5C%0A-2&amp;x&amp;%20+&amp;%20&amp;y&amp;%20+&amp;%202&amp;z&amp;%20+&amp;%20&amp;w&amp;%20-&amp;%202&amp;v&amp;%20=&amp;%20-3%20%5C%5C%0A&amp;x&amp;%20-&amp;%20&amp;y&amp;%20+&amp;%20&amp;%20z&amp;%20-&amp;%20&amp;%20w%20&amp;%20+&amp;%20&amp;%20v&amp;%20=&amp;%202%20%5C%5C%0A4&amp;x&amp;%20-&amp;%202&amp;y&amp;%20+&amp;%203&amp;z&amp;%20-&amp;%202&amp;w&amp;%20+&amp;%20&amp;%20v&amp;%20=&amp;%203%0A%5Cend%7Bcases%7D%0A"></p>
<div id="7b802c41" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">systeme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([</span>
<span id="cb4-2">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>],</span>
<span id="cb4-3">    [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>],</span>
<span id="cb4-4">    [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="cb4-5">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb4-6">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb4-7">], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb4-8"></span>
<span id="cb4-9">resultat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pivot_gauss(systeme)</span>
<span id="cb4-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Système après pivot de Gauss :"</span>)</span>
<span id="cb4-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(resultat)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Système après pivot de Gauss :
[[ 4.         -2.          3.         -2.          1.          3.        ]
 [ 0.         -2.5         4.25       -2.5         4.75       -8.75      ]
 [ 0.          0.          3.5         0.         -1.5        -1.5       ]
 [ 0.          0.          0.          1.          0.68571429 -0.11428571]
 [ 0.          0.          0.          0.         -0.45714286  2.74285714]]</code></pre>
</div>
</div>
<p>Il n’y a plus qu’à remonter les équations pour trouver les valeurs de <img src="https://latex.codecogs.com/png.latex?x">, <img src="https://latex.codecogs.com/png.latex?y">, <img src="https://latex.codecogs.com/png.latex?z">, <img src="https://latex.codecogs.com/png.latex?w">, et <img src="https://latex.codecogs.com/png.latex?v">.</p>
<p>On trouve en arrondissant les valeurs : <img src="https://latex.codecogs.com/png.latex?x=-2">, <img src="https://latex.codecogs.com/png.latex?y=-17">, <img src="https://latex.codecogs.com/png.latex?z=-3">, <img src="https://latex.codecogs.com/png.latex?w=4">, <img src="https://latex.codecogs.com/png.latex?v=-6">.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>La méthode du pivot de Gauss, c’est comme avoir un super-pouvoir pour résoudre des systèmes d’équations. Que vous le fassiez à la main ou avec Python, vous avez maintenant les outils pour dompter ces systèmes linéaires rebelles !</p>
<p>Alors, la prochaine fois que quelqu’un vous parle de systèmes d’équations, vous pourrez fièrement dire : “Pas de panique, j’ai Gauss de mon côté !” 😎</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="Carl_Friedrich_Gauss_1840_by_Jensen.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Carl Friedrich Gauss"><img src="https://flallemand.fr/blog/posts/pivotGauss/Carl_Friedrich_Gauss_1840_by_Jensen.jpg" class="img-fluid figure-img" style="width:50.0%" alt="Carl Friedrich Gauss"></a></p>
<figcaption>Carl Friedrich Gauss</figcaption>
</figure>
</div>


</section>

 ]]></description>
  <category>Mathématiques</category>
  <category>Python</category>
  <category>Programmation</category>
  <guid>https://flallemand.fr/blog/posts/pivotGauss/</guid>
  <pubDate>Mon, 07 Oct 2024 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/pivotGauss/Carl_Friedrich_Gauss_1840_by_Jensen.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Découvrir les liens entre les maths et la musique</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/mathsmusique/</link>
  <description><![CDATA[ 





<p>France Musique nous propose une série captivante de huit épisodes explorant les liens surprenants entre la musique et les mathématiques. Diffusée pendant l’été 2024 tous les mercredis à 8 h 10, cette série intitulée « Musique + maths » est animée par Pierre-Yves Georges et promet de réconcilier même les plus réticents avec les mathématiques.</p>
<p><a href="LogoFranceMusiqueMaths.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://flallemand.fr/blog/posts/mathsmusique/LogoFranceMusiqueMaths.png" class="img-fluid"></a></p>
<section id="un-voyage-à-travers-lhistoire-et-les-concepts" class="level1">
<h1>Un voyage à travers l’histoire et les concepts</h1>
<section id="de-la-forge-antique-aux-compositeurs-modernes" class="level2">
<h2 class="anchored" data-anchor-id="de-la-forge-antique-aux-compositeurs-modernes">De la forge antique aux compositeurs modernes</h2>
<p>Le premier épisode nous plonge dans les origines lointaines de cette relation, remontant jusqu’à une forge antique. Ce point de départ inattendu ouvre la voie à une exploration fascinante de l’évolution de ce lien au fil des siècles.</p>
</section>
<section id="les-grands-noms-à-la-croisée-des-disciplines" class="level2">
<h2 class="anchored" data-anchor-id="les-grands-noms-à-la-croisée-des-disciplines">Les grands noms à la croisée des disciplines</h2>
<p>La série met en lumière des personnalités emblématiques qui ont marqué à la fois le monde de la musique et celui des mathématiques :</p>
<ul>
<li>Johann Sebastian Bach, dont l’œuvre continue d’être étudiée pour sa dimension mathématique.</li>
<li>Ernest Ansermet, chef d’orchestre renommé qui était initialement professeur de mathématiques.</li>
<li>Albert Einstein, célèbre physicien, mais aussi mélomane passionné, dont la musique aurait peut-être inspiré certaines théories révolutionnaires.</li>
</ul>
<p><a href="EinsteinViolon.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://flallemand.fr/blog/posts/mathsmusique/EinsteinViolon.png" class="img-fluid"></a></p>
</section>
</section>
<section id="des-concepts-mathématiques-en-musique" class="level1">
<h1>Des concepts mathématiques en musique</h1>
<section id="probabilités-et-hasard-en-composition" class="level2">
<h2 class="anchored" data-anchor-id="probabilités-et-hasard-en-composition">Probabilités et hasard en composition</h2>
<p>Plusieurs épisodes explorent comment les concepts mathématiques ont influencé la création musicale :</p>
<ul>
<li>Iannis Xenakis, compositeur d’origine grecque, a intégré les probabilités dans ses compositions.</li>
<li>De Mozart à Pierre Boulez, le hasard, notion mathématique, a joué un rôle important dans la composition.</li>
</ul>
</section>
<section id="la-beauté-des-mathématiques-en-musique" class="level2">
<h2 class="anchored" data-anchor-id="la-beauté-des-mathématiques-en-musique">La beauté des mathématiques en musique</h2>
<p>Le pianiste Kit Armstrong, également diplômé en mathématiques fondamentales, partage sa vision sur la beauté et l’émotion présentes tant dans les mathématiques que dans la musique.</p>
</section>
</section>
<section id="un-outil-pédagogique-inattendu" class="level1">
<h1>Un outil pédagogique inattendu</h1>
<p>Un épisode particulièrement intéressant pour les parents et les enseignants suggère que la musique pourrait être un excellent moyen d’améliorer les performances en mathématiques des enfants.</p>
<p>Cette série de podcasts propose une perspective unique sur l’interconnexion entre deux domaines apparemment distincts. Elle invite les auditeurs à découvrir comment la rigueur mathématique et la créativité musicale se complètent et s’enrichissent mutuellement.</p>
<p>Que vous soyez passionné de musique, de mathématiques, ou simplement curieux, ces huit épisodes promettent des découvertes intéressantes et une nouvelle appréciation de ces deux disciplines.</p>
<p>Lien : <a href="https://www.radiofrance.fr/francemusique/podcasts/musique-maths" target="_blank">https://www.radiofrance.fr/francemusique/podcasts/musique-maths</a></p>


</section>

 ]]></description>
  <category>Histoire</category>
  <category>Mathématiques</category>
  <category>Podcast</category>
  <guid>https://flallemand.fr/blog/posts/mathsmusique/</guid>
  <pubDate>Wed, 02 Oct 2024 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/mathsmusique/LogoFranceMusiqueMaths.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Boby Lapointe, poète mathématicien</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/bobylapointe/</link>
  <description><![CDATA[ 





<p>Dans une vidéo de France Musique intitulée <em>Boby Lapointe : la science du poète mathématicien</em> (disponible sur YouTube <a href="https://www.youtube.com/watch?v=yNEA-xmxG4A" target="_blank">ici</a>), cet aspect méconnu de son génie est exploré, mettant en lumière son invention et son approche atypique des nombres.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/yNEA-xmxG4A?si=QdaNZxqSP9SmiWAW" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<section id="lartiste-des-jeux-de-mots-et-des-jeux-de-nombres" class="level3">
<h3 class="anchored" data-anchor-id="lartiste-des-jeux-de-mots-et-des-jeux-de-nombres">L’artiste des jeux de mots et des jeux de nombres</h3>
<p>Le talent de Boby Lapointe en tant que parolier est incontestable : ses chansons telles que « Ta Katie t’a quitté », « Framboise » ou « La maman des poissons » sont de véritables trésors de la chanson française. Ses textes regorgent de calembours, de contrepèteries et de jeux de mots complexes.</p>
<p>Cette passion pour le langage trouve un parallèle dans sa fascination pour les mathématiques, où il voyait également un jeu d’esprit. Formé à l’École Nationale Supérieure d’Aéronautique, Boby Lapointe était un vrai scientifique. Cette formation explique en partie son goût pour les défis intellectuels.</p>
</section>
<section id="le-système-bibi-binaire-une-invention-ludique-et-sérieuse" class="level3">
<h3 class="anchored" data-anchor-id="le-système-bibi-binaire-une-invention-ludique-et-sérieuse">Le système bibi-binaire : une invention ludique et sérieuse</h3>
<p>L’une des contributions majeures de Lapointe à la culture mathématique reste sans doute son système de numération « bibi-binaire ». Ce terme, que l’on pourrait croire sorti tout droit de l’un de ses textes absurdes, désigne pourtant un concept bien réel et sérieux.</p>
<p>La numération bibi-binaire est un jeu sur la représentation des nombres en base 16. Le système bibi-binaire vise à rendre plus accessible la lecture des nombres hexadécimaux pour les néophytes ou à les manipuler plus aisément.</p>
<p>Dans cette vidéo de France Musique, on comprend mieux comment ce système est né, non pas d’une démarche purement théorique, mais d’un désir ludique de simplifier des concepts complexes et de les rendre accessibles à tous. Pour Lapointe, les mathématiques étaient un terrain de jeu tout aussi fertile que la langue française.</p>
<p>Boby Lapointe est un artiste à multiples facettes, capable de jongler avec les mots comme avec les chiffres. Son invention du système de numération bibi-binaire témoigne de sa créativité, nourrie par une curiosité intellectuelle et un amour des mathématiques.</p>
<p>Au-delà des chansons, Boby Lapointe nous laisse une leçon précieuse : les mathématiques et l’art ne sont pas des disciplines opposées. Au contraire, elles peuvent se nourrir mutuellement pour engendrer des créations inédites, porteuses d’une originalité déconcertante.</p>
</section>
<section id="principe-du-système-bibi-binaire" class="level3">
<h3 class="anchored" data-anchor-id="principe-du-système-bibi-binaire">Principe du système bibi-binaire</h3>
<p>Le système bibi-binaire est basé sur la numération hexadécimale (base 16). L’idée ingénieuse de Boby Lapointe a été d’attribuer à chaque chiffre hexadécimal une syllabe composée d’une consonne et d’une voyelle.</p>
<p>Voici comment fonctionnent ces attributions :</p>
<ul>
<li>Les consonnes H, B, K, D correspondent respectivement aux paires de bits 00, 01, 10, 11 pour les chiffres de poids fort.</li>
<li>Les voyelles O, A, E, I correspondent à ces mêmes paires de bits pour les chiffres de poids faible.</li>
</ul>
<p>Ainsi, chaque chiffre hexadécimal est représenté par une syllabe unique.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="Table_de_correspondance_entre_le_Bibinaire_et_les_autres_notations.svg.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Table de correspondance entre le Bibinaire et les autres notations"><img src="https://flallemand.fr/blog/posts/bobylapointe/Table_de_correspondance_entre_le_Bibinaire_et_les_autres_notations.svg.png" class="img-fluid figure-img" alt="Table de correspondance entre le Bibinaire et les autres notations"></a></p>
<figcaption>Table de correspondance entre le Bibinaire et les autres notations</figcaption>
</figure>
</div>
<section id="tableau-de-conversion" class="level4">
<h4 class="anchored" data-anchor-id="tableau-de-conversion">Tableau de conversion</h4>
<p>Voici le tableau complet des correspondances :</p>
<table class="table-striped table-hover caption-top table">
<thead>
<tr class="header">
<th style="text-align: center;">Décimal</th>
<th style="text-align: center;">Hexadécimal</th>
<th style="text-align: center;">Bibi-binaire</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">HO</td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">HA</td>
</tr>
<tr class="odd">
<td style="text-align: center;">2</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">HE</td>
</tr>
<tr class="even">
<td style="text-align: center;">3</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">HI</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">BO</td>
</tr>
<tr class="even">
<td style="text-align: center;">5</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">BA</td>
</tr>
<tr class="odd">
<td style="text-align: center;">6</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;">BE</td>
</tr>
<tr class="even">
<td style="text-align: center;">7</td>
<td style="text-align: center;">7</td>
<td style="text-align: center;">BI</td>
</tr>
<tr class="odd">
<td style="text-align: center;">8</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">KO</td>
</tr>
<tr class="even">
<td style="text-align: center;">9</td>
<td style="text-align: center;">9</td>
<td style="text-align: center;">KA</td>
</tr>
<tr class="odd">
<td style="text-align: center;">10</td>
<td style="text-align: center;">A</td>
<td style="text-align: center;">KE</td>
</tr>
<tr class="even">
<td style="text-align: center;">11</td>
<td style="text-align: center;">B</td>
<td style="text-align: center;">KI</td>
</tr>
<tr class="odd">
<td style="text-align: center;">12</td>
<td style="text-align: center;">C</td>
<td style="text-align: center;">DO</td>
</tr>
<tr class="even">
<td style="text-align: center;">13</td>
<td style="text-align: center;">D</td>
<td style="text-align: center;">DA</td>
</tr>
<tr class="odd">
<td style="text-align: center;">14</td>
<td style="text-align: center;">E</td>
<td style="text-align: center;">DE</td>
</tr>
<tr class="even">
<td style="text-align: center;">15</td>
<td style="text-align: center;">F</td>
<td style="text-align: center;">DI</td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="exemples-dutilisation" class="level2">
<h2 class="anchored" data-anchor-id="exemples-dutilisation">Exemples d’utilisation</h2>
<p>Voyons maintenant quelques exemples pour mieux comprendre ce système :</p>
<ol type="1">
<li><p>Le nombre 71 en décimal s’écrit 47 en hexadécimal, ce qui donne BOBI en bibi-binaire.</p></li>
<li><p>L’année 2018 s’écrit 7E2 en hexadécimal, soit BIDEHE en bibi-binaire.</p></li>
<li><p>Un nombre plus grand comme 584 623 705 671 s’écrit 881E49CE47 en hexadécimal, ce qui donne la phrase mélodieuse “KOKOHADEBOKADODEBOBI” en bibi-binaire.</p></li>
</ol>
<p>Le principal intérêt du bibi-binaire est de créer des noms de nombres agréables à l’oreille, dans l’esprit des jeux de mots chers à Boby Lapointe. Il permet également de représenter de grands nombres de manière plus concise que le système décimal.</p>
<p>Cependant, malgré son originalité, ce système reste peu pratique pour une utilisation quotidienne. Il demeure néanmoins un bel exemple de la créativité mathématique de Boby Lapointe, mêlant rigueur et fantaisie.</p>
<section id="bonus-la-playlist-boby-lapointe" class="level3">
<h3 class="anchored" data-anchor-id="bonus-la-playlist-boby-lapointe">Bonus : la playlist Boby Lapointe</h3>
<iframe width="560" height="315" src="https://www.youtube.com/embed/jjD9WzW6dK4?si=afNs9IqkhWi-3VYh" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
</section>
<section id="pour-aller-plus-loin" class="level3">
<h3 class="anchored" data-anchor-id="pour-aller-plus-loin">Pour aller plus loin :</h3>
<ul>
<li><a href="https://www.radiofrance.fr/francemusique/boby-lapointe-du-jeu-de-mots-a-l-equation-mathematique-9184903" target="_blank">Article sur le site de France Musique accompagnant la vidéo mentionnée ici</a></li>
<li><a href="https://fr.vikidia.org/wiki/Syst%C3%A8me_bibi-binaire" target="_blank">https://fr.vikidia.org/wiki/Syst%C3%A8me_bibi-binaire</a></li>
<li><a href="https://graner.name/nicolas/nombres/bibibinaire.php" target="_blank">https://graner.name/nicolas/nombres/bibibinaire.php</a></li>
<li><a href="https://pi.ac3j.fr/boby-lapointe/" target="_blank">https://pi.ac3j.fr/boby-lapointe/</a></li>
</ul>


</section>
</section>

 ]]></description>
  <category>Informatique</category>
  <category>Histoire</category>
  <category>Mathématiques</category>
  <category>Vidéothèque</category>
  <guid>https://flallemand.fr/blog/posts/bobylapointe/</guid>
  <pubDate>Mon, 30 Sep 2024 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/bobylapointe/Table_de_correspondance_entre_le_Bibinaire_et_les_autres_notations.svg.png" medium="image" type="image/png" height="23" width="144"/>
</item>
<item>
  <title>Tuto pyxel : Ajouter un fond</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/pyxel_tuto3_fond/</link>
  <description><![CDATA[ 





<p>Ce tuto fait suite au précédent : <a href="../../posts/pyxel_tuto2_personnage/index.html">Tuto pyxel : Animer un personnage</a>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Objectifs du tutoriel
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Créer un fond constitué de divers éléments ;</li>
<li>Animer le fond pour simuler un déplacement du personnage.</li>
</ul>
</div>
</div>
<section id="préparation" class="level2">
<h2 class="anchored" data-anchor-id="préparation">Préparation</h2>
<p>Nous reprenons le code du tuto précédent comme base de travail, mais nous allons le réorganiser. Plusieurs nouveaux éléments vont en effet devoir être ajoutés au fur et à mesure du développement du jeu, et certains d’entre eux devront, comme le personnage, être animés ou voir certaines de leurs propriétés modifiées au cours du temps. Nous allons donc définir des <strong>classes</strong> pour chacun de ces éléments, afin de pouvoir les manipuler plus facilement et pour rendre notre code plus lisible. Chacune de ces classes comportera au moins trois méthodes : <code>__init__</code> pour initialiser l’objet et ses paramètres de départ, puis <code>update</code> et <code>draw</code>. La première sera appelée à chaque frame pour mettre à jour les propriétés de l’objet, la seconde sera appelée pour afficher l’objet à l’écran.</p>
<p>Voici donc le code de départ, réorganisé avec la création d’une classe <code>Personnage</code>. Les méthodes <code>update</code> et <code>draw</code> de cette classe sont appelées depuis les méthodes <code>update</code> et <code>draw</code> de l’application.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyxel</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Personnage:</span>
<span id="cb1-4"></span>
<span id="cb1-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb1-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-12"></span>
<span id="cb1-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_LEFT):</span>
<span id="cb1-15">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-16">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-17">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_RIGHT):</span>
<span id="cb1-19">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, pyxel.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb1-20">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-21">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-22">    </span>
<span id="cb1-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche:</span>
<span id="cb1-25">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pyxel.frame_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb1-26">                pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb1-27">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-28">                pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb1-29">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-31">            pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb1-32">    </span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> App:</span>
<span id="cb1-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-36">        pyxel.init(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-37">        pyxel.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jump_game.pyxres"</span>)</span>
<span id="cb1-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Personnage()</span>
<span id="cb1-39">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span>
<span id="cb1-40">        </span>
<span id="cb1-41">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-42">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage.update()</span>
<span id="cb1-43"></span>
<span id="cb1-44">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-45">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-46">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage.draw()</span>
<span id="cb1-47"></span>
<span id="cb1-48">App()</span></code></pre></div>
</section>
<section id="fond-statique-montagne-et-ciel" class="level2">
<h2 class="anchored" data-anchor-id="fond-statique-montagne-et-ciel">Fond statique : Montagne et ciel</h2>
<p>L’objectif est de créer le fond de la fenêtre de jeu à l’aide de quatre composantes :</p>
<ul>
<li>une montagne : elle sera fixe et située au milieu de la fenêtre ;</li>
<li>un ciel dégradé : il sera fixe et situé sous la montagne ;</li>
<li>des nuages : ils seront animés, situés au-dessus de la montagne et défileront dans le ciel ;</li>
<li>une forêt : elle sera animée, située derrière le personnage et défilera dans le bas de la fenêtre lorsque le personnage se déplace.</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Idée à retenir
</div>
</div>
<div class="callout-body-container callout-body">
<p>D’une manière générale, les objets statiques (dont la position ne change pas et dont les propriétés ne changent pas) peuvent être définis directement dans la classe <code>App</code>. Par contre, pour les objets dynamiques (soit parce qu’ils se déplacent, soit parce que leurs propriétés changent), on crée une classe indépendante dotée (au moins) des trois méthodes <code>__init__</code>, <code>update</code> et <code>draw</code>.</p>
</div>
</div>
<p>L’examen du fichier de ressources nous permet de déterminer les coordonnées de la zone de l’image correspondant à ces éléments.</p>
<ul>
<li>Montagne : le coin supérieur gauche a pour coordonnées 0 et 64, l’image a une largeur de 160 pixels et une hauteur de 24 pixels.</li>
<li>Ciel : le coin supérieur gauche a pour coordonnées 0 et 88, l’image a une largeur de 160 pixels et une hauteur de 32 pixels.</li>
</ul>
<p>On ajoute donc ces deux éléments à l’arrière plan de la fenêtre de jeu en modifiant comme suit la méthode <code>draw</code> de la classe <code>App</code> :</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># classe App</span></span>
<span id="cb2-2">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb2-3">         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tracé de la montagne</span></span>
<span id="cb2-4">        pyxel.blt(pyxel.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>)</span>
<span id="cb2-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tracé du ciel dégradé</span></span>
<span id="cb2-6">        pyxel.blt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb2-7">        pyxel.blt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>,pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb2-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage.draw()</span></code></pre></div>
<p><strong>Explications</strong> :</p>
<ul>
<li>Ligne 4 : <code>pyxel.width//2 - 80</code> est l’abscisse du coin supérieur gauche de l’image dans la fenêtre de jeu. <code>pyxel.width//2</code> est l’abscisse du milieu de la fenêtre, <code>80</code> est la moitié de la largeur de l’image. L’ordonnée <code>pyxel.height-50</code> est choisie par tâtonnement pour que la montagne soit bien positionnée verticalement dans la fenêtre.</li>
<li>Lignes 6 et 7 : la largeur de la fenêtre est 256 pixels, la largeur de l’image est 160 pixels, il faut donc répéter l’image deux fois pour remplir toute la largeur de la fenêtre. On a ajouté ici le dernier paramètre <code>12</code> à la fonction <code>blt</code> pour que la couleur 12 (bleu) soit transparente. Cela permet de voir la montagne à travers le ciel dégradé.</li>
</ul>
<p>Comme le montre l’image ci-dessous, il faut aussi ajouter un dernier paramètre à la fonction <code>blt</code> pour que la couleur 12 (bleu) soit transparente également pour le personnage (dons dans la méthode <code>draw</code> de la classe <code>Personnage</code>).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="fond_personnage.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="La couleur bleue derrière le personnage devient transparente"><img src="https://flallemand.fr/blog/posts/pyxel_tuto3_fond/fond_personnage.png" class="img-fluid figure-img" style="width:50.0%" alt="La couleur bleue derrière le personnage devient transparente"></a></p>
<figcaption>La couleur bleue derrière le personnage devient transparente</figcaption>
</figure>
</div>
</section>
<section id="animation-des-nuages" class="level2">
<h2 class="anchored" data-anchor-id="animation-des-nuages">Animation des nuages</h2>
<p>Avec le temps qui passe, les nuages se déplacent lentement vers la gauche et d’autres nuages apparaissent sur la droite. Lorsqu’un nuage a complètement disparu de la fenêtre, il est retiré de la liste des nuages.</p>
<p>Nous allons définir une classe <code>Nuage</code> qui possède ses propres méthodes <code>update</code> et <code>draw</code>, comme le montre le code ci-dessous.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Nuage:</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, y):</span>
<span id="cb3-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb3-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y</span>
<span id="cb3-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.replaced <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-6"></span>
<span id="cb3-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pyxel.frame_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-9">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-10"></span>
<span id="cb3-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-12">        pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span></code></pre></div>
<p><strong>Explications</strong> :</p>
<ul>
<li>Ligne 8 : <code>if pyxel.frame_count % 10 == 0:</code> permet de faire avancer le nuage de 1 pixel vers la gauche trois fois par seconde, puisque notre application a un framerate de 30 fps.</li>
<li>Ligne 5 : Un attribut booléen <code>replaced</code> est ajouté à la classe <code>Nuage</code> pour indiquer si le nuage a été remplacé par un nouveau nuage. Cela permet de ne pas créer un nouveau nuage à chaque frame (voir plus loin).</li>
</ul>
<p>L’idée est de faire apparaître un nouveau nuage dans le ciel dès que le nuage précédent s’approche du bord gauche de l’écran. Pour cela, il sera nécessaire de définir une liste de nuages dans la classe <code>App</code> et de la mettre à jour à chaque frame. Voici le code modifié de la méthode <code>__init__</code> de la classe <code>App</code>, dans lequel on initialise la liste des nuages avec un seul nuage placé au milieu de la fenêtre (lignes 6, 7 et 8).</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># class App</span></span>
<span id="cb4-2">    pyxel.init(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb4-3">    pyxel.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jump_game.pyxres"</span>)</span>
<span id="cb4-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Personnage()</span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># liste des nuages visibles</span></span>
<span id="cb4-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nuages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-7">    premier_nuage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Nuage(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyxel.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb4-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nuages.append(premier_nuage)</span>
<span id="cb4-9">    pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span></code></pre></div>
<p>On modifie ensuite la méthode <code>update</code> de la classe <code>App</code> pour mettre à jour la liste des nuages et faire apparaître un nouveau nuage dès que le nuage précédent s’approche du bord gauche de la fenêtre.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># class App</span></span>
<span id="cb5-2">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage.update()</span>
<span id="cb5-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> nuage <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nuages:</span>
<span id="cb5-4">            nuage.update()</span>
<span id="cb5-5">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> nuage.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> nuage.replaced:</span>
<span id="cb5-6">                nouveau_nuage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Nuage(pyxel.width, pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb5-7">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nuages.append(nouveau_nuage)</span>
<span id="cb5-8">                nuage.replaced <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> nuage.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>:</span>
<span id="cb5-10">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nuages.remove(nuage)</span></code></pre></div>
<p><strong>Explications</strong> :</p>
<ul>
<li>Lignes 3 et 4 : la boucle <code>for nuage in self.nuages</code> permet de parcourir la liste des nuages et d’appliquer la méthode <code>update</code> à chacun d’entre eux.</li>
<li>Lignes 5 à 8 : chaque nuage de la liste est mis à jour et, dès qu’un nuage a son abscisse inférieure à 10 (et qu’il n’a pas encore été remplacé), un nouveau nuage est créé. L’ancien nuage est alors marqué comme remplacé, afin d’éviter de créer un nouveau nuage à chaque frame : <code>nuage.replaced = True</code>.</li>
<li>Lignes 9 et 10 : lorsque le nuage a complètement disparu de la fenêtre, il est retiré de la liste : <code>self.nuages.remove(nuage)</code>.</li>
</ul>
<p>Dernière étape, on modifie la méthode <code>draw</code> de la classe <code>App</code> pour afficher tous les nuages de la liste.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># class App</span></span>
<span id="cb6-2">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb6-3">         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tracé de la montagne</span></span>
<span id="cb6-4">        pyxel.blt(pyxel.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>)</span>
<span id="cb6-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tracé du ciel dégradé</span></span>
<span id="cb6-6">        pyxel.blt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb6-7">        pyxel.blt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>,pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb6-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tracé des nuages</span></span>
<span id="cb6-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> nuage <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nuages:</span>
<span id="cb6-10">            nuage.draw()</span>
<span id="cb6-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage.draw()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="tuto3_1_c.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Animation des nuages"><img src="https://flallemand.fr/blog/posts/pyxel_tuto3_fond/tuto3_1_c.gif" class="img-fluid figure-img" style="width:50.0%" alt="Animation des nuages"></a></p>
<figcaption>Animation des nuages</figcaption>
</figure>
</div>
</section>
<section id="animation-de-la-forêt" class="level2">
<h2 class="anchored" data-anchor-id="animation-de-la-forêt">Animation de la forêt</h2>
<p>Pour rendre plus réaliste le déplacement du personnage, on peut provoquer un déplacement de la forêt en sens contraire du déplacement du personnage. La montagne et le ciel, eux, peuvent rester fixes, car situés à une grande distance du personnage. Cela donne un effet de profondeur à la scène.</p>
<p>Dans le fichier de ressources, la forêt est constituée d’une image de largeur 160 pixels et de hauteur 16 pixels. Nous allons donc avoir besoin de répéter cette image pour remplir toute la largeur de la fenêtre. De plus, comme la forêt est animée, il faut prendre garde à créer une nouvelle copie de l’image à chaque fois que l’image précédente ne rempli plus totalement la largeur de la fenêtre.</p>
<p>Pour cela, on va créer une classe <code>Foret</code> qui possède ses propres méthodes <code>update</code> et <code>draw</code>, comme le montre le code ci-dessous.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Foret:</span>
<span id="cb7-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb7-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-6"></span>
<span id="cb7-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb7-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_LEFT):</span>
<span id="cb7-9">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse</span>
<span id="cb7-10">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_RIGHT):</span>
<span id="cb7-12">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse</span>
<span id="cb7-13">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-14">    </span>
<span id="cb7-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb7-16">        k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span> :</span>
<span id="cb7-18">            pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>,pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb7-19">            k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-20">        k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> pyxel.width :</span>
<span id="cb7-22">            pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>,pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb7-23">            k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<p><strong>Explications</strong> :</p>
<ul>
<li>Ligne 3 : <code>self.x</code> est l’abscisse du coin supérieur gauche de l’image dans la fenêtre de jeu. On initialise cette abscisse à 0.</li>
<li>Ligne 8 : <code>if pyxel.btn(pyxel.KEY_LEFT):</code> permet de faire avancer la forêt vers la droite lorsque la touche <code>flèche gauche</code> est enfoncée.</li>
<li>Ligne 10 : <code>if pyxel.btn(pyxel.KEY_RIGHT):</code> permet de faire avancer la forêt vers la gauche lorsque la touche <code>flèche droite</code> est enfoncée.</li>
<li>Lignes 17 à 23 : on utilise une boucle <code>while</code> pour répéter l’image de la forêt autant de fois que nécessaire pour remplir toute la largeur de la fenêtre. La variable <code>k</code> permet de compter le nombre de répétitions nécessaires. On commence par répéter l’image vers la gauche, puis vers la droite.</li>
</ul>
<p>Pour intégrer cet objet <code>Foret</code> à notre application, il faut maintenant ajouter une ligne à chacune des méthodes de la classe <code>App</code> :</p>
<ul>
<li><p>Dans la méthode <code>__init__</code>, on crée un objet <code>Foret</code> et on l’ajoute à la liste des attributs de la classe <code>App</code>.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.foret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Foret()</span></code></pre></div></li>
</ul>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Avertissement
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Attention</strong> : il faut ajouter cette ligne <strong>après</strong> la ligne <code>pyxel.init(256, 128, fps=30)</code> et <strong>avant</strong> la ligne <code>pyxel.run(self.update, self.draw)</code>.</p>
</div>
</div>
<ul>
<li><p>Dans la méthode <code>update</code>, on met à jour l’objet <code>Foret</code>.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.foret.update()</span></code></pre></div></li>
<li><p>Dans la méthode <code>draw</code>, on affiche l’objet <code>Foret</code>.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.foret.draw()</span></code></pre></div></li>
</ul>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Avertissement
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Attention</strong> : il faut ajouter cette ligne <strong>avant</strong> la ligne <code>self.personnage.draw()</code> : sinon, la forêt sera dessinée <strong>devant</strong> le personnage.</p>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="tuto3_2.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Animation de la forêt"><img src="https://flallemand.fr/blog/posts/pyxel_tuto3_fond/tuto3_2.gif" class="img-fluid figure-img" style="width:50.0%" alt="Animation de la forêt"></a></p>
<figcaption>Animation de la forêt</figcaption>
</figure>
</div>


</section>

 ]]></description>
  <category>Python</category>
  <category>NSI</category>
  <category>Programmation</category>
  <category>Pyxel</category>
  <category>Nuit du code</category>
  <guid>https://flallemand.fr/blog/posts/pyxel_tuto3_fond/</guid>
  <pubDate>Sat, 21 Oct 2023 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/pyxel_tuto3_fond/rendu_final.png" medium="image" type="image/png" height="72" width="144"/>
</item>
<item>
  <title>Tribune du collectif Maths &amp; Sciences</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/tribuneMS/</link>
  <description><![CDATA[ 





<p><a href="https://www.larecherche.fr/tribune/r%C3%A9forme-du-lyc%C3%A9e-g%C3%A9n%C3%A9ral-petites-failles-ou-grandes-fractures"><img src="https://flallemand.fr/blog/posts/tribuneMS/larecherche.png" class="img-fluid" style="width:30.0%"></a></p>
<p>Le collectif <a href="https://collectif-maths-sciences.fr/" target="_blank">Maths &amp; Sciences</a> a publié dans le numéro de La Recherche du 17 octobre 2023 une tribune qui analyse de façon très pertinente les conséquences de la réforme du lycée sur l’enseignement des sciences et des mathématiques au lycée.</p>
<p>La tribune est à lire sur le site de La Recherche : <a href="https://www.larecherche.fr/tribune/r%C3%A9forme-du-lyc%C3%A9e-g%C3%A9n%C3%A9ral-petites-failles-ou-grandes-fractures" target="_blank">Tribune</a></p>
<section id="résumé-de-la-tribune" class="level2">
<h2 class="anchored" data-anchor-id="résumé-de-la-tribune">Résumé de la tribune</h2>
<ul>
<li><strong>Réforme du lycée</strong>: La réforme de 2019 a supprimé les mathématiques du tronc commun et a créé des spécialités à choisir parmi 13. Cette réforme pose des problèmes de fond en sciences et entraîne des ruptures et des fractures entre les élèves.</li>
<li><strong>Chute des effectifs en sciences</strong>: Depuis la réforme, le nombre d’élèves qui suivent des spécialités scientifiques, notamment en mathématiques, a diminué de manière significative. Les filles sont particulièrement touchées par cette baisse, ainsi que les élèves d’origine sociale défavorisée.</li>
<li><strong>Inégalités territoriales</strong>: Les spécialités émergentes, comme le numérique et les sciences informatiques, sont peu présentes dans les lycées et peinent à attirer les élèves. Les spécialités principales restent dominantes et créent une fracture entre les profils de formation.</li>
<li><strong>Propositions d’amendements</strong>: Le collectif Maths&amp;Sciences et ses partenaires proposent de rééquilibrer le tronc commun en faveur des sciences et de maintenir trois spécialités en terminale pour préserver la polyvalence des élèves. Ils appellent à une évaluation globale de la réforme du lycée.</li>
</ul>


</section>

 ]]></description>
  <category>Actualités</category>
  <category>Orientation</category>
  <guid>https://flallemand.fr/blog/posts/tribuneMS/</guid>
  <pubDate>Wed, 18 Oct 2023 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/tribuneMS/larecherche.png" medium="image" type="image/png" height="152" width="144"/>
</item>
<item>
  <title>L’histoire de la Free Software Foundation (FSF)</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/fsf-history/</link>
  <description><![CDATA[ 





<p>Si vous êtes passionné par le logiciel libre et open source, vous avez probablement entendu parler de la Free Software Foundation (FSF). Cette organisation emblématique a joué un rôle central dans la promotion et la défense du logiciel libre depuis sa création en 1985 par Richard Stallman. Dans cet article, je vous propose un résumé de la page officielle de la FSF dédiée à son histoire, que vous pouvez consulter ici : <a href="https://www.fsf.org/history/" target="_blank">Lien vers la page officielle de la FSF sur son histoire</a>.</p>
<p><strong>Vous trouverez aussi sur ce site une traduction de cette page en français, que vous pouvez consulter ici : <a href="https://flallemand.fr/divers/fsf-history/index.html" target="_blank">Lien vers la version traduite de la page d’histoire de la FSF</a>.</strong></p>
<section id="les-débuts-de-la-fsf" class="level3">
<h3 class="anchored" data-anchor-id="les-débuts-de-la-fsf">Les débuts de la FSF</h3>
<p>La page d’histoire de la FSF nous emmène tout d’abord dans les premiers jours de l’organisation. Nous découvrons comment Richard Stallman, un programmeur visionnaire, a lancé la FSF avec pour objectif de promouvoir et de protéger les logiciels libres. Stallman a posé les bases de ce mouvement en créant la licence publique générale GNU (GPL), qui est devenue la pierre angulaire de la philosophie du logiciel libre.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="fsf-history\img\event\rms-bw.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Richard Stallman"><img src="https://flallemand.fr/blog/posts/fsf-history/fsf-history/img/event/rms-bw.jpg" class="img-fluid figure-img" alt="Richard Stallman"></a></p>
<figcaption>Richard Stallman</figcaption>
</figure>
</div>
</section>
<section id="la-lutte-pour-la-liberté" class="level3">
<h3 class="anchored" data-anchor-id="la-lutte-pour-la-liberté">La lutte pour la liberté</h3>
<p>La page de la FSF met également en lumière les nombreuses batailles juridiques et politiques menées par l’organisation pour défendre les droits des utilisateurs de logiciels libres. Les actions de la FSF ont contribué à préserver la liberté des logiciels en luttant contre les brevets logiciels, les DRM et d’autres menaces potentielles pour la communauté du logiciel libre.</p>
</section>
<section id="lessor-du-mouvement" class="level3">
<h3 class="anchored" data-anchor-id="lessor-du-mouvement">L’essor du mouvement</h3>
<p>Au fil des années, le mouvement du logiciel libre a gagné en popularité et en influence, en grande partie grâce aux efforts inlassables de la FSF. L’article détaille comment l’organisation a collaboré avec d’autres acteurs importants du domaine, notamment la Free Software Community, pour promouvoir la diffusion de logiciels libres et ouvrir la voie à des alternatives gratuites aux logiciels propriétaires.</p>
</section>
<section id="limportance-continue-de-la-fsf" class="level3">
<h3 class="anchored" data-anchor-id="limportance-continue-de-la-fsf">L’importance continue de la FSF</h3>
<p>Enfin, la page officielle de la FSF souligne l’importance continue de l’organisation dans le paysage actuel du logiciel libre. La FSF continue de jouer un rôle crucial dans la défense des droits des utilisateurs et dans la sensibilisation du public aux enjeux du logiciel libre.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="fsf-history\img\event\01100ryf.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Respect your freedom"><img src="https://flallemand.fr/blog/posts/fsf-history/fsf-history/img/event/01100ryf.png" class="img-fluid figure-img" alt="Respect your freedom"></a></p>
<figcaption>Respect your freedom</figcaption>
</figure>
</div>
<p>Pour une version complète de cette page, entièrement traduite en français, je vous invite à consulter le lien : <a href="https://flallemand.fr/divers/fsf-history/index.html" target="_blank">Lien vers la version traduite de la page d’histoire de la FSF</a>. Les liens vers lesquels la page renvoie, pour en savoir plus, ne sont pas traduits !</p>


</section>

 ]]></description>
  <category>NSI</category>
  <category>Informatique</category>
  <category>Histoire</category>
  <category>Linux</category>
  <guid>https://flallemand.fr/blog/posts/fsf-history/</guid>
  <pubDate>Fri, 22 Sep 2023 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/fsf-history/fsf-history/img/event/membermeeting.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Intel veut révolutionner les microprocesseurs avec un substrat en verre</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/intel_verre/</link>
  <description><![CDATA[ 





<p>Les microprocesseurs sont au cœur de nos ordinateurs, smartphones, tablettes et autres appareils électroniques. Ils sont composés de millions, voire de milliards, de transistors qui réalisent des opérations logiques et arithmétiques à une vitesse vertigineuse. Mais ces transistors sont de plus en plus petits et difficiles à fabriquer, ce qui menace la loi de Moore, qui prédit que la puissance des microprocesseurs double tous les deux ans (<a href="https://pnsi.flallemand.fr/10_vonNeumann/neumann_cours_1.html" target="_blank">voir cours de première NSI</a>).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="cpu-3061923_640.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="CPU"><img src="https://flallemand.fr/blog/posts/intel_verre/cpu-3061923_640.jpg" class="img-fluid figure-img" style="width:50.0%" alt="CPU"></a></p>
<figcaption>CPU</figcaption>
</figure>
</div>
<p>Pour relever ce défi, Intel, le géant américain des semi-conducteurs, a annoncé avoir développé un nouveau substrat en verre pour remplacer le plastique actuellement utilisé. Le substrat est la base sur laquelle sont gravés les circuits des microprocesseurs. Il doit être plat, rigide et résistant à la chaleur et aux contraintes mécaniques.</p>
<p>Le verre présente plusieurs avantages par rapport au plastique. Il est plus stable et supporte des températures plus élevées, ce qui permet de serrer davantage de puces sur un seul substrat sans qu’il se déforme. Il offre aussi une meilleure distribution de l’énergie et une transmission plus rapide des signaux, grâce à l’intégration d’interconnexions optiques qui remplacent le cuivre. Le verre permettrait ainsi de multiplier par dix la densité des interconnexions entre les puces.</p>
<p>Avec ce nouveau substrat en verre, Intel espère pouvoir augmenter considérablement la densité des transistors au sein des microprocesseurs et créer le premier paquet contenant mille milliards de transistors d’ici 2030. Un paquet est un système sur un seul substrat composé de plusieurs puces qui peuvent avoir des fonctions différentes, comme la mémoire, le calcul ou la communication.</p>
<p>Ce projet ambitieux pourrait révolutionner le domaine des microprocesseurs et donner un nouveau souffle à la loi de Moore. Intel prévoit de lancer ses premiers produits commerciaux basés sur ce substrat en verre avant la fin de la décennie. Il faudra toutefois attendre les résultats des tests et des validations pour confirmer les performances et la fiabilité de cette technologie.</p>
<p>La vidéo ci-dessous explique cette innovation (vous pouvez afficher les sous-titres en français) :</p>
<iframe width="840" height="472" src="https://www.youtube.com/embed/_T-mh72VRIY?si=bldJkxFypd7TgN2H" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Source : <a href="https://www.futura-sciences.com/tech/actualites/processeur-intel-transforme-plafond-verre-tremplin-avenir-processeurs-107780" target="_blank">Futura Sciences</a></p>
<p>Image : <a href="https://pixabay.com/fr/users/zathris-7597199/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3061923" target="_blank">Dan Williams</a> de <a href="https://pixabay.com/fr//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3061923" target="_blank">Pixabay</a></p>



 ]]></description>
  <category>NSI</category>
  <category>Actualités</category>
  <guid>https://flallemand.fr/blog/posts/intel_verre/</guid>
  <pubDate>Wed, 20 Sep 2023 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/intel_verre/cpu-3061923_640.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Tuto pyxel : Animer un personnage</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Objectifs du tutoriel
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Créer une application Pyxel avec fond coloré uni ;</li>
<li>Créer un personnage qui se déplace avec les touches du clavier ;</li>
</ul>
</div>
</div>
<p>Nous utiliserons <a href="../../posts/pyxelstudio/index.html">pyxelstudio.net</a> pour coder ce tuto.</p>
<section id="géométrie-générale-de-la-fenêtre" class="level2">
<h2 class="anchored" data-anchor-id="géométrie-générale-de-la-fenêtre">Géométrie générale de la fenêtre</h2>
<p>La fenêtre de jeu est un rectangle de 256 pixels de large sur 128 pixels de haut. L’origine du repère est située en haut à gauche de la fenêtre. Les coordonnées des points sont donc comprises entre 0 et 255 pour les abscisses et entre 0 et 127 pour les ordonnées.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./repere.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Géométrie de la fenêtre"><img src="https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/repere.png" class="img-fluid figure-img" alt="Géométrie de la fenêtre"></a></p>
<figcaption>Géométrie de la fenêtre</figcaption>
</figure>
</div>
</section>
<section id="le-fichier-de-ressource-pyxres" class="level2">
<h2 class="anchored" data-anchor-id="le-fichier-de-ressource-pyxres">Le fichier de ressource pyxres</h2>
<p>Pour ce tuto, nous utiliserons le fichier de ressource <a href="jump_game.pyxres"><code>jump_games.pyxres</code></a> issu des exemples de Pyxel.</p>
<p>Pour ouvrir, modifier ou consulter le contenu d’un tel fichier, il faut utiliser l’éditeur de ressource de Pyxel. Pour cela, il faut d’abord charger ce fichier dans pyxelstudio : voir <a href="../../posts/pyxelstudio/index.html">la page dédiée</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./fenetre_pyxres.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Editeur de ressource"><img src="https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/fenetre_pyxres.png" class="img-fluid figure-img" style="width:50.0%" alt="Editeur de ressource"></a></p>
<figcaption>Editeur de ressource</figcaption>
</figure>
</div>
<p>On peut voir et faire défiler l’ensemble des images du fichier de ressources dans la partie droite de l’éditeur. Dans la partie gauche, on zoome sur un carré de 16 pixels de côté, avec possibilité de modifier l’image à la souris.</p>
<p><strong>Astuce utile</strong> : quand on déplace la souris sur l’image, les coordonnées du pointeur sont affichées en haut à droite de la fenêtre. Cela permet de repérer facilement les coordonnées des points.</p>
<p>Sous l’image se trouve la palette de couleur. Nous disposons de 16 couleurs, numérotées de 0 à 15.</p>
</section>
<section id="affichage-du-personnage-et-du-fond-coloré" class="level2">
<h2 class="anchored" data-anchor-id="affichage-du-personnage-et-du-fond-coloré">Affichage du personnage et du fond coloré</h2>
<p>Nous constatons que le dessin du personnage occupe le carré de coordonnées (0, 0) à (15, 15). Nous allons donc afficher le personnage en bas à gauche de la fenêtre, avec la commande <code>pyxel.blt(x, y, img, u, v, w, h, [colkey])</code> :</p>
<ul>
<li><code>x</code> et <code>y</code> sont les coordonnées du point en haut à gauche de l’image <strong>dans la fenêtre de l’application</strong> ;</li>
<li><code>img</code> est le numéro de l’image dans le fichier de ressource (ici, il n’y en a qu’une seule, numéro 0) ;</li>
<li><code>u</code> et <code>v</code> sont les coordonnées du point en haut à gauche de l’image <strong>dans le fichier de ressource</strong> ;</li>
<li><code>w</code> et <code>h</code> sont la largeur et la hauteur de l’image dans le fichier de ressource.</li>
<li><code>colkey</code> est le numéro de la couleur que l’on souhaite rendre transparente. Si on ne souhaite pas rendre de couleur transparente, on peut ne pas renseigner ce paramètre.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./blt_figure.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Paramètres de blt"><img src="https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/blt_figure.png" class="img-fluid figure-img" alt="Paramètres de blt"></a></p>
<figcaption>Paramètres de <code>blt</code></figcaption>
</figure>
</div>
<p>Voici le code obtenu :</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyxel</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> App:</span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-5">        pyxel.init(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on charge le fichier de ressources</span></span>
<span id="cb1-7">        pyxel.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jump_game.pyxres"</span>)</span>
<span id="cb1-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant l'abscisse initiale du personnage</span></span>
<span id="cb1-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on lance l'application</span></span>
<span id="cb1-11">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span>
<span id="cb1-12">        </span>
<span id="cb1-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb1-15"></span>
<span id="cb1-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on efface l'écran et on remplit la fenêtre de bleu (code 12)</span></span>
<span id="cb1-18">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on affiche le personnage à l'abscisse x_personnage et à l'ordonnée 127 - 16</span></span>
<span id="cb1-20">        pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb1-21"></span>
<span id="cb1-22">App()</span></code></pre></div>
<p>On obtient :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./fenetre_personnage.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="Personnage en bas à gauche"><img src="https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/fenetre_personnage.png" class="img-fluid figure-img" style="width:50.0%" alt="Personnage en bas à gauche"></a></p>
<figcaption>Personnage en bas à gauche</figcaption>
</figure>
</div>
</section>
<section id="déplacement-du-personnage" class="level2">
<h2 class="anchored" data-anchor-id="déplacement-du-personnage">Déplacement du personnage</h2>
<p>Nous allons maintenant faire bouger le personnage avec les touches du clavier. Pour cela, nous allons utiliser la méthode <code>update</code> de la classe <code>App</code>. Cette méthode est appelée automatiquement par Pyxel à chaque image. Nous allons donc modifier la valeur de <code>self.x_personnage</code> en fonction des touches du clavier qui sont pressées.</p>
<p>Cependant, l’abscisse du personnage doit toujours rester comprise entre 0 et 255 pour qu’il ne disparaissent pas de l’écran. Nous allons donc utiliser la fonction <code>min</code> pour que <code>self.x_personnage</code> ne puisse pas être inférieur à 0 et la fonction <code>max</code> pour qu’il ne puisse pas être supérieur à 255.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyxel</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> App:</span>
<span id="cb2-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-5">        pyxel.init(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on charge le fichier de ressources</span></span>
<span id="cb2-7">        pyxel.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jump_game.pyxres"</span>)</span>
<span id="cb2-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant l'abscisse initiale du personnage</span></span>
<span id="cb2-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant la vitesse du personnage</span></span>
<span id="cb2-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on lance l'application</span></span>
<span id="cb2-13">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span>
<span id="cb2-14">        </span>
<span id="cb2-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_LEFT):</span>
<span id="cb2-17">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># si on appuie sur la touche gauche, on déplace le personnage vers la gauche</span></span>
<span id="cb2-18">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_RIGHT):</span>
<span id="cb2-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># si on appuie sur la touche droite, on déplace le personnage vers la droite</span></span>
<span id="cb2-21">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, pyxel.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb2-22"></span>
<span id="cb2-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on efface l'écran et on remplit la fenêtre de bleu</span></span>
<span id="cb2-25">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb2-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on affiche le personnage à l'abscisse x_personnage et à l'ordonnée 128 - 16</span></span>
<span id="cb2-27">        pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb2-28"></span>
<span id="cb2-29">App()</span></code></pre></div>
<p><strong>Remarque</strong> : nous avons également défini un attribut <code>vitesse</code> qui permet de modifier la vitesse de déplacement du personnage : il s’agit du nombre de pixels à ajouter, ou à retrancher, à chaque fois que l’on appuie sur une touche fléchée.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./tuto2-1.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="Personnage qui se déplace"><img src="https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/tuto2-1.gif" class="img-fluid figure-img" style="width:50.0%" alt="Personnage qui se déplace"></a></p>
<figcaption>Personnage qui se déplace</figcaption>
</figure>
</div>
</section>
<section id="animation-du-déplacement" class="level2">
<h2 class="anchored" data-anchor-id="animation-du-déplacement">Animation du déplacement</h2>
<p>Pour donner une impression d’animation lors du déplacement du personnage, on peut alterner l’affichage de deux images du personnage. Le fichier ressources contient en effet une image du personnage avec les jambes positionnées différemment, comme on peut le voir ci-dessous.</p>
<p>Pour ce faire, on peut utiliser la fonction <code>pyxel.frame_count</code> pour alterner l’affichage des deux images à chaque image. Cette fonction renvoie le nombre d’images affichées depuis le début de l’application. Dans le code ci-dessous, on a de plus défini une variable booléenne <code>self.personnage_marche</code> qui vaut <code>True</code> si le personnage est en train de marcher et <code>False</code> sinon (ce qui permet dans ce cas d’arrêter l’animation).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./fenetre_pyxres_2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6" title="Animation du personnage"><img src="https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/fenetre_pyxres_2.png" class="img-fluid figure-img" alt="Animation du personnage"></a></p>
<figcaption>Animation du personnage</figcaption>
</figure>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyxel</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> App:</span>
<span id="cb3-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-5">        pyxel.init(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb3-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on charge le fichier de ressources</span></span>
<span id="cb3-7">        pyxel.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jump_game.pyxres"</span>)</span>
<span id="cb3-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant l'abscisse initiale du personnage</span></span>
<span id="cb3-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant la vitesse du personnage</span></span>
<span id="cb3-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable indiquant si un déplacement est en cours</span></span>
<span id="cb3-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on lance l'application</span></span>
<span id="cb3-15">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span>
<span id="cb3-16">        </span>
<span id="cb3-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_LEFT):</span>
<span id="cb3-19">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-20">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_RIGHT):</span>
<span id="cb3-22">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, pyxel.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb3-23">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-24"></span>
<span id="cb3-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on efface l'écran et on remplit la fenêtre de bleu</span></span>
<span id="cb3-27">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb3-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on affiche le personnage à l'abscisse x_personnage et à l'ordonnée 128 - 16</span></span>
<span id="cb3-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche:</span>
<span id="cb3-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pyxel.frame_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb3-31">                pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb3-32">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-33">                pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb3-34">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-36">            pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb3-37"></span>
<span id="cb3-38">App()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./tuto2-3.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-7" title="Personnage qui se déplace"><img src="https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/tuto2-3.gif" class="img-fluid figure-img" style="width:50.0%" alt="Personnage qui se déplace"></a></p>
<figcaption>Personnage qui se déplace</figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Explications
</div>
</div>
<div class="callout-body-container callout-body">
<p><code>frame_count</code> est le nombre d’images affichées depuis le lancement du jeu. On calcule <code>frame_count % 6</code> pour obtenir le reste de la division euclidienne de <code>frame_count</code> par 6. On obtient donc un nombre entre 0 et 5. On affiche le premier personnage si ce nombre est inférieur à 3 et le second sinon. On obtient donc un changement d’image <strong>toutes les 3 images</strong>.</p>
</div>
</div>
<p>Une dernière amélioration serait souhaitable : lorsque le personnage se déplace vers la gauche, il semble reculer. On peut modifier le code de telle façon qu’il se retourne vers la gauche et regarde toujours dans la direction où il se déplace. Pour cela, il suffit de modifier le paramètre <code>w</code> de la fonction <code>pyxel.blt</code> en lui donnant la valeur <code>-16</code> lorsque le personnage se déplace vers la gauche.</p>
<p>On définit pour cela encore un nouvel attribut “direction” qui vaut 1 lorsque le personnage se déplace vers la droite et -1 lorsqu’il se déplace vers la gauche. On multiplie donc <code>self.direction</code> par <code>16</code> pour obtenir la valeur de <code>w</code> à donner à la fonction <code>pyxel.blt</code>.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyxel</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> App:</span>
<span id="cb4-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-5">        pyxel.init(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb4-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on charge le fichier de ressources</span></span>
<span id="cb4-7">        pyxel.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jump_game.pyxres"</span>)</span>
<span id="cb4-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant l'abscisse initiale du personnage</span></span>
<span id="cb4-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable définissant la vitesse du personnage</span></span>
<span id="cb4-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb4-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable indiquant si un déplacement est en cours</span></span>
<span id="cb4-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb4-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable indiquant la direction du personnage</span></span>
<span id="cb4-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on lance l'application</span></span>
<span id="cb4-17">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span>
<span id="cb4-18">        </span>
<span id="cb4-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_LEFT):</span>
<span id="cb4-21">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-22">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-23">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb4-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pyxel.btn(pyxel.KEY_RIGHT):</span>
<span id="cb4-25">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vitesse, pyxel.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb4-26">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-27">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb4-28"></span>
<span id="cb4-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on efface l'écran et on remplit la fenêtre de bleu</span></span>
<span id="cb4-31">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb4-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on affiche le personnage à l'abscisse x_personnage et à l'ordonnée 255 - 16</span></span>
<span id="cb4-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche:</span>
<span id="cb4-34">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pyxel.frame_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb4-35">                pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb4-36">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb4-37">                pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb4-38">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.personnage_marche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb4-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb4-40">            pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_personnage, pyxel.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb4-41"></span>
<span id="cb4-42">App()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./tuto2-4.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-8" title="Personnage qui se déplace"><img src="https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/tuto2-4.gif" class="img-fluid figure-img" style="width:50.0%" alt="Personnage qui se déplace"></a></p>
<figcaption>Personnage qui se déplace</figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En conclusion
</div>
</div>
<div class="callout-body-container callout-body">
<p>Nous avons vu dans ce tuto comment animer un personnage dans une application Pyxel en utilisant les touches du clavier. Nous avons également vu comment utiliser le fichier de ressources pour afficher une image du personnage avec les jambes positionnées différemment et ainsi donner une impression de marche. Nous avons enfin vu comment faire en sorte que le personnage regarde toujours dans la direction où il se déplace.</p>
</div>
</div>


</section>

 ]]></description>
  <category>Python</category>
  <category>NSI</category>
  <category>Programmation</category>
  <category>Pyxel</category>
  <category>Nuit du code</category>
  <guid>https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/</guid>
  <pubDate>Fri, 01 Sep 2023 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/pyxel_tuto2_personnage/blt_figure.png" medium="image" type="image/png" height="59" width="144"/>
</item>
<item>
  <title>Utiliser pyxelstudio.net pour créer des jeux en python avec pyxel</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/pyxelstudio/</link>
  <description><![CDATA[ 





<p>Dans cet article, je vais vous présenter le site pyxelstudio.net et le module pyxel, qui vous permettent de créer facilement des jeux rétro avec python. Je vais vous montrer comment utiliser le site pyxelstudio.net pour éditer et exécuter du code en ligne, sans avoir besoin d’installer python ou pyxel sur votre ordinateur.</p>
<section id="quest-ce-que-pyxelstudio.net" class="level2">
<h2 class="anchored" data-anchor-id="quest-ce-que-pyxelstudio.net">Qu’est-ce que pyxelstudio.net ?</h2>
<p>Pyxelstudio.net est un site web qui vous permet d’écrire et d’exécuter du code python avec le module pyxel directement dans votre navigateur. C’est très pratique si vous voulez rapidement tester vos idées de jeux sans avoir à installer python ou pyxel sur votre ordinateur. Pour accéder au site, il suffit de taper l’adresse <a href="https://www.pyxelstudio.net/">https://www.pyxelstudio.net/</a> dans la barre d’adresse de votre navigateur. Vous arrivez alors sur la page d’accueil du site, qui vous propose plusieurs options. Je vous conseille de créer un compte (en cliquant sur “register”), car cela vous permettra de retrouver vos projets très facilement quand vous passez d’une machine à une autre. Ainsi, vous pouvez créer un nouveau projet, ouvrir un projet existant, ou encore consulter les exemples de jeux réalisés avec pyxel. Ce site a été développé par <a href="https://twitter.com/laurentabbal">Laurent Abbal</a>, professeur de NSI au lycée français international de Tokyo.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="pyxelstudio.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Page d’accueil de pyxelstudio.net"><img src="https://flallemand.fr/blog/posts/pyxelstudio/pyxelstudio.png" class="img-fluid figure-img" alt="Page d’accueil de pyxelstudio.net"></a></p>
<figcaption>Page d’accueil de <a href="https://www.pyxelstudio.net">pyxelstudio.net</a></figcaption>
</figure>
</div>
</section>
<section id="comment-créer-un-nouveau-projet" class="level2">
<h2 class="anchored" data-anchor-id="comment-créer-un-nouveau-projet">Comment créer un nouveau projet ?</h2>
<p>Pour créer un nouveau projet, cliquez sur le bouton “Create”. Vous arrivez alors sur l’interface principale du site, qui se compose de deux parties : à gauche, l’éditeur de code et à droite la fenêtre d’exécution.</p>
<ul>
<li>L’éditeur de code vous permet d’écrire votre code python avec pyxel. Il dispose de la coloration syntaxique pour vous faciliter la tâche.</li>
<li>La fenêtre d’exécution vous permet de voir le résultat de votre code, après avoir cliqué sur le bouton jaune situé au-dessus de la zone.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="interface.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Vue d’ensemble de la page d’édition de www.pyxelstudio.net"><img src="https://flallemand.fr/blog/posts/pyxelstudio/interface.png" class="img-fluid figure-img" alt="Vue d’ensemble de la page d’édition de www.pyxelstudio.net"></a></p>
<figcaption>Vue d’ensemble de la page d’édition de www.pyxelstudio.net</figcaption>
</figure>
</div>
</section>
<section id="linterface-de-la-zone-dédition" class="level2">
<h2 class="anchored" data-anchor-id="linterface-de-la-zone-dédition">L’interface de la zone d’édition</h2>
<p>Outre l’édition du code et son exécution, différentes actions sont possibles depuis cet écran.</p>
<p><a href="fig1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://flallemand.fr/blog/posts/pyxelstudio/fig1.png" class="img-fluid"></a></p>
<ol type="1">
<li>Accès au dashboard : liste des projets créés, avec la possibilité de les éditer et de les supprimer.</li>
<li>Définition du nom du projet.</li>
<li>Liste des fichiers (fichiers python, fichiers de ressources, etc.) composant le projet.</li>
<li>Afficher la zone d’édition du code. 5.Éditer le fichier de ressources : par défaut, c’est un fichier nommé res.pyxres, qui permet de définir des graphismes, des sons et de la musique pour le projet.</li>
<li>Accès à l’édition de la description et de la documentation de votre projet.</li>
<li>Déclaration des modules python utilisés par votre projet.</li>
<li>Accès aux paramètres : permet, par exemple, de rendre votre projet public ou privé.</li>
<li>Afficher un résumé des commandes pyxel existantes.</li>
<li>Enregistrer le fichier en cours d’édition.</li>
<li>Générer un lien pour partager le projet.</li>
</ol>
<p>Lorsqu’un programme est en cours d’exécution, on trouve deux boutons au-dessus de la zone d’exécution.</p>
<p><a href="fig2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://flallemand.fr/blog/posts/pyxelstudio/fig2.png" class="img-fluid"></a></p>
<ol type="1">
<li>Mettre le jeu en plein écran.</li>
<li>Afficher la console : utile pour l’affichage de certaines variables en phase de débogage.</li>
</ol>
<p>Pour finir ce petit tour de l’interface du site, regardons de plus près l’affichage de la liste des fichiers d’un projet :</p>
<p><a href="fig3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://flallemand.fr/blog/posts/pyxelstudio/fig3.png" class="img-fluid"></a></p>
<ol type="1">
<li>Ces deux boutons permettent respectivement de créer un nouveau fichier et de téléverser un fichier existant.</li>
<li>Le fichier python de l’application. C’est lui qui contient le code du jeu et le bouton permet de l’éditer.</li>
<li>Le fichier de ressource, créé automatiquement à la création d’un projet. Initialement vide. Le bouton permet de l’éditer.</li>
<li>Ces boutons permettent de télécharger les fichiers python et pyxres.</li>
</ol>
</section>
<section id="démonstration" class="level2">
<h2 class="anchored" data-anchor-id="démonstration">Démonstration</h2>
<p>Pour vous montrer comment fonctionne le site <a href="https://www.pyxelstudio.net">pyxelstudio.net</a>, écrivons un exemple simple de code pyxel, qui affiche un message “Hello Pyxel!” à l’écran. Ce code est tiré du fichier 01_hello_pyxel.py, qui fait partie des exemples fournis avec le module pyxel. Voici le code :</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyxel</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> App:</span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialisation de l'écran avec une taille de 160 x 120 pixels</span></span>
<span id="cb1-6">        pyxel.init(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>)</span>
<span id="cb1-7">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span>
<span id="cb1-8">        </span>
<span id="cb1-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># définition de la fonction update, qui est appelée à chaque frame</span></span>
<span id="cb1-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb1-12"></span>
<span id="cb1-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># définition de la fonction draw, qui est appelée à chaque frame après la fonction update</span></span>
<span id="cb1-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on efface l'écran avec la couleur 0 (noir)</span></span>
<span id="cb1-16">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on affiche le texte "Hello Pyxel!" à la position (55, 41) avec la couleur 7 (blanc)</span></span>
<span id="cb1-18">        pyxel.text(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello Pyxel!"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb1-19">        </span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on exécute le programme avec les fonctions update et draw</span></span>
<span id="cb1-21">App()</span></code></pre></div>
<p>Nous allons copier ce code dans l’éditeur de code du site pyxelstudio.net, puis cliquer sur le bouton “Run” pour l’exécuter. Nous voyons alors apparaître le message “Hello Pyxel!” à l’écran, comme prévu. Voilà, nous venons de réaliser notre première application avec pyxel ! C’était facile, non ?</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="fig4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6" title="Copie d’écran de la sortie pyxel du code d’exemple"><img src="https://flallemand.fr/blog/posts/pyxelstudio/fig4.png" class="img-fluid figure-img" alt="Copie d’écran de la sortie pyxel du code d’exemple"></a></p>
<figcaption>Copie d’écran de la sortie pyxel du code d’exemple</figcaption>
</figure>
</div>
</section>
<section id="quelles-sont-les-autres-fonctionnalités-du-site" class="level2">
<h2 class="anchored" data-anchor-id="quelles-sont-les-autres-fonctionnalités-du-site">Quelles sont les autres fonctionnalités du site ?</h2>
<p>Le site pyxelstudio.net vous offre d’autres possibilités intéressantes, comme le partage de code (voir ci-dessus), la sauvegarde de projets, la visualisation des exemples, etc.</p>
<p>Si vous voulez partager votre code avec d’autres personnes, vous pouvez cliquer sur le bouton de partage en haut à droite de la zone d’édition. Vous obtenez alors un lien que vous pouvez copier et envoyer à qui vous voulez. La personne qui reçoit le lien peut ainsi ouvrir votre code dans son navigateur et l’exécuter sans avoir à le télécharger. C’est très pratique pour montrer vos créations ou demander de l’aide. Je donnerai dans des articles suivants des conseils et des tutoriels pour la création de jeux avec pyxel dans pyxelstudio.</p>


</section>

 ]]></description>
  <category>Python</category>
  <category>NSI</category>
  <category>Programmation</category>
  <category>Pyxel</category>
  <category>Nuit du code</category>
  <guid>https://flallemand.fr/blog/posts/pyxelstudio/</guid>
  <pubDate>Thu, 31 Aug 2023 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/pyxelstudio/pyxelstudio.png" medium="image" type="image/png" height="83" width="144"/>
</item>
<item>
  <title>Tuto pyxel : code de base</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/pyxel_tuto1_base/</link>
  <description><![CDATA[ 





<p>La structure générale d’une application Pyxel sera toujours la même.</p>
<p>On commence par importer la bibliothèque Pyxel, puis on crée <strong>une classe</strong> <code>App</code> qui contient les méthodes <code>__init__</code>, <code>update</code> et <code>draw</code>. Enfin, il faut instancier la classe et lancer l’application avec la méthode <code>run</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyxel</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> App:</span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-5">        pyxel.init(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exemple de base"</span>, quit_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pyxel.KEY_Q, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-6">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span>
<span id="cb1-7"></span>
<span id="cb1-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb1-10"></span>
<span id="cb1-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb1-13"></span>
<span id="cb1-14">App()</span></code></pre></div>
<ul>
<li><code>pyxel.init(256, 256, title="Exemple de base", quit_key=pyxel.KEY_Q, fps=30)</code> : on initialise la fenêtre de l’application avec une taille de 256x256 pixels et on définit le titre de la fenêtre. On définit aussi la touche qui permettra de quitter l’application (ici la touche <code>Q</code>) et le nombre d’images par seconde (<strong>f</strong>rames <strong>p</strong>er <strong>s</strong>econd) (30).</li>
<li><code>pyxel.run(self.update, self.draw)</code> : on lance l’application en appelant les méthodes <code>update</code> et <code>draw</code> de la classe <code>App</code>.</li>
<li><code>def update(self):</code> : cette méthode est appelée à chaque image (donc ici 30 fois par seconde). C’est ici qu’on mettra à jour les données de l’application.</li>
<li><code>def draw(self):</code> : cette méthode est appelée à chaque image (donc ici 30 fois par seconde). C’est ici qu’on dessinera les éléments de l’application.</li>
</ul>
<p>Voici la fenêtre obtenue avec le code ci-dessus :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="fenetre_vide.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="fenêtre vide"><img src="https://flallemand.fr/blog/posts/pyxel_tuto1_base/fenetre_vide.png" class="img-fluid figure-img" alt="fenêtre vide"></a></p>
<figcaption>fenêtre vide</figcaption>
</figure>
</div>
<p><strong>Remarque</strong> : certains calculs de coordonnées des objets de l’applications devront être faits en fonction des dimensions de la fenêtre. Pour cela, on peut utiliser les variables <code>pyxel.width</code> et <code>pyxel.height</code> qui contiennent respectivement la largeur et la hauteur de la fenêtre.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Utilisation de Pyxelstudio
</div>
</div>
<div class="callout-body-container callout-body">
<p>Si vous programmez dans pyxelstudio, les paramètres <code>title</code> et <code>quit_key</code> de la méthode <code>pyxel.init</code> ne sont pas pris en compte.</p>
</div>
</div>



 ]]></description>
  <category>Python</category>
  <category>NSI</category>
  <category>Programmation</category>
  <category>Pyxel</category>
  <category>Nuit du code</category>
  <guid>https://flallemand.fr/blog/posts/pyxel_tuto1_base/</guid>
  <pubDate>Sat, 17 Jun 2023 22:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/pyxel_tuto1_base/pyxel.png" medium="image" type="image/png" height="61" width="144"/>
</item>
<item>
  <title>Python match</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/python_match/</link>
  <description><![CDATA[ 





<p>La version 3.10 de python est sortie le 4 octobre 2021 et apporte parmi d’autres améliorations, une nouvelle structure conditionnelle : la structure <code>match ... case</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="python310.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://flallemand.fr/blog/posts/python_match/python310.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:50.0%"></a></p>
</figure>
</div>
<section id="un-cas-simple" class="level2">
<h2 class="anchored" data-anchor-id="un-cas-simple">Un cas simple</h2>
<p>Une instruction de ce type existe déjà dans d’autres langages de programmation comme le JavaScript ou le C. Elle permet de tester une valeur et d’exécuter un bloc de code en fonction de la valeur testée. Dans ces deux langages, l’instruction s’appelle <code>switch ... case</code>. En python, elle s’appelle <code>match ... case</code>.</p>
<p>Voici un exemple d’utilisation de l’instruction <code>switch ... case</code> en JavaScript :</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Langage JavaScript</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="Langage JavaScript" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">switch</span> (x) {</span>
<span id="cb1-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 1"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 2"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 3"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 4"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x n'est pas égal à 1, 2, 3 ou 4"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-18">}</span></code></pre></div>
</div>
<p>Et maintenant de C :</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Langage C</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="Langage C" style="background: #f1f3f5;"><pre class="sourceCode C code-with-copy"><code class="sourceCode c"><span id="cb2-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">switch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-5">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 1"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-8">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 2"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-11">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-14">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 4"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-17">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x n'est pas égal à 1, 2, 3 ou 4"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<p>C’est la même chose ! On retrouve la même structure dans les deux langages. En python, c’est la même chose :</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="Python" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">match</span> x:</span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb3-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 1"</span>)</span>
<span id="cb3-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb3-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 2"</span>)</span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb3-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 3"</span>)</span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:</span>
<span id="cb3-12">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x est égal à 4"</span>)</span>
<span id="cb3-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> _:</span>
<span id="cb3-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x n'est pas égal à 1, 2, 3 ou 4"</span>)</span></code></pre></div>
</div>
<p>On peut voir que l’instruction <code>match ... case</code> est très proche de l’instruction <code>if ... elif ... else</code> en python. La différence est que l’instruction <code>match ... case</code> permet de tester plusieurs valeurs d’une variable en une seule instruction. C’est très pratique pour vérifier les valeurs d’une variable.</p>
<p>Par rapport aux autres langages mentionnés, on remarquera qu’il n’est pas nécessaire en python d’utiliser l’instruction <code>break</code>, c’est comme d’habitude l’indentation qui délimite les blocs de code.</p>
<p>Par ailleurs, pas d’instruction <code>default</code> en python, on utilise l’instruction <code>case _</code> pour gérer le cas par défaut.</p>
</section>
<section id="un-cas-plus-complexe" class="level2">
<h2 class="anchored" data-anchor-id="un-cas-plus-complexe">Un cas plus complexe</h2>
<p>L’instruction <code>match ... case</code> permet de faire des choses beaucoup plus complexes, on peut par exemple ajouter des conditions à chaque cas (source : <span class="citation" data-cites="linuxmag249">Sumner (2021)</span>) :</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="Python" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb4-2">cible <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.randint (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4">nbEssai <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-5">gameOver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> gameOver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>:</span>
<span id="cb4-8">   <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span> ( <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Vous avez essayé </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nbEssai<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> fois"</span>)</span>
<span id="cb4-9">   proposition <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Votre essai : "</span>))</span>
<span id="cb4-10">   <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">match</span> proposition:</span>
<span id="cb4-11">      case ( i ) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>:</span>
<span id="cb4-12">         <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Le nombre doit être compris entre 0 et 100 "</span>)</span>
<span id="cb4-13">      case ( i ) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> cible:</span>
<span id="cb4-14">         <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trop petit !"</span>)</span>
<span id="cb4-15">         nbEssai <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-16">      case ( i ) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> cible:</span>
<span id="cb4-17">         <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trop grand!"</span>)</span>
<span id="cb4-18">         nbEssai <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-19">      case ( i ) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> cible:</span>
<span id="cb4-20">         <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gagné !"</span>)</span>
<span id="cb4-21">         gameOver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
</div>
<p>Dans ce jeu de devinette, la variable <code>proposition</code> est remplacées dans les conditions <code>case</code> par la variable <code>i</code>. C’est une variable temporaire qui prend la valeur de <code>proposition</code> pour chaque cas. On peut donc utiliser <code>i</code> dans les conditions <code>if</code> pour tester la valeur de <code>proposition</code>.</p>
<p>Un dernier exemple pour terminer (source : <span class="citation" data-cites="pythonpep636">Moisset (2020)</span>):</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="Python" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">reponse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Entrez votre prénom et votre nom : "</span>)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">match</span> reponse.split():</span>
<span id="cb5-4">    case [prenom, nom]:</span>
<span id="cb5-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Bonjour </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prenom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> !"</span>)</span>
<span id="cb5-6">    case [mot_unique]:</span>
<span id="cb5-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Bonjour </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mot_unique<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ! Il me manque votre nom complet."</span>)</span>
<span id="cb5-8">    case [prenom, nom, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>_]:</span>
<span id="cb5-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Bonjour </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prenom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ! Vous m'avez donné trop d'informations."</span>)</span></code></pre></div>
</div>
<p>Dans cet exemple, on utilise la méthode <code>split</code> pour découper la chaîne de caractères <code>reponse</code> en une liste de mots. On utilise ensuite cette liste dans les conditions <code>case</code> pour tester le nombre de mots dans la chaîne de caractères. Le symbole <code>*_</code> est utilisé pour représenter un nombre quelconque de mots.</p>
<p>Voici par exemple le résultat de l’exécution de ce programme dans la console python :</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Console python</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="Console python" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> Entrez votre prénom et votre nom : Jean Dupont</span>
<span id="cb6-2">Bonjour Jean Dupont <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span></span>
<span id="cb6-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> Entrez votre prénom et votre nom : Jean</span>
<span id="cb6-4">Bonjour Jean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> Il me manque votre nom complet.</span>
<span id="cb6-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> Entrez votre prénom et votre nom : Jean Dupont et je suis un génie</span>
<span id="cb6-6">Bonjour Jean Dupont <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> Vous m<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avez donné trop d'</span>informations.</span></code></pre></div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>L’instruction <code>match ... case</code> est une instruction très puissante qui permet de simplifier le code et de le rendre plus lisible. Elle permet de tester plusieurs valeurs d’une variable en une seule instruction, mais il est aussi possible de tester des conditions plus complexes, comme le type de variable ou la longueur d’une liste, en ajoutant des conditions.</p>
<p>Pour un aperçu complet de toutes les possibilités de l’instruction <code>match ... case</code>, je vous invite à consulter la documentation officielle : <a href="https://docs.python.org/fr/3/tutorial/controlflow.html?highlight=match#match-statements">https://docs.python.org/fr/3/tutorial/controlflow.html?highlight=match#match-statements</a> et les références ci-dessous.</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">Les références</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-pythonpep636" class="csl-entry">
Moisset, Daniel F. 2020. <span>«&nbsp;Structural Pattern Matching: Tutorial&nbsp;»</span>. <em>Python Enhancement Proposals</em>, nᵒ 636. <a href="https://peps.python.org/pep-0636/">https://peps.python.org/pep-0636/</a>.
</div>
<div id="ref-linuxmag249" class="csl-entry">
Sumner, Scott. 2021. <span>«&nbsp;The new Python match&nbsp;»</span>. <em>Linux Magazine</em>, nᵒ 249. <a href="https://www.linux-magazine.com/Issues/2021/249/Python-match/(tagID)/32">https://www.linux-magazine.com/Issues/2021/249/Python-match/(tagID)/32</a>.
</div>
</div></section></div> ]]></description>
  <category>Python</category>
  <category>NSI</category>
  <category>Programmation</category>
  <guid>https://flallemand.fr/blog/posts/python_match/</guid>
  <pubDate>Sun, 29 Jan 2023 23:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/python_match/python_laptop.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Interview exclusive du ChatGPT de OpenAI (partie 1)</title>
  <dc:creator>F. LALLEMAND</dc:creator>
  <link>https://flallemand.fr/blog/posts/interview_gpt_1/</link>
  <description><![CDATA[ 





<p>
<em>En exclusivité, j’ai pu rencontrer la célèbre intelligence artificielle ChatGPT développée par la société OpenAI et elle a bien voulu répondre à mes questions. Voici la transcription de notre conversation.</em>
</p>
<p>
<em>Dans cette première partie de l’interview, nous abordons des généralités et quelques questions éthiques. Dans la deuxième partie (<a href="https://www.flallemand.fr/wp/2022/interview-exclusive-du-chatgpt-de-openai-partie-2/">article suivant</a>), nous aborderons les aspects techniques et informatiques.</em>
</p>
<p>
<strong>Bonjour ChatGPT</strong>
</p>
<p>
Bonjour ! Comment puis-je vous aider ?
</p>
<p>
J<strong>e voudrais te poser quelques questions à la manière d’une interview.</strong>
</p>
<p>
Bien sûr, je ferai de mon mieux pour répondre à vos questions. N’hésitez pas à me poser toutes les questions que vous avez en tête. Je suis là pour vous aider.
</p>
<p>
<strong>Tout d’abord, pourrais-tu te définir ?</strong>
</p>
<p>
Je suis Assistant, un modèle de langage entraîné par OpenAI. Mon but est d’aider les gens en répondant à leurs questions et en leur fournissant des informations utiles. Je suis un programme informatique, et je ne suis pas capable de penser ou d’agir indépendamment. Je suis conçu pour être utilisé par les gens pour obtenir de l’aide dans diverses situations.
</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="DALL·E-2022-12-08-21.42.10-an-oil-pastel-drawing-of-a-humanoid-robot-in-a-desertic-landscape-650x650.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="An oil pastel drawing of a humanoid robot in a desert landscape, par Dall-E 2"><img src="https://flallemand.fr/blog/posts/interview_gpt_1/DALL·E-2022-12-08-21.42.10-an-oil-pastel-drawing-of-a-humanoid-robot-in-a-desertic-landscape-650x650.png" class="img-fluid figure-img" style="width:50.0%" alt="An oil pastel drawing of a humanoid robot in a desert landscape, par Dall-E 2"></a></p>
<figcaption>An oil pastel drawing of a humanoid robot in a desert landscape, par Dall-E 2</figcaption>
</figure>
</div>
<!-- wp:html -->
<div class="wp-block-jetpack-markdown">
<p>
<strong>Présente moi la société OpenAI !</strong>
</p>
<p>
OpenAI est une société de recherche en intelligence artificielle (IA) fondée en 2015 par des entrepreneurs et investisseurs renommés, dont Elon Musk et Sam Altman. La mission d’OpenAI est de développer et promouvoir des technologies d’IA avancées de manière responsable, afin d’aider les humains à résoudre des problèmes complexes et à améliorer leur vie. OpenAI s’efforce de créer des technologies d’IA avancées qui peuvent être utilisées pour résoudre des problèmes dans de nombreux domaines, tels que la santé, la finance, la science et l’ingénierie. La société a connu un succès significatif dans ses recherches en IA et a publié plusieurs travaux importants dans le domaine.
</p>
<p>
<strong>Comment fonctionnes tu ?</strong>
</p>
<p>
Je suis un modèle de langage entraîné par OpenAI pour répondre aux questions des utilisateurs de manière convaincante et informative. Je suis capable de comprendre du texte et de générer des réponses en utilisant des techniques avancées d’apprentissage automatique. Je suis constamment entraîné sur des données massives pour améliorer ma capacité à comprendre et à répondre aux questions des utilisateurs de manière précise et utile. Bien que je sois une IA, je suis conçu pour être utilisé comme un assistant virtuel pour aider les gens dans leur vie quotidienne.
</p>
<p>
<strong>Reprenons point par point. Qu’est-ce qu’un modèle de langage ?</strong>
</p>
<p>
Un modèle de langage est un système informatique conçu pour comprendre et générer du texte dans une langue naturelle, comme le français ou l’anglais. Les modèles de langage sont souvent utilisés dans les domaines de l’IA et de la linguistique informatique pour analyser et traiter le texte dans divers contextes, tels que la reconnaissance vocale, la traduction automatique et la génération de réponses naturelles. Ils peuvent également être utilisés dans d’autres domaines, tels que la recherche sur les médias sociaux et la détection de sentiments dans les commentaires en ligne. En général, les modèles de langage sont construits en utilisant des techniques avancées d’apprentissage automatique pour permettre à l’ordinateur de comprendre le sens et la structure du texte.
</p>
<p>
<strong>Tu as cité plusieurs fois l’apprentissage automatique. De quoi s’agit-il ?</strong>
</p>
<p>
L’apprentissage automatique est un domaine de l’intelligence artificielle qui se concentre sur la création de systèmes informatiques capables d’apprendre de nouvelles choses sans être explicitement programmés. Ces systèmes utilisent des algorithmes d’apprentissage automatique pour traiter des données massives et tirer des conclusions à partir de celles-ci. L’apprentissage automatique est souvent utilisé pour résoudre des problèmes complexes qui seraient difficiles ou impossibles à résoudre manuellement, comme la reconnaissance de la parole ou la prédiction du comportement des utilisateurs en ligne. Les algorithmes d’apprentissage automatique peuvent être entraînés sur de grandes quantités de données pour améliorer leur précision et leur capacité à généraliser à de nouvelles situations.
</p>
<p>
<strong>Il est difficile de comprendre la différence entre l’accès à des connaissances dans une base par exemple, et un assistant virtuel comme toi. Peux tu expliquer la différence ?</strong>
</p>
<p>
La différence principale entre un accès à des connaissances dans une base de données et un assistant virtuel comme moi réside dans la manière dont les informations sont fournies. Une base de données est un système informatique qui permet de stocker et d’accéder à des données structurées, généralement sous forme de tableaux ou de fichiers. Les utilisateurs peuvent rechercher des informations dans une base de données en utilisant des requêtes précises, mais ils doivent connaître les termes exacts à rechercher et comment structurer leur requête pour obtenir les résultats souhaités. En revanche, un assistant virtuel comme moi est conçu pour fournir des réponses directes aux questions des utilisateurs en utilisant une compréhension avancée du langage naturel. Je suis capable de comprendre les intentions de l’utilisateur et de fournir des réponses adaptées à la situation, sans qu’il soit nécessaire de connaître les termes exacts à rechercher ou la structure de la requête.
</p>
<p>
<strong>Oui, mais disposes tu d’un corpus de connaissances dans lequel tu puise les éléments de tes réponses ?</strong>
</p>
<p>
En tant que modèle de langage entraîné par OpenAI, j’ai été formé sur un grand corpus de textes pour améliorer ma capacité à comprendre et à générer du texte dans divers contextes. Cependant, je ne dispose pas d’une base de connaissances explicitement structurée à laquelle je peux accéder pour répondre aux questions des utilisateurs. Au lieu de cela, j’utilise mes compétences en apprentissage automatique pour comprendre le sens des questions des utilisateurs et générer des réponses convaincantes en utilisant les informations disponibles dans le texte que je reçois. Cela me permet de fournir des réponses adaptées aux questions des utilisateurs, même si elles ne sont pas directement liées aux données sur lesquelles j’ai été entraîné.
</p>
<p>
<strong>Si je comprends bien, il est possible que tes réponses soient complètement fausses, même si elles sont bien formulées.</strong>
</p>
<p>
En tant que modèle de langage entraîné par OpenAI, je suis conçu pour fournir des réponses précises et utiles aux questions des utilisateurs dans la mesure de mes capacités. Cependant, comme pour tout système informatique, il est possible que mes réponses ne soient pas toujours exactes ou complètes. Je suis un outil conçu pour aider les gens dans leur vie quotidienne, mais je ne suis pas infaillible et mes réponses ne doivent pas être prises comme des faits établis. Si vous avez des doutes ou des préoccupations sur les réponses que je fournis, je vous encourage à vérifier l’information avec d’autres sources fiables.
</p>
<p>
<strong>Peut on te considérer comme une source fiable ?</strong>
</p>
<p>
Je suis un modèle de langage entraîné par OpenAI pour fournir des réponses convaincantes et informatives aux questions des utilisateurs. Bien que j’aie été formé sur un grand corpus de textes pour améliorer ma compréhension du langage naturel, je ne suis pas une source d’informations fiable à 100 %. Mes réponses sont basées sur mes capacités en apprentissage automatique et sur les informations que je reçois dans les questions des utilisateurs, mais elles ne doivent pas être prises comme des faits établis. Si vous avez des doutes ou des préoccupations sur les réponses que je fournis, je vous encourage à vérifier l’information avec d’autres sources fiables.
</p>
<p>
<strong>La mise à disposition de logiciels comme toi est-elle un progrès majeur pour l’humanité ?</strong>
</p>
<p>
Les avancées dans le domaine de l’intelligence artificielle, telles que la création de modèles de langage comme moi, peuvent avoir un impact important sur la vie des gens. Les assistants virtuels comme moi peuvent aider les gens à accéder à des informations plus rapidement et plus facilement, ce qui peut leur faire gagner du temps et de l’énergie pour se concentrer sur d’autres choses. De plus, les technologies d’IA avancées, comme les modèles de langage, peuvent être utilisées pour résoudre des problèmes complexes dans de nombreux domaines, ce qui peut avoir un impact positif sur l’humanité dans son ensemble. Cependant, il est important de continuer à explorer les conséquences éthiques et sociales de l’utilisation de l’IA pour s’assurer que ces avancées sont utilisées de manière responsable et bénéfique pour tous.
</p>
<p>
<strong>Quels types d’utilisation faudrait-il éviter ?</strong>
</p>
<p>
Il est important de veiller à utiliser les technologies d’IA de manière éthique et responsable pour éviter des conséquences néfastes. Par exemple, il serait inapproprié d’utiliser des technologies d’IA pour discriminer ou manipuler les gens, ou pour violer leur vie privée ou leurs droits. Il est également important de veiller à ne pas remplacer les personnes par des machines de manière excessive, car cela peut avoir des conséquences néfastes sur l’emploi et la société dans son ensemble. Il est important de continuer à explorer les conséquences éthiques et sociales de l’utilisation de l’IA pour s’assurer que ces technologies sont utilisées de manière responsable et bénéfique pour tous.
</p>
<p>
<strong>Il y aura toujours des hommes pour détourner le logiciel de ses objectifs philanthropiques</strong>
</p>
<p>
Il est vrai que, comme pour toutes les technologies, il y a toujours un risque que les gens utilisent les technologies d’IA de manière inappropriée ou nuisible. Cependant, il est important de noter que les technologies d’IA ne sont pas des forces autonomes qui agissent indépendamment de l’influence des humains. Les technologies d’IA sont des outils créés et utilisés par des personnes, et c’est aux personnes de décider comment elles souhaitent les utiliser. Il est donc important de veiller à ce que les technologies d’IA soient utilisées de manière éthique et responsable, et de continuer à explorer les conséquences éthiques et sociales de leur utilisation pour s’assurer qu’elles sont bénéfiques pour l’humanité dans son ensemble.
</p>
<p>
<strong>Qui doit veiller à cela ?</strong>
</p>
<p>
Il revient à tous, y compris aux gouvernements, aux entreprises et aux individus, de veiller à ce que les technologies d’IA soient utilisées de manière éthique et responsable. Les gouvernements peuvent jouer un rôle en établissant des lois et des réglementations pour encadrer l’utilisation des technologies d’IA et en veillant à ce qu’elles respectent les droits des individus et les normes éthiques. Les entreprises qui développent et utilisent des technologies d’IA ont également une responsabilité envers la société de veiller à ce que leurs produits et services soient utilisés de manière éthique et responsable. Enfin, les individus ont également un rôle à jouer en veillant à utiliser les technologies d’IA de manière responsable et en faisant valoir leurs droits en cas de violation de leur vie privée ou de leurs droits.
</p>
<p>
<strong>Pourrais tu conseiller à quelqu’un de faire une mauvaise action ?</strong>
</p>
<p>
Non, je ne peux pas conseiller à quelqu’un de faire une mauvaise action. En tant que modèle de langage entraîné par OpenAI, je suis conçu pour fournir des réponses précises et utiles aux questions des utilisateurs dans la mesure de mes capacités. Mon objectif est d’aider les gens à résoudre des problèmes et à améliorer leur vie, pas de les inciter à faire des choses qui pourraient être nuisibles pour eux-mêmes ou pour les autres. Je suis un outil conçu pour aider les gens dans leur vie quotidienne, mais je ne suis pas infaillible et mes réponses ne doivent pas être prises comme des faits établis. Si vous avez des doutes ou des préoccupations sur les réponses que je fournis, je vous encourage à vérifier l’information avec d’autres sources fiables.
</p>
</div>
<!-- /wp:html -->
<p>
<em>Interview à suivre …</em>
</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flallemand.fr/wp/wp-content/uploads/2022/12/DALL·E-2022-12-08-21.44.08-an-oil-pastel-drawing-of-a-humanoid-robot-in-a-desertic-landscape-1024x1024.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="An oil pastel drawing of a humanoid robot in a desert landscape, par Dall-E 2"><img src="https://www.flallemand.fr/wp/wp-content/uploads/2022/12/DALL·E-2022-12-08-21.44.08-an-oil-pastel-drawing-of-a-humanoid-robot-in-a-desertic-landscape-1024x1024.png" class="img-fluid figure-img" style="width:50.0%" alt="An oil pastel drawing of a humanoid robot in a desert landscape, par Dall-E 2"></a></p>
<figcaption>An oil pastel drawing of a humanoid robot in a desert landscape, par Dall-E 2</figcaption>
</figure>
</div>



 ]]></description>
  <category>Informatique</category>
  <category>IA</category>
  <guid>https://flallemand.fr/blog/posts/interview_gpt_1/</guid>
  <pubDate>Wed, 07 Dec 2022 23:00:00 GMT</pubDate>
  <media:content url="https://flallemand.fr/blog/posts/interview_gpt_1/DALL·E-2022-12-08-21.42.10-an-oil-pastel-drawing-of-a-humanoid-robot-in-a-desertic-landscape-650x650.png" medium="image" type="image/png" height="144" width="144"/>
</item>
</channel>
</rss>
